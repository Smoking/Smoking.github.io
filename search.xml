<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>curl 自动获取并设置代理</title>
      <link href="/curl-zi-dong-huo-qu-bing-she-zhi-dai-li.html"/>
      <url>/curl-zi-dong-huo-qu-bing-she-zhi-dai-li.html</url>
      
        <content type="html"><![CDATA[<h3 id="自动从注册表中读取代理"><a href="#自动从注册表中读取代理" class="headerlink" title="自动从注册表中读取代理"></a>自动从注册表中读取代理</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> CCurlHttpClient<span class="token operator">::</span><span class="token function">GetAutoProxy</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span> <span class="token operator">&amp;</span> proxyVct<span class="token punctuation">)</span> <span class="token punctuation">{</span>  proxyVct<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  HKEY key<span class="token punctuation">;</span>  <span class="token keyword">auto</span> ret <span class="token operator">=</span> <span class="token function">RegOpenKeyEx</span><span class="token punctuation">(</span>HKEY_CURRENT_USER<span class="token punctuation">,</span> R<span class="token string">"(Software\Microsoft\Windows\CurrentVersion\Internet Settings)"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> KEY_ALL_ACCESS<span class="token punctuation">,</span> <span class="token operator">&amp;</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> ERROR_SUCCESS<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//std::cout &lt;&lt; "open failed: " &lt;&lt; ret &lt;&lt; std::endl;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  DWORD values_count<span class="token punctuation">,</span> max_value_name_len<span class="token punctuation">,</span> max_value_len<span class="token punctuation">;</span>  ret <span class="token operator">=</span> <span class="token function">RegQueryInfoKey</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>values_count<span class="token punctuation">,</span> <span class="token operator">&amp;</span>max_value_name_len<span class="token punctuation">,</span> <span class="token operator">&amp;</span>max_value_len<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> ERROR_SUCCESS<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//std::cout &lt;&lt; "query failed" &lt;&lt; std::endl;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>tuple<span class="token operator">&lt;</span>std<span class="token operator">::</span>shared_ptr<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span><span class="token punctuation">,</span> DWORD<span class="token punctuation">,</span> std<span class="token operator">::</span>shared_ptr<span class="token operator">&lt;</span>BYTE<span class="token operator">>></span><span class="token operator">></span> values<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> values_count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token operator">::</span>shared_ptr<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> <span class="token function">value_name</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>max_value_name_len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      std<span class="token operator">::</span>default_delete<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DWORD value_name_len <span class="token operator">=</span> max_value_name_len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    DWORD value_type<span class="token punctuation">,</span> value_len<span class="token punctuation">;</span>    <span class="token function">RegEnumValue</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> i<span class="token punctuation">,</span> value_name<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>value_name_len<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>value_type<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>value_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>shared_ptr<span class="token operator">&lt;</span>BYTE<span class="token operator">></span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token keyword">new</span> BYTE<span class="token punctuation">[</span>value_len<span class="token punctuation">]</span><span class="token punctuation">,</span>      std<span class="token operator">::</span>default_delete<span class="token operator">&lt;</span>BYTE<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    value_name_len <span class="token operator">=</span> max_value_name_len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">RegEnumValue</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> i<span class="token punctuation">,</span> value_name<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>value_name_len<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>value_type<span class="token punctuation">,</span> value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>value_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    values<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>std<span class="token operator">::</span><span class="token function">make_tuple</span><span class="token punctuation">(</span>value_name<span class="token punctuation">,</span> value_type<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  DWORD ProxyEnable <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> x <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>std<span class="token operator">::</span>get<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">></span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"ProxyEnable"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      ProxyEnable <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>DWORD<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>std<span class="token operator">::</span>get<span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">></span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ProxyEnable<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> x <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>std<span class="token operator">::</span>get<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">></span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"ProxyServer"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ProxyServer: "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>std<span class="token operator">::</span>get<span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">></span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>        std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span> vctSub<span class="token punctuation">;</span>        std<span class="token operator">::</span>string temp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>std<span class="token operator">::</span>get<span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">></span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">CutString</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> vctSub<span class="token punctuation">,</span> <span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> sub <span class="token operator">:</span> vctSub<span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>sub<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> sub<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"https="</span><span class="token punctuation">)</span><span class="token operator">!=</span> std<span class="token operator">::</span>string<span class="token operator">::</span>npos<span class="token punctuation">)</span>            proxyVct<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">replace_str</span><span class="token punctuation">(</span>sub<span class="token punctuation">,</span> <span class="token string">"https="</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>proxyVct<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="字符串截断"><a href="#字符串截断" class="headerlink" title="字符串截断"></a>字符串截断</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> CCurlHttpClient<span class="token operator">::</span><span class="token function">CutString</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string line<span class="token punctuation">,</span> std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span> <span class="token operator">&amp;</span>subline<span class="token punctuation">,</span> <span class="token keyword">char</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//首字母为a，剔除首字母</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> a<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    line<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  std<span class="token operator">::</span>size_t pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> line<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    std<span class="token operator">::</span>size_t curpos <span class="token operator">=</span> pos<span class="token punctuation">;</span>    pos <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> curpos<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">==</span> std<span class="token operator">::</span>string<span class="token operator">::</span>npos<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      pos <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    subline<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>curpos<span class="token punctuation">,</span> pos <span class="token operator">-</span> curpos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pos<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="字符串替换方法"><a href="#字符串替换方法" class="headerlink" title="字符串替换方法"></a>字符串替换方法</h3><pre class=" language-cpp"><code class="language-cpp">std<span class="token operator">::</span>string CCurlHttpClient<span class="token operator">::</span><span class="token function">replace_str</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string str<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string before<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string after<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token operator">::</span>string<span class="token operator">::</span>size_type <span class="token function">pos</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> pos <span class="token operator">!=</span> std<span class="token operator">::</span>string<span class="token operator">::</span>npos<span class="token punctuation">;</span> pos <span class="token operator">+</span><span class="token operator">=</span> after<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>  pos <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>before<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">!=</span> std<span class="token operator">::</span>string<span class="token operator">::</span>npos<span class="token punctuation">)</span>  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> before<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> after<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>  <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="curl-设置代理方法"><a href="#curl-设置代理方法" class="headerlink" title="curl 设置代理方法"></a>curl 设置代理方法</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//设置代理,自动读取代理</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">GetAutoProxy</span><span class="token punctuation">(</span>m_vctProxy<span class="token punctuation">)</span><span class="token punctuation">)</span>  m_vctProxy<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>m_vctProxy<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> strProxy<span class="token operator">:</span>m_vctProxy<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">curl_easy_setopt</span><span class="token punctuation">(</span>easy_handle<span class="token punctuation">,</span> CURLOPT_PROXY<span class="token punctuation">,</span> strProxy<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> curl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试脚本</title>
      <link href="/ce-shi-jiao-ben.html"/>
      <url>/ce-shi-jiao-ben.html</url>
      
        <content type="html"><![CDATA[<pre class=" language-shell"><code class="language-shell">#!/bin/bash -ilexcheck(){    code=$1;    openid=$2;    toopenid=$3;    start "cloudhub://$2:yzj@/autologin?eid=11475617&oid=$2&code=$1&version=1.0"    RESULT=$(curl -s http://127.0.0.1:1864/query?openid=$2&eid=11475617)    boolstr=${RESULT:10:5};    i=1;    while [ "$boolstr" = "false" ]; do        RESULT=$(curl -s "http://127.0.0.1:1864/query?openid=$2&eid=11475617");        boolstr=${RESULT:10:5};        echo $boolstr;        sleep 1s;        ((i++));        if [ i == 20 ]; then            echo "登录超时";            break;        fi    done    start "cloudhub://$2:yzj@/chat?msg=&toopenid=$toopenid&version=1.0";    sleep 3s;    C:/Windows/System32/cmd.exe /C 'taskkill /f /t /fi "imagename eq CloudHub.exe"'}index=1;max=100;while [ $index -lt $max ]; do    check d3661c26069234426fca5916540f161a  5b553ca3e4b0751b86778f30 5b78d0a6e4b0f7976561873fdone</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++ 读取asar中的文件</title>
      <link href="/c-du-qu-asar-zhong-de-wen-jian.html"/>
      <url>/c-du-qu-asar-zhong-de-wen-jian.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是asar"><a href="#什么是asar" class="headerlink" title="什么是asar"></a>什么是asar</h2><h3 id="官方说明"><a href="#官方说明" class="headerlink" title="官方说明"></a>官方说明</h3><blockquote><p>asar - Electron Archive<br>Asar is a simple extensive archive format, it works like tar that concatenates all files together without compression, while having random access support.</p></blockquote><blockquote><p>Features</p></blockquote><blockquote><p>Support random access</p></blockquote><blockquote><p>Use JSON to store files’ information</p></blockquote><blockquote><p>Very easy to write a parser</p></blockquote><p>意思是说：asar类似于tar只是把所有文件合成一个文件而不进行压缩，所以理论上合成asar之后的总体积是要比原始文件要大的，毕竟还要加上存储文件信息<br>优点：</p><ul><li>支持随机访问</li><li>使用JSON存储文件的信息</li><li>很容易编写解析器</li></ul><p><strong>主要是electron中默认是使用这个来隐藏源码文件</strong></p><h2 id="asar文件结构"><a href="#asar文件结构" class="headerlink" title="asar文件结构"></a>asar文件结构</h2><h3 id="文件中的数据罗列"><a href="#文件中的数据罗列" class="headerlink" title="文件中的数据罗列"></a>文件中的数据罗列</h3><pre><code>| UInt32: header_size | String: header | Bytes: file1 | ... | Bytes: file42 |</code></pre><p>解析：<br>前8个字节表示信息头的长度，然后根据头的长度，去读文档中的结构json串，读取json串之后 按照文件中偏移位置和大小来读取指定文件的内容</p><h3 id="文档信息结构json串"><a href="#文档信息结构json串" class="headerlink" title="文档信息结构json串"></a>文档信息结构json串</h3><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>   <span class="token property">"files"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"tmp"</span><span class="token operator">:</span> <span class="token punctuation">{</span>         <span class="token property">"files"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"usr"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>         <span class="token property">"files"</span><span class="token operator">:</span> <span class="token punctuation">{</span>           <span class="token property">"bin"</span><span class="token operator">:</span> <span class="token punctuation">{</span>             <span class="token property">"files"</span><span class="token operator">:</span> <span class="token punctuation">{</span>               <span class="token property">"ls"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                 <span class="token property">"offset"</span><span class="token operator">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span>                 <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>                 <span class="token property">"executable"</span><span class="token operator">:</span> <span class="token boolean">true</span>               <span class="token punctuation">}</span><span class="token punctuation">,</span>               <span class="token property">"cd"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                 <span class="token property">"offset"</span><span class="token operator">:</span> <span class="token string">"100"</span><span class="token punctuation">,</span>                 <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>                 <span class="token property">"executable"</span><span class="token operator">:</span> <span class="token boolean">true</span>               <span class="token punctuation">}</span>             <span class="token punctuation">}</span>           <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"etc"</span><span class="token operator">:</span> <span class="token punctuation">{</span>         <span class="token property">"files"</span><span class="token operator">:</span> <span class="token punctuation">{</span>           <span class="token property">"hosts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>             <span class="token property">"offset"</span><span class="token operator">:</span> <span class="token string">"200"</span><span class="token punctuation">,</span>             <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">32</span>           <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="nodejs实现原理"><a href="#nodejs实现原理" class="headerlink" title="nodejs实现原理"></a>nodejs实现原理</h2><pre class=" language-JavaScript"><code class="language-JavaScript">//读取asar文件头部信息源码module.exports.readArchiveHeaderSync = function (archive) {  const fd = fs.openSync(archive, 'r')  let size  let headerBuf  try {    const sizeBuf = Buffer.alloc(8)    //先分配了8个字节读取头部需要的大小    if (fs.readSync(fd, sizeBuf, 0, 8, null) !== 8) {      throw new Error('Unable to read header size')    }    const sizePickle = pickle.createFromBuffer(sizeBuf)    //注意:这里是转换成uint32的方式    size = sizePickle.createIterator().readUInt32()    headerBuf = Buffer.alloc(size)    //读取header    if (fs.readSync(fd, headerBuf, 0, size, null) !== size) {      throw new Error('Unable to read header')    }  } finally {    fs.closeSync(fd)  }  const headerPickle = pickle.createFromBuffer(headerBuf)  //转换字符串  const header = headerPickle.createIterator().readString()  return { header: JSON.parse(header), headerSize: size }}</code></pre><p>在上面的代码有两个关键就是pickle这个模块的功能，已经怎么吧字节转换成headsize的,我们先看看 readUInt32的源码</p><pre class=" language-JavaScript"><code class="language-JavaScript">//pickle 中代码var SIZE_INT32 = 4var SIZE_UINT32 = 4var SIZE_INT64 = 8var SIZE_UINT64 = 8var SIZE_FLOAT = 4var SIZE_DOUBLE = 8PickleIterator.prototype.readUInt32 = function () {    return this.readBytes(SIZE_UINT32, Buffer.prototype.readUInt32LE)  }</code></pre><p>再看看Buffer.prototype.readUInt32LE 说明</p><blockquote><p>用指定的字节序格式（readUInt32BE() 返回大端序， readUInt32LE() 返回小端序）从 buf 中指定的 offset 读取一个无符号的 32 位整数值。</p></blockquote><p><strong>重点在这里是小端序</strong></p><ul><li>大端序<ul><li>数据的高位字节存放在地址的低端 低位字节存放在地址高端</li></ul></li><li>小端序<ul><li>数据的高位字节存放在地址的高端 低位字节存放在地址低端<br>什么意思：大端序是按照数字的书写顺序进行存储的，而小端序是颠倒书写顺序进行存储的。所以这里我们读取8位之后先倒叙，然后再转uint</li></ul></li></ul><p>再看两个源码</p><pre class=" language-javascript"><code class="language-javascript">PickleIterator<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>readString <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">readBytes</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>PickleIterator<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>readBytes <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>length<span class="token punctuation">,</span> method<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> readPayloadOffset <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getReadPayloadOffsetAndAdvance</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>payload<span class="token punctuation">,</span> readPayloadOffset<span class="token punctuation">,</span> length<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>payload<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>readPayloadOffset<span class="token punctuation">,</span> readPayloadOffset <span class="token operator">+</span> length<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>PickleIterator<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getReadPayloadOffsetAndAdvance <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>endIndex <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>readIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>readIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>endIndex      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Failed to read data with length of '</span> <span class="token operator">+</span> length<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> readPayloadOffset <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>payloadOffset <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>readIndex    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">advance</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span>    <span class="token keyword">return</span> readPayloadOffset  <span class="token punctuation">}</span></code></pre><p>这段代码说明了什么，在头部这个串中是有位置偏移的，先读取要读的字符串长度，然后再读取制定的字符串。</p><h2 id="解析流程"><a href="#解析流程" class="headerlink" title="解析流程"></a>解析流程</h2><ul><li>读取头8个字节</li><li>8个字节小端序转成 headsize</li><li>读取headsize 数量的二进制数据headbuf</li><li>读取headbuf前8个字节获取 head中json字符串的长度</li><li>解析json字符串的内容</li><li>根据json中文件信息读取制定位置的文件内容</li></ul><h2 id="C-实现"><a href="#C-实现" class="headerlink" title="C++实现"></a>C++实现</h2><h3 id="读取header-size"><a href="#读取header-size" class="headerlink" title="读取header_size"></a>读取header_size</h3><pre class=" language-cpp"><code class="language-cpp">std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>byte<span class="token operator">></span> sizeBuf<span class="token punctuation">;</span>sizeBuf<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>FILE <span class="token operator">*</span> file <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token function">_wfopen_s</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>file<span class="token punctuation">,</span>asarPath<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> L<span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sizeBuf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//因为是小端序所有，先反转数组中的数据</span>std<span class="token operator">::</span><span class="token function">reverse</span><span class="token punctuation">(</span>sizeBuf<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sizeBuf<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>uint32_t t <span class="token operator">=</span> <span class="token function">deserialize1_uint32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sizeBuf<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="byte数组转uint32"><a href="#byte数组转uint32" class="headerlink" title="byte数组转uint32"></a>byte数组转uint32</h3><pre class=" language-cpp"><code class="language-cpp">uint32_t <span class="token function">deserialize1_uint32</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buffer<span class="token punctuation">)</span><span class="token punctuation">{</span>    uint32_t value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    value <span class="token operator">|</span><span class="token operator">=</span> buffer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">;</span>    value <span class="token operator">|</span><span class="token operator">=</span> buffer<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span>    value <span class="token operator">|</span><span class="token operator">=</span> buffer<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span>    value <span class="token operator">|</span><span class="token operator">=</span> buffer<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="根据headsize-读取head"><a href="#根据headsize-读取head" class="headerlink" title="根据headsize 读取head"></a>根据headsize 读取head</h3><pre class=" language-cpp"><code class="language-cpp">byte<span class="token operator">*</span> headbuf <span class="token operator">=</span> <span class="token keyword">new</span> byte<span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>headbuf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">rewind</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从开始位置偏移8位开始读取</span><span class="token function">fseek</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span>SEEK_SET<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fread</span><span class="token punctuation">(</span>headbuf<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token punctuation">,</span>length<span class="token punctuation">,</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="读取真实的json"><a href="#读取真实的json" class="headerlink" title="读取真实的json"></a>读取真实的json</h3><pre class=" language-cpp"><code class="language-cpp">std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>byte<span class="token operator">></span> headSizeBuf<span class="token punctuation">;</span>headSizeBuf<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>headSizeBuf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>headbuf<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//因为是小端序所有，先反转数组中的数据</span>std<span class="token operator">::</span><span class="token function">reverse</span><span class="token punctuation">(</span>headSizeBuf<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> headSizeBuf<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取真实的json串的长度</span>uint32_t readLength <span class="token operator">=</span> <span class="token function">deserialize1_uint32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>headSizeBuf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token operator">::</span>string headJson <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>headbuf<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> readLength<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="解析json"><a href="#解析json" class="headerlink" title="解析json"></a>解析json</h3><p>C++解析json有很多的开源库，如rapidjson、jsoncpp等，这里我们使用rapidjson 方便引入，只需要引入头文件即可</p><h3 id="遍历json-获取文件信息"><a href="#遍历json-获取文件信息" class="headerlink" title="遍历json 获取文件信息"></a>遍历json 获取文件信息</h3><pre class=" language-cpp"><code class="language-cpp">Document d<span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>headJson<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第一个文件的偏移位置，是头8个字节加上head的长度</span><span class="token function">writeJson</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> length<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">,</span>u8<span class="token string">"D:\\Test\\"</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span><span class="token string">"files"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">writeJson</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span> file<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span>std<span class="token operator">::</span>string dir<span class="token punctuation">,</span> rapidjson<span class="token operator">::</span>Value <span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> itr <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">MemberBegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        itr <span class="token operator">!=</span> d<span class="token punctuation">.</span><span class="token function">MemberEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>itr<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-------------------当前目录:"</span> <span class="token operator">&lt;&lt;</span> dir <span class="token operator">&lt;&lt;</span> <span class="token string">"---------------------------------"</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>        <span class="token function">createDirectory</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>        rapidjson<span class="token operator">::</span>Value <span class="token operator">&amp;</span>value <span class="token operator">=</span> itr<span class="token operator">-</span><span class="token operator">></span>value<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">HasMember</span><span class="token punctuation">(</span>u8<span class="token string">"files"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//如果是文件夹就递归处理</span>            std<span class="token operator">::</span>string strDir <span class="token operator">=</span> dir <span class="token operator">+</span> itr<span class="token operator">-</span><span class="token operator">></span>name<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            strDir <span class="token operator">=</span> strDir <span class="token operator">+</span> u8<span class="token string">"\\"</span><span class="token punctuation">;</span>            <span class="token function">writeJson</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> strDir<span class="token punctuation">,</span> value<span class="token punctuation">[</span><span class="token string">"files"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"key:"</span> <span class="token operator">&lt;&lt;</span> itr<span class="token operator">-</span><span class="token operator">></span>name<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>            size_t size<span class="token punctuation">,</span> of<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> itr<span class="token operator">-</span><span class="token operator">></span>value<span class="token punctuation">.</span><span class="token function">MemberBegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                it <span class="token operator">!=</span> itr<span class="token operator">-</span><span class="token operator">></span>value<span class="token punctuation">.</span><span class="token function">MemberEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//获取offset 偏移量</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>it<span class="token operator">-</span><span class="token operator">></span>value<span class="token punctuation">.</span><span class="token function">IsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"key:"</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-</span><span class="token operator">></span>name<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"   value:"</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-</span><span class="token operator">></span>value<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>                    of <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>it<span class="token operator">-</span><span class="token operator">></span>value<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//获取size 文件大小</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>it<span class="token operator">-</span><span class="token operator">></span>value<span class="token punctuation">.</span><span class="token function">IsInt64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"key:"</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-</span><span class="token operator">></span>name<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"   value:"</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-</span><span class="token operator">></span>value<span class="token punctuation">.</span><span class="token function">GetInt64</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>                    size <span class="token operator">=</span> it<span class="token operator">-</span><span class="token operator">></span>value<span class="token punctuation">.</span><span class="token function">GetInt64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>byte<span class="token operator">></span> sizeBuf<span class="token punctuation">;</span>            sizeBuf<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>            FILE <span class="token operator">*</span> wfile <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>            std<span class="token operator">::</span>wstring filepath <span class="token operator">=</span> <span class="token function">UTF8ToWide</span><span class="token punctuation">(</span>dir <span class="token operator">+</span> itr<span class="token operator">-</span><span class="token operator">></span>name<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">_wfopen_s</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wfile<span class="token punctuation">,</span> filepath<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> L<span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//从指定偏移位置读取数据</span>                <span class="token function">fseek</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> offset <span class="token operator">+</span> of<span class="token punctuation">,</span> SEEK_SET<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//读取制定的数据大小</span>                <span class="token function">fread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sizeBuf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token punctuation">,</span> size<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sizeBuf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token punctuation">,</span> size<span class="token punctuation">,</span> wfile<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">fclose</span><span class="token punctuation">(</span>wfile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>asar还是很容易解析，但是也要注意一些细节，不然容易掉坑，为什么要用C++去解析asar文件，其实也是electron项目中，方便C++去做一些处理，如C++去运行asar中的js文件，C++去读取asar中的图片文件或者配置文件等。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>inno setup 安装建立回滚机制</title>
      <link href="/inno-setup-an-zhuang-jian-li-hui-gun-ji-zhi.html"/>
      <url>/inno-setup-an-zhuang-jian-li-hui-gun-ji-zhi.html</url>
      
        <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>安装包在安装过程中可能因为环境或者其他特殊原因安装失败了，但是不能影响以前安装的旧版本，所以就需要建立回滚机制，当安装失败的时候自动复原到以前的版本</p><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><ul><li>在安装之前，拷贝安装目录下的文件到缓存目录，或者移动安装目录下的文件到缓存目录</li><li>安装完成之后判断，是否安装成功</li><li>如果安装成功<ul><li>删除缓存目录</li></ul></li><li>如果安装失败<ul><li>把安装目录下的文件删除，从缓存目录拷贝文件到安装目录下</li><li>删除缓存目录 </li></ul></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="定义全局变量"><a href="#定义全局变量" class="headerlink" title="定义全局变量"></a>定义全局变量</h3><pre><code>var    isInstallSuccess:boolean; //用于判断是否安装成功    tmpDir:String;       //缓存文件目录</code></pre><h3 id="移动目录"><a href="#移动目录" class="headerlink" title="移动目录"></a>移动目录</h3><p>首先封装一个移动文件夹的函数</p><pre><code>procedure DirectoryMove(SourcePath, DestPath: string);var  FindRec: TFindRec;  SourceFilePath: string;  DestFilePath: string;begin  if FindFirst(SourcePath + &#39;\*&#39;, FindRec) then  begin    try      repeat        if (FindRec.Name &lt;&gt; &#39;.&#39;) and (FindRec.Name &lt;&gt; &#39;..&#39;) then        begin          SourceFilePath := SourcePath + &#39;\&#39; + FindRec.Name;          DestFilePath := DestPath + &#39;\&#39; + FindRec.Name;          if FindRec.Attributes and FILE_ATTRIBUTE_DIRECTORY = 0 then          begin            if RenameFile(SourceFilePath, DestFilePath) then            begin              Log(Format(&#39;Copied %s to %s&#39;, [SourceFilePath, DestFilePath]));            end              else            begin              Log(Format(&#39;Failed to copy %s to %s&#39;, [SourceFilePath, DestFilePath]));            end;          end            else          begin            if DirExists(DestFilePath) or CreateDir(DestFilePath) then            begin              Log(Format(&#39;Created %s&#39;, [DestFilePath]));              DirectoryMove(SourceFilePath, DestFilePath);            end              else            begin              Log(Format(&#39;Failed to create %s&#39;, [DestFilePath]));            end;          end;        end;      until not FindNext(FindRec);    finally      FindClose(FindRec);    end;  end    else  begin    Log(Format(&#39;Failed to list %s&#39;, [SourcePath]));  end;end;</code></pre><pre><code>//拷贝现有工程目录下的文件到缓存目录function copyAppFile(strInstallPath:String):Boolean;begin  tmpDir := ExpandConstant(&#39;{tmp}\CloudHubXSetupBackup&#39;);  if DirExists(tmpDir)= true then  //如果文件夹存在那么先删除文件夹    DelTree(tmpDir, False, True, True) //删除他下面所有的文件以及目录但是保存本身的目录  else  //不存在那么先创建目录    CreateDir(tmpDir);  if DirExists(strInstallPath)= true then  //存在才拷贝     DirectoryMove(strInstallPath,tmpDir);end;</code></pre><h3 id="回滚文件"><a href="#回滚文件" class="headerlink" title="回滚文件"></a>回滚文件</h3><pre><code>function rollBackFile(strInstallPath:String):Boolean;begin  if DirExists(tmpDir)= true then  //存在才移动     DirectoryMove(tmpDir,strInstallPath);end;</code></pre><h3 id="删除临时目录"><a href="#删除临时目录" class="headerlink" title="删除临时目录"></a>删除临时目录</h3><pre><code>function delRollBakcFileDir():Boolean;begin  if DirExists(tmpDir)= true then  //存在才删除     DelTree(tmpDir, True, True, True);  end;</code></pre><h3 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h3><pre><code>procedure CurStepChanged (CurStep: TSetupStep );begin    if(CurStep = ssDone ) then //最后安装程序退出之前    begin        if(isInstallSuccess = false) then  //如果异常退出那么还原文件        begin          MsgBox(&#39;{#MyAppNameZh}更新包异常退出&#39;, mbInformation, MB_OK);          //回滚文件          rollBackFile(oldinstallpath);        end;        //删除tmp文件夹内的文件        delRollBakcFileDir();    end    else if(CurStep = ssPostInstall  ) then //实际安装完成之后    begin        isInstallSuccess := true;    end    else if(CurStep=ssInstall) then //开始执行安装之前    begin        //执行文件备份        copyAppFile(oldinstallpath);    end;end;</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这里安装目录下没有对某些特殊的文件做屏蔽处理，根据需求可以做某些文件不放入回滚机制中，<br>使用移动文件的方式可以有效的减少innosetup安装过程中出现的文件被占用问题</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚本 </tag>
            
            <tag> innosetup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>inno setup 拷贝文件夹 移动文件夹 </title>
      <link href="/inno-setup-kao-bei-wen-jian-jia-yi-dong-wen-jian-jia.html"/>
      <url>/inno-setup-kao-bei-wen-jian-jia-yi-dong-wen-jian-jia.html</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>用代码实现文件夹的递归拷贝和移动</p><h2 id="拷贝文件夹"><a href="#拷贝文件夹" class="headerlink" title="拷贝文件夹"></a>拷贝文件夹</h2><pre class=" language-iss"><code class="language-iss">procedure DirectoryCopy(SourcePath, DestPath: string);var  FindRec: TFindRec;  SourceFilePath: string;  DestFilePath: string;begin  if FindFirst(SourcePath + '\*', FindRec) then  begin    try      repeat        if (FindRec.Name <> '.') and (FindRec.Name <> '..') then        begin          SourceFilePath := SourcePath + '\' + FindRec.Name;          DestFilePath := DestPath + '\' + FindRec.Name;          if FindRec.Attributes and FILE_ATTRIBUTE_DIRECTORY = 0 then          begin            if FileCopy(SourceFilePath, DestFilePath,false) then            begin              Log(Format('Copied %s to %s', [SourceFilePath, DestFilePath]));            end              else            begin              Log(Format('Failed to copy %s to %s', [SourceFilePath, DestFilePath]));            end;          end            else          begin            if DirExists(DestFilePath) or CreateDir(DestFilePath) then            begin              Log(Format('Created %s', [DestFilePath]));              DirectoryCopy(SourceFilePath, DestFilePath);            end              else            begin              Log(Format('Failed to create %s', [DestFilePath]));            end;          end;        end;      until not FindNext(FindRec);    finally      FindClose(FindRec);    end;  end    else  begin    Log(Format('Failed to list %s', [SourcePath]));  end;end;</code></pre><h2 id="移动文件夹"><a href="#移动文件夹" class="headerlink" title="移动文件夹"></a>移动文件夹</h2><pre class=" language-iss"><code class="language-iss">procedure DirectoryMove(SourcePath, DestPath: string);var  FindRec: TFindRec;  SourceFilePath: string;  DestFilePath: string;begin  if FindFirst(SourcePath + '\*', FindRec) then  begin    try      repeat        if (FindRec.Name <> '.') and (FindRec.Name <> '..') then        begin          SourceFilePath := SourcePath + '\' + FindRec.Name;          DestFilePath := DestPath + '\' + FindRec.Name;          if FindRec.Attributes and FILE_ATTRIBUTE_DIRECTORY = 0 then          begin            if RenameFile(SourceFilePath, DestFilePath) then            begin              Log(Format('Copied %s to %s', [SourceFilePath, DestFilePath]));            end              else            begin              Log(Format('Failed to copy %s to %s', [SourceFilePath, DestFilePath]));            end;          end            else          begin            if DirExists(DestFilePath) or CreateDir(DestFilePath) then            begin              Log(Format('Created %s', [DestFilePath]));              DirectoryMove(SourceFilePath, DestFilePath);            end              else            begin              Log(Format('Failed to create %s', [DestFilePath]));            end;          end;        end;      until not FindNext(FindRec);    finally      FindClose(FindRec);    end;  end    else  begin    Log(Format('Failed to list %s', [SourcePath]));  end;end;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚本 </tag>
            
            <tag> innosetup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 获取 word、excel中拷贝的图片</title>
      <link href="/c-kao-bei-word-excel-zhong-de-tu-pian.html"/>
      <url>/c-kao-bei-word-excel-zhong-de-tu-pian.html</url>
      
        <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>C++ 从剪贴板中获取在 word、excel中拷贝图片，然后再其他软件中显示该图片,一般bitmap,jpeg,png 是我们常用的渲染格式。所以获取的图片肯能需要转换成常用的格式才能显示</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>在 word中拷贝图片，在剪贴板中可能存在几种格式如下</p><h4 id="CF-DIB-CF-BITMAP"><a href="#CF-DIB-CF-BITMAP" class="headerlink" title="CF_DIB,CF_BITMAP"></a>CF_DIB,CF_BITMAP</h4><p>在docx文件中拷贝一张图可能是这种格式</p><p>CF_DIB,CF_BITMAP 这类型的图片获取最简单</p><p>::GetClipboardData(format) 获取对应的bmp图片就可以了。</p><h4 id="HTML-Format"><a href="#HTML-Format" class="headerlink" title="HTML Format"></a>HTML Format</h4><p>在doc文件拷贝多张图是这种格式</p><p>我们看一个样例中的html 数据:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span>MsoNormal</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>554<span class="token punctuation">"</span></span>  <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>268<span class="token punctuation">"</span></span>  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file:///C:\Users\28748\AppData\Local\Temp\ksohtml23516\wps26.png<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mso-spacerun:<span class="token punctuation">'</span>yes<span class="token punctuation">'</span>;font-family:等线;font-size:10.5000pt;mso-font-kerning:1.0000pt;<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">o:</span>p</span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">o:</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span>MsoNormal</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>position:absolute;z-index:1;margin-left:0.0000px;margin-top:0.0000px;width:32.0000px;height:32.0000px;<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>32<span class="token punctuation">"</span></span>  <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>32<span class="token punctuation">"</span></span>  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file:///C:\Users\28748\AppData\Local\Temp\ksohtml23516\wps27.png<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mso-spacerun:<span class="token punctuation">'</span>yes<span class="token punctuation">'</span>;font-family:等线;font-size:10.5000pt;mso-font-kerning:1.0000pt;<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">o:</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">o:</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span>MsoNormal</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mso-spacerun:<span class="token punctuation">'</span>yes<span class="token punctuation">'</span>;font-family:等线;font-size:10.5000pt;mso-font-kerning:1.0000pt;<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">o:</span>p</span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">o:</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span>MsoNormal</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mso-spacerun:<span class="token punctuation">'</span>yes<span class="token punctuation">'</span>;font-family:等线;font-size:10.5000pt;mso-font-kerning:1.0000pt;<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">o:</span>p</span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">o:</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span>MsoNormal</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mso-spacerun:<span class="token punctuation">'</span>yes<span class="token punctuation">'</span>;font-family:等线;font-size:10.5000pt;mso-font-kerning:1.0000pt;<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">o:</span>p</span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">o:</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span>MsoNormal</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mso-spacerun:<span class="token punctuation">'</span>yes<span class="token punctuation">'</span>;font-family:等线;font-size:10.5000pt;mso-font-kerning:1.0000pt;<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">o:</span>p</span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">o:</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span>MsoNormal</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mso-spacerun:<span class="token punctuation">'</span>yes<span class="token punctuation">'</span>;font-family:等线;font-size:10.5000pt;mso-font-kerning:1.0000pt;<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">o:</span>p</span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">o:</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span>MsoNormal</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>555<span class="token punctuation">"</span></span>  <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>341<span class="token punctuation">"</span></span>  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file:///C:\Users\28748\AppData\Local\Temp\ksohtml23516\wps28.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mso-spacerun:<span class="token punctuation">'</span>yes<span class="token punctuation">'</span>;font-family:等线;font-size:10.5000pt;mso-font-kerning:1.0000pt;<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">o:</span>p</span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">o:</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span>MsoNormal</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>554<span class="token punctuation">"</span></span>  <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>310<span class="token punctuation">"</span></span>  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file:///C:\Users\28748\AppData\Local\Temp\ksohtml23516\wps29.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mso-spacerun:<span class="token punctuation">'</span>yes<span class="token punctuation">'</span>;font-family:等线;font-size:10.5000pt;mso-font-kerning:1.0000pt;<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">o:</span>p</span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">o:</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span>MsoNormal</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>554<span class="token punctuation">"</span></span>  <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>173<span class="token punctuation">"</span></span>  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file:///C:\Users\28748\AppData\Local\Temp\ksohtml23516\wps30.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mso-spacerun:<span class="token punctuation">'</span>yes<span class="token punctuation">'</span>;font-family:等线;font-size:10.5000pt;mso-font-kerning:1.0000pt;<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">o:</span>p</span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">o:</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span>MsoNormal</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>555<span class="token punctuation">"</span></span>  <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>305<span class="token punctuation">"</span></span>  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file:///C:\Users\28748\AppData\Local\Temp\ksohtml23516\wps31.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mso-spacerun:<span class="token punctuation">'</span>yes<span class="token punctuation">'</span>;font-family:等线;font-size:10.5000pt;mso-font-kerning:1.0000pt;<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">o:</span>p</span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">o:</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>发现都是标签的形式，然后图片就是以本地文件路径放在标签src地址上，我们扫描信息获取标签可以获取图片地址，从而在其他软件中加载显示即可</p><h4 id="CF-ENHMETAFILE"><a href="#CF-ENHMETAFILE" class="headerlink" title="CF_ENHMETAFILE"></a>CF_ENHMETAFILE</h4><p>在doc文件拷贝一张图可能是这种格式,Metafile 分为普通图元文件和增强型图元文件两种，扩展名分别为.wmf和.emf。图元文件将图形定义为编码的线段和图形，也称作“绘图类型”的图形。<br>我们看一下 metafile 的说明</p><blockquote><p>Metafile和位图的关系，就像点阵图和位元映射图形(矢量图形)的关系一样。点阵图通常来自实际的图像，而metafile则大多是通过电脑程式人为建立的。点阵是通过记录像素点的位置描绘图形，而矢量图形是通过数学公式即时演算画出的图形。Metafile由一系列与图形函式呼叫相同的二进位记录组成，这些记录一般用于绘制直线、曲线、填入的区域和文字等。</p></blockquote><p>这篇文章目的就是获取这种格式的图片并且转换为其他格式</p><h2 id="获取剪贴板中-CF-ENHMETAFILE-即-metafile-图片"><a href="#获取剪贴板中-CF-ENHMETAFILE-即-metafile-图片" class="headerlink" title="获取剪贴板中 CF_ENHMETAFILE 即 metafile 图片"></a>获取剪贴板中 CF_ENHMETAFILE 即 metafile 图片</h2><p>直接上代码</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//打开剪贴板</span><span class="token operator">::</span><span class="token function">OpenClipboard</span><span class="token punctuation">(</span><span class="token function">GetDesktopWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">::</span><span class="token function">IsClipboardFormatAvailable</span><span class="token punctuation">(</span>CF_ENHMETAFILE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取CF_ENHMETAFILE 格式图片</span>    HENHMETAFILE hemf <span class="token operator">=</span> <span class="token punctuation">(</span>HENHMETAFILE<span class="token punctuation">)</span><span class="token operator">::</span><span class="token function">GetClipboardData</span><span class="token punctuation">(</span>CF_ENHMETAFILE<span class="token punctuation">)</span><span class="token punctuation">;</span>    HENHMETAFILE  hMetaFile<span class="token operator">=</span><span class="token function">CopyEnhMetaFile</span><span class="token punctuation">(</span>hemf<span class="token punctuation">,</span> <span class="token string">"c:\\test.emf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//保存到文件</span>    <span class="token comment" spellcheck="true">//关闭CMetafileDC并获得它的句柄</span>    <span class="token function">DeleteEnhMetaFile</span><span class="token punctuation">(</span>hMetaFile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">::</span><span class="token function">CloseClipboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="绘制-metafile-图片"><a href="#绘制-metafile-图片" class="headerlink" title="绘制 metafile 图片"></a>绘制 metafile 图片</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//打开剪贴板</span><span class="token operator">::</span><span class="token function">OpenClipboard</span><span class="token punctuation">(</span><span class="token function">GetDesktopWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">::</span><span class="token function">IsClipboardFormatAvailable</span><span class="token punctuation">(</span>CF_ENHMETAFILE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取CF_ENHMETAFILE 格式图片</span>    HENHMETAFILE hemf <span class="token operator">=</span> <span class="token punctuation">(</span>HENHMETAFILE<span class="token punctuation">)</span><span class="token operator">::</span><span class="token function">GetClipboardData</span><span class="token punctuation">(</span>CF_ENHMETAFILE<span class="token punctuation">)</span><span class="token punctuation">;</span>    HDC dc <span class="token operator">=</span> <span class="token operator">::</span><span class="token function">GetDC</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PlayEnhMetaFile</span><span class="token punctuation">(</span>memDC<span class="token punctuation">,</span> hemf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//绘制函数</span><span class="token punctuation">}</span><span class="token operator">::</span><span class="token function">CloseClipboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="读取-metafile-图片"><a href="#读取-metafile-图片" class="headerlink" title="读取 metafile 图片"></a>读取 metafile 图片</h2><pre class=" language-cpp"><code class="language-cpp">HENHMETAFILE hemf<span class="token punctuation">;</span> hemf <span class="token operator">=</span> <span class="token function">GetEnhMetaFile</span><span class="token punctuation">(</span><span class="token string">"c:\\test.emf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ENHMETAHEADER   emh<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Get the header from the enhanced metafile.   </span><span class="token function">ZeroMemory</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>emh<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ENHMETAHEADER<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   emh<span class="token punctuation">.</span>nSize <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ENHMETAHEADER<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">GetEnhMetaFileHeader</span><span class="token punctuation">(</span> hemf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span> ENHMETAHEADER <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>emh <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span>   <span class="token punctuation">{</span>       <span class="token function">DeleteEnhMetaFile</span><span class="token punctuation">(</span> hemf <span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><p>metafile 文件的头结构体如下 </p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> tagENHMETAHEADER <span class="token punctuation">{</span>  DWORD iType<span class="token punctuation">;</span>  DWORD nSize<span class="token punctuation">;</span>  RECTL rclBounds<span class="token punctuation">;</span>  RECTL rclFrame<span class="token punctuation">;</span>  DWORD dSignature<span class="token punctuation">;</span>  DWORD nVersion<span class="token punctuation">;</span>  DWORD nBytes<span class="token punctuation">;</span>  DWORD nRecords<span class="token punctuation">;</span>  WORD  nHandles<span class="token punctuation">;</span>  WORD  sReserved<span class="token punctuation">;</span>  DWORD nDescription<span class="token punctuation">;</span>  DWORD offDescription<span class="token punctuation">;</span>  DWORD nPalEntries<span class="token punctuation">;</span>  SIZEL szlDevice<span class="token punctuation">;</span>  SIZEL szlMillimeters<span class="token punctuation">;</span>  DWORD cbPixelFormat<span class="token punctuation">;</span>  DWORD offPixelFormat<span class="token punctuation">;</span>  DWORD bOpenGL<span class="token punctuation">;</span>  SIZEL szlMicrometers<span class="token punctuation">;</span><span class="token punctuation">}</span> ENHMETAHEADER<span class="token punctuation">,</span> <span class="token operator">*</span>PENHMETAHEADER<span class="token punctuation">,</span> <span class="token operator">*</span>LPENHMETAHEADER<span class="token punctuation">;</span></code></pre><p>具体每个元素的具体含义可以参考 <a href="https://docs.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-tagenhmetaheader" target="_blank" rel="noopener">MSDN</a> </p><p>我们需要用到的是 rclFrame 这个参数获取图片的大小</p><h2 id="metafile-转-bitmap"><a href="#metafile-转-bitmap" class="headerlink" title="metafile 转 bitmap"></a>metafile 转 bitmap</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token operator">::</span><span class="token function">OpenClipboard</span><span class="token punctuation">(</span><span class="token function">GetDesktopWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">::</span><span class="token function">IsClipboardFormatAvailable</span><span class="token punctuation">(</span>CF_ENHMETAFILE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    HENHMETAFILE hemf <span class="token operator">=</span> <span class="token punctuation">(</span>HENHMETAFILE<span class="token punctuation">)</span><span class="token operator">::</span><span class="token function">GetClipboardData</span><span class="token punctuation">(</span>CF_ENHMETAFILE<span class="token punctuation">)</span><span class="token punctuation">;</span>    HBITMAP     bitmap<span class="token punctuation">;</span>    ENHMETAHEADER head<span class="token punctuation">;</span>    HDC         memDC<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>head<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ENHMETAHEADER<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    head<span class="token punctuation">.</span>nSize <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ENHMETAHEADER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">GetEnhMetaFileHeader</span><span class="token punctuation">(</span>hemf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ENHMETAHEADER<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    HDC dc <span class="token operator">=</span> <span class="token operator">::</span><span class="token function">GetDC</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    RECT    rect<span class="token punctuation">;</span>    rect<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    rect<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    rect<span class="token punctuation">.</span>right <span class="token operator">=</span> head<span class="token punctuation">.</span>rclFrame<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    rect<span class="token punctuation">.</span>bottom <span class="token operator">=</span> head<span class="token punctuation">.</span>rclFrame<span class="token punctuation">.</span>bottom<span class="token punctuation">;</span>    memDC <span class="token operator">=</span> <span class="token operator">::</span><span class="token function">CreateCompatibleDC</span><span class="token punctuation">(</span>dc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Create a bitmap compatible to Window DC   </span>    bitmap <span class="token operator">=</span> <span class="token operator">::</span><span class="token function">CreateCompatibleBitmap</span><span class="token punctuation">(</span>dc<span class="token punctuation">,</span> lWidth<span class="token punctuation">,</span> lHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">::</span><span class="token function">SelectObject</span><span class="token punctuation">(</span>memDC<span class="token punctuation">,</span> bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这里用白色的画刷，word中的透明图片会显示黑色</span>    <span class="token function">SetBackColorToWhite</span><span class="token punctuation">(</span>memDC<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//把metafile 图片绘制到bitmap 上,绘制完成之后 bitmap就是我们需要的</span>    <span class="token function">PlayEnhMetaFile</span><span class="token punctuation">(</span>memDC<span class="token punctuation">,</span> hemf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="bitmap-转-png-buffer"><a href="#bitmap-转-png-buffer" class="headerlink" title="bitmap 转 png buffer"></a>bitmap 转 png buffer</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">save_png_memory</span><span class="token punctuation">(</span>HBITMAP hbitmap<span class="token punctuation">,</span> std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>BYTE<span class="token operator">></span> <span class="token operator">&amp;</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    Gdiplus<span class="token operator">::</span>Bitmap <span class="token function">bmp</span><span class="token punctuation">(</span>hbitmap<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//write to IStream</span>    IStream<span class="token operator">*</span> istream <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token function">CreateStreamOnHGlobal</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> TRUE<span class="token punctuation">,</span> <span class="token operator">&amp;</span>istream<span class="token punctuation">)</span><span class="token punctuation">;</span>    CLSID clsid_png<span class="token punctuation">;</span>    <span class="token function">CLSIDFromString</span><span class="token punctuation">(</span>L<span class="token string">"{557cf406-1a04-11d3-9a73-0000f81ef32e}"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>clsid_png<span class="token punctuation">)</span><span class="token punctuation">;</span>    Gdiplus<span class="token operator">::</span>Status status <span class="token operator">=</span> bmp<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span>istream<span class="token punctuation">,</span> <span class="token operator">&amp;</span>clsid_png<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> Gdiplus<span class="token operator">::</span>Status<span class="token operator">::</span>Ok<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//get memory handle associated with istream</span>    HGLOBAL hg <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">GetHGlobalFromStream</span><span class="token punctuation">(</span>istream<span class="token punctuation">,</span> <span class="token operator">&amp;</span>hg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//copy IStream to buffer</span>    <span class="token keyword">int</span> bufsize <span class="token operator">=</span> <span class="token function">GlobalSize</span><span class="token punctuation">(</span>hg<span class="token punctuation">)</span><span class="token punctuation">;</span>    data<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>bufsize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//lock &amp; unlock memory</span>    LPVOID pimage <span class="token operator">=</span> <span class="token function">GlobalLock</span><span class="token punctuation">(</span>hg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pimage<span class="token punctuation">,</span> bufsize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">GlobalUnlock</span><span class="token punctuation">(</span>hg<span class="token punctuation">)</span><span class="token punctuation">;</span>    istream<span class="token operator">-</span><span class="token operator">></span><span class="token function">Release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>调用代码</p><pre class=" language-cpp"><code class="language-cpp">std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>BYTE<span class="token operator">></span> data<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">save_png_memory</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//write from memory to file for testing:</span>    std<span class="token operator">::</span>ofstream <span class="token function">fout</span><span class="token punctuation">(</span><span class="token string">"test.png"</span><span class="token punctuation">,</span> std<span class="token operator">::</span>ios<span class="token operator">::</span>binary<span class="token punctuation">)</span><span class="token punctuation">;</span>    fout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fout<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>把上面的功能串起来之后 metafile 文件可以直接在内存中转化为bitmap，也可以转换成png、jpeg等需要的格式，不需要先保存到本地，减少io</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《深阅读:信息爆炸时代我们如何读书》-（日）斋藤孝</title>
      <link href="/shen-yue-du-xin-xi-bao-zha-shi-dai-wo-men-ru-he-du-shu.html"/>
      <url>/shen-yue-du-xin-xi-bao-zha-shi-dai-wo-men-ru-he-du-shu.html</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://i.loli.net/2019/07/01/5d19d60c3065327461.jpg" alt="深阅读:信息爆炸时代我们如何读书"></h2><h2 id="关于本书"><a href="#关于本书" class="headerlink" title="关于本书"></a>关于本书</h2><p>作者开篇就强调我们需要读书的重要性，读书能获得安静，自处，见识和成长等，读书这个技能需要不断的锻炼和练习的，如何快速读书，如何快速消化，如何快速应用，皆是自我阅读一定量之后形成一套自己的方法，也能自己去识别哪些是好书，那些书可以快速阅读，跳读，哪些书需要我们不断的重复读，这些别人告诉你没用，只有自己体会和体验到了才有用。</p><p>本书重点在于告诉我们为什么要读书，读书的好处，要坚持不断读书，然后就是一些读书方法，阅读书本之后你会感觉好像讲的方法好像也就是那些技巧，其阅读方法具体说的也是我们经常在其他书籍上看到的方法，其实你会发现很多关于读书方法的书籍介绍的技巧基本都类似，其实读书关键是自己去读，自己有体验，有学到才是有效的，所以寻找阅读方法去试验，然后找到适合自己的方法不断改进和优化。</p><p>读书是一项需要培养习惯，习惯之后你就会轻松坚持，我也是最两个月才开始坚持读书，读了几本关于习惯的书籍之后发现，习惯养成都是基本的固定核心套路，暗示-&gt;行动-&gt;奖赏。不断重复循环直到成为习惯，针对不同的习惯做不同拆解即可，读书也是一样，至于读书水平的提高就需要我们自己在养成习惯之后刻意练习养成自己的读书套路习惯，读书我要一直坚持下去不断优化自己的方法。</p><p>读书最重要的是内化和应用，当然消遣类型的书就列外了，如果是立马应用实际来解决问题的话，我们的内化效率会高很多，但是很多时候是不是那么及时的能实际实际的，所以我们需要主动去输出，批判试去读书，不同角度思考作者表达的观点，然后吸取我们需要的知识。所以决定以后每读一本书都好好写下自己的读书笔记、写博客，当成是一次重要的输出，不管写的怎么样，先养成这个好习惯，然后再慢慢优化。先写给自己，记录自己的体验，再慢慢提升写给没读这本书的人，简单介绍清楚这本书具体讲了些什么内容，好的观点和有待商榷的观点。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>就像作者标题引入的信息爆炸时代，在这个时代阅读包含了很多，想要自我成长那就不能随便定义和浪费自己的阅读时间，一直阅读新闻，娱乐，自媒体的文章，会发现真正的书籍越来越读不进去了，习惯了碎片式阅读很难去消化和掌握这些信息，形成一套自己的知识体系。所以需要静下心来好好读书，读一些“好书”才能帮助自己成长。</p><hr><p><strong>所有图片均来自网络</strong></p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 学习力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《谁说你不能坚持》--程龙 编著</title>
      <link href="/shui-bu-ke-yi-jian-chi.html"/>
      <url>/shui-bu-ke-yi-jian-chi.html</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://i.loli.net/2019/06/28/5d15ec0c80e8b36748.jpg" alt="《谁说你不能坚持》"></h2><p>很不错的一本书，对于我来说一口气读完了，谁说你不能坚持？只是没有行动没有找到方法，说到底是行动的问题，常常不敢迈出舒适区，永远在舒适区里面就形成了恶性循环。越来越觉得自身存在很多毛病和问题，不去行动存在头脑中的悬而未决的事情就变成了焦虑，变成了压力，最终导致越来越拖延。</p><h2 id="GALA循环"><a href="#GALA循环" class="headerlink" title="GALA循环"></a>GALA循环</h2><p>作者提出 GALA循环即： 目标Goal-行动Action-热爱Love-调整Adjustment<br>可以说是PDCA循环工作法的变体个人成长应用</p><h3 id="目标："><a href="#目标：" class="headerlink" title="目标："></a>目标：</h3><p>都说没有目标的经验和体验都是无效的体验，没有目标的生活千篇一律都是白活了。可是有时候现实生活就是那么残酷的把你的棱角都磨光了，波澜不惊的生活也越来越让自己没有灵魂的活着，以前的梦想和理想渐渐离我们远去了 ，感觉自己一腔热血都快息灭了似的。但是很多时候我们自然而然的想要进化自己，想要改变让自己变得更好，人就是有那么多的执念与欲望，让你夜不能寐。想要让自己的生活更上一层楼，所以有时候我们立下很多flag 定下很多目标。但是这些都是有感而发，没有真正思考过的目标，这些目标重要吗？给你带来什么价值？有没有详细的规划？有没有详细的进度？好像没有想那么多， 所以变成了找不到目标，变成了三分钟热度。不管是想改变自身也好，为了心中的理想也好，先定个小目标让自己去追寻，让自己行走在路上</p><h3 id="行动-分为两部分，第一步和后续步骤"><a href="#行动-分为两部分，第一步和后续步骤" class="headerlink" title="行动:分为两部分，第一步和后续步骤"></a>行动:分为两部分，第一步和后续步骤</h3><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>迈开第一步就成功一半了，所以需要勇敢需要激情，需要直面痛苦，但是痛苦才能让我们成长，没有痛苦的过程我们很难快速成长，事情想那么多，那么纠结，计划那么多，想要完美的开始反而最终然并卵。一切回到从前，我个人有无数次这种体验，例如我以前一直计划自己早起运动，然后看了一些运动的书籍，然并卵，早起都越来越成困难户了，直到看过一本《微习惯》之后开始想着先迈出一个小步，每天晚上出去先散步，不跑步，早上比以前早起二十分钟。反而这些慢慢坚持下来了。所以想要做什么不要犹豫，just do it 不管步子多大，先试试看。</p><h4 id="后续步骤"><a href="#后续步骤" class="headerlink" title="后续步骤"></a>后续步骤</h4><p>很长一段时间以来有时候看完一本书或者一部电影深受触动，于是发誓立下无数flag，坚持了几天都无疾而终了，后面在养成坚持阅读这个习惯的时候，我给自己设定就是只养成这个习惯，其他自己觉得很好的习惯先不管和以前一样，每天阅读半个小时，经过两个月之后发现现在自然而然的想要去阅读一些书籍了，有时候一天忙的没时间，没有阅读，都感觉不自在了，感觉有个什么事情没有处理。这个时候突然发现我有这个习惯了，而且好像不想以前一样需要耗费很大的意志力才能去完成这个任务了。希望自己继续坚持下去，成为终身习惯，做一个终身学习者</p><h3 id="热爱："><a href="#热爱：" class="headerlink" title="热爱："></a>热爱：</h3><p>很多时候迷茫找不到自己的兴趣和特长，我现在也是，虽然有一些在别人看来厉害的地方但是我自己感觉啥都不是，都拿不出手，就像作者所说很多人都不知道，只是做着做着收到很多的正反馈，越发对这个事情上积极进取，越发努力形成了正向循环，慢慢的就精通，慢慢的开始热爱了。因为很多事情当你一窍不通的时候，你很难说要喜欢和热爱坚持下去的。就像作者总结的, 从不爱到热爱，是有方法的。这个方法我称为“二社四感”，即：社交、社群、参与感、责任感、成就感、愉悦感。在行动过程中找到自己的位置，找到自己的参与感和一群志同道合的朋友一起行动，形成正向循环，你会不自觉的开始热爱和坚持他。</p><h3 id="调整"><a href="#调整" class="headerlink" title="调整:"></a>调整:</h3><p>当我们坚持行动一段时间之后，我们会慢慢发现我们行动过程中的问题，或者没有出现期望的效果，我们需要对自身的行动和计划进行调整和改进。不过在调整之前前面的步骤得先执行你才会有体验和知道要调整前进的方向。在调整时我们需要收集反馈信息，客观全面分析自身问题，我们需要把自己的思想从身体里面拉出来看待自己这个机器运行过程中出现的问题，来调整和改进。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>成功乃是成功之母，越是成功的人越是有气场越是有资源人脉，造就越来越成功。在自身进化过程中也是，越是养成越多的好习惯越会让自己养成更多的习惯，越是强大，前进的步伐越是有力。去行动去体验才是一切基础。</p><hr><p><strong>所有图片均来自网络</strong></p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 行动力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++ 实现 事件监听通知中心</title>
      <link href="/c-jian-ting-tong-zhi-zhong-xin-shi-xian.html"/>
      <url>/c-jian-ting-tong-zhi-zhong-xin-shi-xian.html</url>
      
        <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>监听通知具体实现内容：当一个发送一个通知之后，所有监听这个事件的接口都收到通知执行某个任务<br>这里我使用libuv实现多线程执行任务，可以使用线程池替换实现，也可以使用单线程看具体使用场景</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;mutex></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;tuple></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"uv.h"</span></span><span class="token keyword">class</span> <span class="token class-name">Notify</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> Notify<span class="token operator">&amp;</span> <span class="token function">Instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">///使用懒汉模式单利</span>        <span class="token keyword">static</span> Notify theSingleton<span class="token punctuation">;</span>        <span class="token keyword">return</span> theSingleton<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//注册监听事件和函数，当有通知时会自动执行注册的函数</span>    <span class="token comment" spellcheck="true">//函数这里用智能指针防止注册的函数销毁了，没办法感知</span>    <span class="token comment" spellcheck="true">//obj指针为拥有注册函数的对象指针</span>    <span class="token keyword">void</span> <span class="token function">Register</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string strFuncName<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> obj<span class="token punctuation">,</span>std<span class="token operator">::</span>shared_ptr<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span> spfunc<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        std<span class="token operator">::</span>lock_guard<span class="token operator">&lt;</span>std<span class="token operator">::</span>mutex<span class="token operator">></span> <span class="token function">lk</span><span class="token punctuation">(</span>map_mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> it_find <span class="token operator">=</span> func_map_<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>strFuncName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>it_find <span class="token operator">==</span> func_map_<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>tuple<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">,</span> std<span class="token operator">::</span>shared_ptr<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">>></span><span class="token operator">></span> vct<span class="token punctuation">;</span>            <span class="token keyword">auto</span> tp <span class="token operator">=</span> std<span class="token operator">::</span>tuple<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">,</span> std<span class="token operator">::</span>shared_ptr<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">>></span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> spfunc<span class="token punctuation">)</span><span class="token punctuation">;</span>            vct<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tp<span class="token punctuation">)</span><span class="token punctuation">;</span>            func_map_<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>strFuncName<span class="token punctuation">,</span> vct<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">auto</span> vct <span class="token operator">=</span> func_map_<span class="token punctuation">[</span>strFuncName<span class="token punctuation">]</span><span class="token punctuation">;</span>                                <span class="token keyword">auto</span> tp <span class="token operator">=</span> std<span class="token operator">::</span>tuple<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">,</span> std<span class="token operator">::</span>shared_ptr<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">>></span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> spfunc<span class="token punctuation">)</span><span class="token punctuation">;</span>            vct<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tp<span class="token punctuation">)</span><span class="token punctuation">;</span>            func_map_<span class="token punctuation">[</span>strFuncName<span class="token punctuation">]</span> <span class="token operator">=</span> vct<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//取消监听</span>    <span class="token comment" spellcheck="true">//obj指针为拥有注册函数的对象指针</span>    <span class="token keyword">void</span> <span class="token function">UnRegister</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> obj<span class="token punctuation">,</span>std<span class="token operator">::</span>string strFuncName<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        std<span class="token operator">::</span>lock_guard<span class="token operator">&lt;</span>std<span class="token operator">::</span>mutex<span class="token operator">></span> <span class="token function">lk</span><span class="token punctuation">(</span>map_mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> it_find <span class="token operator">=</span> func_map_<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>strFuncName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>it_find <span class="token operator">!=</span> func_map_<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">auto</span> vct <span class="token operator">=</span> func_map_<span class="token punctuation">[</span>strFuncName<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> vct<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">!=</span> vct<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">void</span><span class="token operator">*</span> p <span class="token operator">=</span> std<span class="token operator">::</span>get<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> obj<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    vct<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span>                    func_map_<span class="token punctuation">[</span>strFuncName<span class="token punctuation">]</span> <span class="token operator">=</span> vct<span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//执行通知函数，然后多线程去执行注册该事件的函数</span>    <span class="token comment" spellcheck="true">//这里用可变参数模板，因为这个要传递的参数个数是不确定的</span>    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span>    <span class="token keyword">void</span> <span class="token function">ExcecuteNotify</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string funcName<span class="token punctuation">,</span> Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        std<span class="token operator">::</span>lock_guard<span class="token operator">&lt;</span>std<span class="token operator">::</span>mutex<span class="token operator">></span> <span class="token function">lk</span><span class="token punctuation">(</span>map_mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> it_find <span class="token operator">=</span> func_map_<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>funcName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>it_find <span class="token operator">!=</span> func_map_<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">auto</span> vct <span class="token operator">=</span> func_map_<span class="token punctuation">[</span>funcName<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> vct<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> vct<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">auto</span> p <span class="token operator">=</span> std<span class="token operator">::</span>get<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    std<span class="token operator">::</span>shared_ptr<span class="token operator">&lt;</span>T<span class="token operator">></span> sp <span class="token operator">=</span> std<span class="token operator">::</span>static_pointer_cast<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">auto</span> pFunc <span class="token operator">=</span> sp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>pFunc <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//判断参数个数，跟进参数个数执行不同处理</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                        <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">//</span>                            <span class="token keyword">auto</span> func <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token operator">*</span>pFunc<span class="token punctuation">,</span> std<span class="token operator">::</span>forward<span class="token operator">&lt;</span>Args<span class="token operator">></span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            uv_work_t <span class="token operator">*</span> req <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">uv_work_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            req<span class="token operator">-</span><span class="token operator">></span>data <span class="token operator">=</span> <span class="token operator">&amp;</span>func<span class="token punctuation">;</span>                            <span class="token function">uv_queue_work</span><span class="token punctuation">(</span><span class="token function">uv_default_loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> req<span class="token punctuation">,</span> UvWorkCallBack<span class="token punctuation">,</span> UvAfterWorkCallBack<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">else</span> <span class="token punctuation">{</span>                            uv_work_t <span class="token operator">*</span> req <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">uv_work_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            req<span class="token operator">-</span><span class="token operator">></span>data <span class="token operator">=</span> pFunc<span class="token punctuation">;</span>                            <span class="token function">uv_queue_work</span><span class="token punctuation">(</span><span class="token function">uv_default_loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> req<span class="token punctuation">,</span> UvWorkCallBack<span class="token punctuation">,</span> UvAfterWorkCallBack<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//释放所有注册函数</span>    <span class="token keyword">void</span> <span class="token function">Release</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        std<span class="token operator">::</span>lock_guard<span class="token operator">&lt;</span>std<span class="token operator">::</span>mutex<span class="token operator">></span> <span class="token function">lk</span><span class="token punctuation">(</span>map_mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>it<span class="token operator">:</span>func_map_<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            it<span class="token punctuation">.</span>second<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        func_map_<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//执行相应的注册函数</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">UvWorkCallBack</span><span class="token punctuation">(</span>uv_work_t<span class="token operator">*</span> req<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        std<span class="token operator">::</span>function<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">*</span> func <span class="token operator">=</span> <span class="token punctuation">(</span>std<span class="token operator">::</span>function<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>req<span class="token operator">-</span><span class="token operator">></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token operator">*</span>func<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//释放资源</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">UvAfterWorkCallBack</span><span class="token punctuation">(</span>uv_work_t<span class="token operator">*</span> req<span class="token punctuation">,</span><span class="token keyword">int</span> status<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>req <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">delete</span> req<span class="token punctuation">;</span>            req <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//用来保存注册的函数map</span>    std<span class="token operator">::</span>map<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token punctuation">,</span> std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>tuple<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">,</span> std<span class="token operator">::</span>shared_ptr<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">>></span><span class="token operator">>></span> func_map_<span class="token punctuation">;</span>    std<span class="token operator">::</span>mutex map_mutex_<span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token function">Notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                         <span class="token comment" spellcheck="true">// ctor hidden</span>    <span class="token punctuation">{</span>        <span class="token function">Release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Notify</span><span class="token punctuation">(</span>Notify <span class="token keyword">const</span><span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// copy ctor hidden</span>    Notify<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>Notify <span class="token keyword">const</span><span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// assign op. hidden</span>    <span class="token operator">~</span><span class="token function">Notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//执行通知</span><span class="token keyword">using</span> func <span class="token operator">=</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Notify<span class="token operator">::</span><span class="token function">Instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ExcecuteNotify<span class="token operator">&lt;</span>func<span class="token operator">></span><span class="token punctuation">(</span>GLOBAL_CLIENT_INFO_NOTIFY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注册函数</span><span class="token keyword">auto</span> sp <span class="token operator">=</span> std<span class="token operator">::</span>make_shared<span class="token operator">&lt;</span>std<span class="token operator">::</span>function<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token punctuation">(</span>std<span class="token operator">::</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>classxx<span class="token operator">::</span>classxx<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Notify<span class="token operator">::</span><span class="token function">Instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>GLOBAL_USER_INFO_NOTIFY<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> std<span class="token operator">::</span>static_pointer_cast<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span><span class="token punctuation">(</span>sp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> classxx<span class="token operator">::</span><span class="token function">classxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//也可以带参数</span></code></pre><h2 id="不足之处"><a href="#不足之处" class="headerlink" title="不足之处"></a>不足之处</h2><p>注册函数时必须得知道通知时带的参数类型和个数，这个是弊端</p><p>有更好的办法请指点–</p><h4 id="如有错误欢迎指正-感激不尽"><a href="#如有错误欢迎指正-感激不尽" class="headerlink" title="如有错误欢迎指正,感激不尽"></a>如有错误欢迎指正,感激不尽</h4><hr><p><strong>所有图片均来自网络</strong></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows、macosx 动态 加载 动态库 类封装</title>
      <link href="/windows-osx-dong-tai-jia-zai-dong-tai-ku.html"/>
      <url>/windows-osx-dong-tai-jia-zai-dong-tai-ku.html</url>
      
        <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>为了方便在windows平台或者mac、osx平台上调用动态库，封装一个C++基础模板类，实现动态库加载，函数获取以及直接调用，直接调用时只要传入函数名成和参数即可</p><p>因为要兼容windows 和mac 平台我们定义两个宏做编译区分<br>defined(OS_WIN)<br>defined(OS_MACOSX)</p><h2 id="关键知识点"><a href="#关键知识点" class="headerlink" title="关键知识点"></a>关键知识点</h2><p>windows 加载动态库使用到的函数 LoadLibraryExW,GetProcAddress,FreeLibrary<br>macosx 加载动态库使用到的函数 dlopen,GetProcAddress,dlclose<br>可变参数模板函数<br>std::result_of&lt;std::function<T>(Args…)&gt;::type<br>std::forward<Args>(args)…</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>三个文件shared_library.h shared_library.cc shared_library.mm</p><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span>  <span class="token class-name">SharedLibrary</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">SharedLibrary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">SharedLibrary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//加载动态库dll或者dylib</span>    <span class="token keyword">bool</span> <span class="token function">Load</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string str_utf8_dllfilepath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取动态库中的函数指针</span>    <span class="token comment" spellcheck="true">//通过函数模板适应所以函数类型</span>    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span>    T<span class="token operator">*</span> <span class="token function">GetFunction</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string _funcName<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        T<span class="token operator">*</span> _funcPtr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">if</span> defined(OS_WIN)</span>        <span class="token comment" spellcheck="true">//windows 中通过GetProcAddress 获取函数地址</span>        <span class="token keyword">auto</span> _ptr <span class="token operator">=</span> <span class="token function">GetProcAddress</span><span class="token punctuation">(</span><span class="token punctuation">(</span>HMODULE<span class="token punctuation">)</span>libraryHandle_<span class="token punctuation">,</span> _funcName<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _funcPtr <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token operator">*</span><span class="token punctuation">)</span>_ptr<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">if</span> defined(OS_MACOSX)</span>        <span class="token comment" spellcheck="true">//Mac dlsym 获取函数地址</span>        <span class="token keyword">auto</span> _ptr <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">dlsym</span><span class="token punctuation">(</span>libraryHandle_<span class="token punctuation">,</span> _funcName<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _funcPtr <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token operator">*</span><span class="token punctuation">)</span>_ptr<span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>dlsym_error <span class="token operator">=</span> <span class="token function">dlerror</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dlsym_error<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> std<span class="token operator">::</span><span class="token function">runtime_error</span><span class="token punctuation">(</span>dlsym_error<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>        <span class="token keyword">return</span> _funcPtr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//主动释放动态库</span>    <span class="token keyword">void</span> <span class="token function">Free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调用动态中的函数</span>    <span class="token comment" spellcheck="true">//这里使用可变参数模板，因为不同函数的参数不一样</span>    <span class="token comment" spellcheck="true">//std::result_of&lt;std::function&lt;T>(Args...)>::type 自动获取函数返回值类型</span>    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span>    <span class="token keyword">typename</span> std<span class="token operator">::</span>result_of<span class="token operator">&lt;</span>std<span class="token operator">::</span>function<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">::</span>type <span class="token function">ExcecuteFunc</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string funcName<span class="token punctuation">,</span> Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//通过函数名称获取函数地址</span>        <span class="token keyword">auto</span> f <span class="token operator">=</span> GetFunction<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>funcName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            std<span class="token operator">::</span>string s <span class="token operator">=</span> <span class="token string">"can not find this function "</span> <span class="token operator">+</span> funcName<span class="token punctuation">;</span>            <span class="token keyword">throw</span> std<span class="token operator">::</span><span class="token function">runtime_error</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//使用完美转发，然后运行函数</span>        <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span>std<span class="token operator">::</span>forward<span class="token operator">&lt;</span>Args<span class="token operator">></span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//用于保存动态库加载之后的指针</span>    <span class="token keyword">void</span><span class="token operator">*</span> libraryHandle_<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="windows实现"><a href="#windows实现" class="headerlink" title="windows实现"></a>windows实现</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"shared_library.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;locale></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;codecvt></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;windows.h></span></span>SharedLibrary<span class="token operator">::</span><span class="token function">SharedLibrary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    libraryHandle_ <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">}</span>SharedLibrary<span class="token operator">::</span><span class="token operator">~</span><span class="token function">SharedLibrary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> SharedLibrary<span class="token operator">::</span><span class="token function">Load</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string str_utf8_dllfilepath<span class="token punctuation">)</span><span class="token punctuation">{</span>    std<span class="token operator">::</span>wstring_convert<span class="token operator">&lt;</span>std<span class="token operator">::</span>codecvt_utf8<span class="token operator">&lt;</span><span class="token keyword">wchar_t</span><span class="token operator">>></span> conv<span class="token punctuation">;</span>    std<span class="token operator">::</span>wstring strpath <span class="token operator">=</span> conv<span class="token punctuation">.</span><span class="token function">from_bytes</span><span class="token punctuation">(</span>str_utf8_dllfilepath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//转换成unicode编码加载路径，避免windows 平台 ascii路径存在的诸多问题</span>    <span class="token comment" spellcheck="true">//windows加载动态库使用LoadLibraryExW</span>    libraryHandle_ <span class="token operator">=</span> <span class="token function">LoadLibraryExW</span><span class="token punctuation">(</span>strpath<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> LOAD_WITH_ALTERED_SEARCH_PATH<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>libraryHandle_ <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> SharedLibrary<span class="token operator">::</span><span class="token function">Free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>libraryHandle_ <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token operator">::</span><span class="token function">FreeLibrary</span><span class="token punctuation">(</span><span class="token punctuation">(</span>HMODULE<span class="token punctuation">)</span>libraryHandle_<span class="token punctuation">)</span><span class="token punctuation">;</span>        libraryHandle_ <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="macosx-实现"><a href="#macosx-实现" class="headerlink" title="macosx 实现"></a>macosx 实现</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"shared_library.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;dlfcn.h></span></span>SharedLibrary<span class="token operator">::</span><span class="token function">SharedLibrary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    libraryHandle_ <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">}</span>SharedLibrary<span class="token operator">::</span><span class="token operator">~</span><span class="token function">SharedLibrary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> SharedLibrary<span class="token operator">::</span><span class="token function">Load</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string str_utf8_dllfilepath<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//macosx 加载dylib使用的方式和linux一样</span>    libraryHandle_ <span class="token operator">=</span> <span class="token function">dlopen</span><span class="token punctuation">(</span>str_utf8_dllfilepath<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> RTLD_LOCAL<span class="token operator">|</span>RTLD_LAZY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>libraryHandle_ <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error msg:%s"</span><span class="token punctuation">,</span><span class="token function">dlerror</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> SharedLibrary<span class="token operator">::</span><span class="token function">Free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>libraryHandle_ <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//macosx 释放dylib使用的方式和linux一样</span>        <span class="token function">dlclose</span><span class="token punctuation">(</span>libraryHandle_<span class="token punctuation">)</span><span class="token punctuation">;</span>        libraryHandle_ <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="调用示例"><a href="#调用示例" class="headerlink" title="调用示例"></a>调用示例</h2><pre class=" language-cpp"><code class="language-cpp">std<span class="token operator">::</span>string dllfilepath <span class="token operator">=</span> u8<span class="token string">""</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">if</span> defined(OS_WIN)  </span>    dllfilepath <span class="token operator">=</span> _dllpath <span class="token operator">+</span> u8<span class="token string">"\\xxx.dll"</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">elif</span> defined(OS_MACOSX)  </span>    dllfilepath <span class="token operator">=</span> _dllpath <span class="token operator">+</span> u8<span class="token string">"//xxx.dylib"</span><span class="token punctuation">;</span><span class="token keyword">auto</span> ptr_shared_library_ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">SharedLibrary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ptr_shared_library_<span class="token operator">-</span><span class="token operator">></span><span class="token function">Load</span><span class="token punctuation">(</span>dllfilepath<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//传入函数名称和参数执行函数然后返回结果</span><span class="token keyword">auto</span> _ptr <span class="token operator">=</span> ptr_shared_library_<span class="token operator">-</span><span class="token operator">></span>ExcecuteFunc<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"func"</span><span class="token punctuation">,</span><span class="token number">1111</span><span class="token punctuation">,</span><span class="token number">11111</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>_ptr <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="如有错误欢迎指正-感激不尽"><a href="#如有错误欢迎指正-感激不尽" class="headerlink" title="如有错误欢迎指正,感激不尽"></a>如有错误欢迎指正,感激不尽</h4><hr><p><strong>所有图片均来自网络</strong></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《系统之美》-作者:[美] 德内拉·梅多斯</title>
      <link href="/xi-tong-zhi-mei.html"/>
      <url>/xi-tong-zhi-mei.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/06/27/5d1486803e8b876618.jpg" alt="系统之美"><br>这本书是一本系统思维的入门经典，因为概念和科普性很强，所以阅读是有难度的，不过作者加入了大量的案例向我们展示系统之美，让跟着作者的思路走有一种畅快淋漓的感觉。虽然偏社科人文多一些，但是不影响相关思想的理解和运用，想要运用好，就需要对这个世界有很好系统建模能力，也就是书中所说的系统基模</p><p>常说我们所看到的世界是我们想看到的世界，我们怎样思考看待这个世界，世界就会怎样呈现在我们眼前，世界从来都不是单一的，也不是简单线性的，而是动态复杂的，无数个不同的子系统组成，具有自组织，自适应，层次性三大特征的动态系统！</p><p>我们常常看事情是片面的，表面的，出现什么问题解决什么问题，难以越过问题的本质去思考去解决，所以常常解决已出现的问题而引发其他问题，没有找到系统的’’杠杆点’’去调节和解决问题！所以我们要了解系统思维，学会用系统思维去解决和看待问题，避免一些常见的系统陷阱。</p><p>系统建模，不管其繁简程度如何，都是对现实世界的简化；我们每个人都在以不同的复杂或简化程度来看待这个世界。 我们认为自己所知道的关于这个世界的任何东西都只是一个模型。虽然我们的模型确实与现实世界高度一致，但远未达到能完整地代表真实世界的程度。我们在不断的成长不断的对这个世界认知建模，学习也好，生活也好，需要永远保持谦卑的学习心态。不断完善我们的知识体系，完善我们的认知模型。这本书可以当做我的枕边书，需要不断的查看和学习。</p><p>最后借用作者的一段话</p><blockquote><p>系统思考只能告诉我们该做什么，但它本身不会去做。让我们回到知与行之间的鸿沟上。知易行难，虽然系统思考不能填补这一鸿沟，但它可以引领我们来到鸿沟的边缘，让我们更好地进行分析，并继而找到突破点——从人类精神的角度，告诉我们能做什么，以及必须做什么。</p></blockquote><p><img src="https://i.loli.net/2019/06/27/5d148637b41b896576.png" alt="思维导图笔记"></p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 思维力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Expression:(Invalid integer length modifier, 0)</title>
      <link href="/expression-invalid-integer.html"/>
      <url>/expression-invalid-integer.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>最新公司项目桌面端软件上传一些特殊文件名的文件造成程序奔溃，找半天才找到奔溃的地方，竟然是vsnprintf这个函数奔溃了，知道奔溃的函数了那就debug一下，然后报错如下</p><p><img src="https://i.loli.net/2019/06/27/5d1458cf5730097064.png" alt="Expression:(Invalid integer length modifier, 0)"></p><h2 id="列上代码："><a href="#列上代码：" class="headerlink" title="列上代码："></a>列上代码：</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> log<span class="token operator">::</span><span class="token function">Write</span><span class="token punctuation">(</span>LogLevel _level<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> _tag<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> _file<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> _func<span class="token punctuation">,</span> <span class="token keyword">int</span> _line<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> _module<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">4096</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    va_list ap<span class="token punctuation">;</span>    <span class="token function">va_start</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> format<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">vsnprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">,</span> format<span class="token punctuation">,</span> ap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">writefile</span><span class="token punctuation">(</span><span class="token function">TLogLevel</span><span class="token punctuation">(</span>_level<span class="token punctuation">)</span><span class="token punctuation">,</span> _tag<span class="token punctuation">,</span> _file<span class="token punctuation">,</span> _func<span class="token punctuation">,</span> _line<span class="token punctuation">,</span> <span class="token function">GetFormateLogHeader</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>debug 之后发现 format 这个里面含有%20l 或者%d,就会出现问题，<br>那么是否就是说只要format中含有格式化输入的符号，后面的可变参数就自动变成输入参数了呢？<br>google搜索一圈发现 <a href="https://social.msdn.microsoft.com/Forums/vstudio/en-US/5326dae2-46aa-4290-9b9d-b456cdc636d4/vsnprintf?forum=vcgeneral" target="_blank" rel="noopener">vsnprintf() - MSDN - Microsoft</a> 也是这个问题</p><p><img src="https://i.loli.net/2019/06/27/5d145c015b03663887.png" alt="vsnprintf crash"></p><p><strong>这说明问题不是出在vsnprintf 这个函数上，而是出在可变参数中的字符串中含有格式化输入的字符，只要使用可变参数的函数都会出现问题。</strong></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="去掉可变参数"><a href="#去掉可变参数" class="headerlink" title="去掉可变参数"></a>去掉可变参数</h3><p>例如直接把函数改成</p><pre><code>void log::Write(LogLevel _level, const char* _tag, const char* _file, const char* _func, int _line, const char* _module,const char* format)</code></pre><p>但是我这底层调用还是可变参数，这个就不适合了，那就修改一下</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> log<span class="token operator">::</span><span class="token function">Write</span><span class="token punctuation">(</span>LogLevel _level<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> _tag<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> _file<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> _func<span class="token punctuation">,</span> <span class="token keyword">int</span> _line<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> _module<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">xlogger2</span><span class="token punctuation">(</span><span class="token function">TLogLevel</span><span class="token punctuation">(</span>_level<span class="token punctuation">)</span><span class="token punctuation">,</span> _tag<span class="token punctuation">,</span> _file<span class="token punctuation">,</span> _func<span class="token punctuation">,</span> _line<span class="token punctuation">,</span><span class="token string">"%s"</span><span class="token punctuation">,</span> format<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>用 %s这种方式可以处理了，但是有个弊端就是可变参数转发就不能实现了，而且只能把先把可变参数变成字符串</p><h2 id="是否还有更好的方案呢？"><a href="#是否还有更好的方案呢？" class="headerlink" title="是否还有更好的方案呢？"></a>是否还有更好的方案呢？</h2><p>有的话请告诉我吧。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>inno setup 开启 日志</title>
      <link href="/innosetup-kai-qi-ri-zhi.html"/>
      <url>/innosetup-kai-qi-ri-zhi.html</url>
      
        <content type="html"><![CDATA[<p>有时候安装程序的错误，我们无法跟踪需要日志功能，那么innosetup中如何开启日志呢</p><h5 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h5><p>在setup模块中开启日志功能</p><pre><code>[setup]//打开日志功能SetupLogging=yes</code></pre><h5 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h5><p>移动日志到指定位置方便查看</p><pre><code>[setup]procedure CurStepChanged(CurStep: TSetupStep);var  logfilepathname, logfilename, newfilepathname: string;begin  logfilepathname := ExpandConstant(&#39;{log}&#39;);  logfilename := ExtractFileName(logfilepathname);  newfilepathname := ExpandConstant(&#39;{app}\&#39;) + logfilename;  if CurStep = ssDone then  begin    FileCopy(logfilepathname, newfilepathname, false);  end;end;</code></pre><p>通过上述代码把日志放到安装目录下,如下图所示</p><p><img src="https://i.loli.net/2019/06/21/5d0c492f54d4748726.png" alt=""></p><h5 id="部分日志内容如下"><a href="#部分日志内容如下" class="headerlink" title="部分日志内容如下"></a>部分日志内容如下</h5><pre><code>2019-06-21 11:00:11.923   Log opened. (Time zone: UTC+08:00)2019-06-21 11:00:11.923   Setup version: Inno Setup version 5.5.1.ee2 (u)2019-06-21 11:00:11.923   Original Setup EXE: C:\Users\28748\Downloads\CloudHubUpdate_1.1.9_1906211032.exe2019-06-21 11:00:11.923   Setup command line: /SL5=&quot;$25138A,82682860,517632,C:\Users\28748\Downloads\CloudHubUpdate_1.1.9_1906211032.exe&quot; /SPAWNWND=$440C0A /NOTIFYWND=$A513AC 2019-06-21 11:00:11.923   Windows version: 6.2.9200  (NT platform: Yes)2019-06-21 11:00:11.923   64-bit Windows: Yes2019-06-21 11:00:11.923   Processor architecture: x642019-06-21 11:00:11.923   User privileges: Administrative2019-06-21 11:00:11.925   64-bit install mode: No2019-06-21 11:00:11.926   Created temporary directory: C:\Users\28748\AppData\Local\Temp\is-069S9.tmp2019-06-21 11:00:15.382   Starting the installation process.2019-06-21 11:00:15.556   Directory for uninstall files: D:\tmp\CloudHubX\阿萨法2019-06-21 11:00:15.556   Will append to existing uninstall log: D:\tmp\CloudHubX\阿萨法\unins000.dat2019-06-21 11:00:15.558   -- File entry --2019-06-21 11:00:15.563   Dest filename: D:\tmp\CloudHubX\阿萨法\unins000.exe2019-06-21 11:00:15.564   Time stamp of our file: 2019-06-21 11:00:11.4012019-06-21 11:00:15.564   Dest file exists.</code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚本 </tag>
            
            <tag> innosetup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《知道做到》-- 保罗·梅耶 / 迪克·卢赫</title>
      <link href="/zhi-dao-zuo-dao.html"/>
      <url>/zhi-dao-zuo-dao.html</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://i.loli.net/2019/06/21/5d0c35bad237996525.jpg" alt=""></h2><h2 id="问题？"><a href="#问题？" class="headerlink" title="问题？"></a>问题？</h2><p>为什么不能一次培训学习就学会？<br>为什么你会变成知识的垃圾桶？<br>为什么你会淹死在信息的大海之中？<br>为什么你会变成知识的巨人，实践的侏儒？ 为什么培训成本不断增加，竞争力却停滞不前？</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><h3 id="所拥有的-Know-How-过多——知识量超负荷"><a href="#所拥有的-Know-How-过多——知识量超负荷" class="headerlink" title="所拥有的 Know-How 过多——知识量超负荷"></a>所拥有的 Know-How 过多——知识量超负荷</h3><p>人们接收到的信息太多了。这其实是一条很容易掉进去的陷阱，因为如今人们可以 很容易去读一本新书，听一盘新的 CD，或是参加一个研讨班。知识来得非常容易，但却并不会实际改变他们的行为。</p><h3 id="消极性过重——不恰当的过滤系统"><a href="#消极性过重——不恰当的过滤系统" class="headerlink" title="消极性过重——不恰当的过滤系统"></a>消极性过重——不恰当的过滤系统</h3><p>第二个原因可能会让你有些惊，那就是消极过滤。人类的信息处理系统其实相当混乱，也就是说，他们有一种‘发臭思维症’(stinking’thinkin’，是指对那些积极的、哪怕是对自己有利的信息半信半疑，或者干脆拒之门外的症状。<br>因为知识很容易获取，所以我们总是在不断获取更多知识，而不是采取实际的行动去应用它们。而且在这个过程中，我们的消极思维会发生作用，从而削弱我们学以致用的动力。</p><h3 id="坏习惯——不适当的学习方法"><a href="#坏习惯——不适当的学习方法" class="headerlink" title="坏习惯——不适当的学习方法"></a>坏习惯——不适当的学习方法</h3><p>第三个，也是最后一个原因，就是缺少跟进举个例子，有多少人不知道吸烟有害健康呢？<br>那为什么还是有那么多人不愿意戒烟呢？因为要做到这点很难。这种习惯已经深深植入他们的生活中了。改变习惯或行为都需要他们付出真正切实的努力。但大多数人都不知道该如何采取切实的行动，去改掉自己的习惯，改变自己 的行为。</p><h3 id="关键的一环"><a href="#关键的一环" class="headerlink" title="关键的一环"></a>关键的一环</h3><p>一旦了解人们没能学以致用的3个原因，所有问题就都变得清楚了。然后你就可以帮助人们越来越多地应用自己从书 本、录音带、录像带和研讨班上学到的知识，进而改变自己的生活了。要想做到这点，关键就在于重复、重复、重复！这就是那缺失的一环<br>这里的重复实际上是指间隔性重复,如果想要让某条信息产生预期的结果， 你必须学会间隔性地重复它</p><blockquote><p>有人把这种间隔性重复成为行为条件学习(behavioral conditioning)或 内部强化（internal reinforcement）。我的好朋友约翰·海盖（John Haggai）称其为‘持久变化之母’（the mothor of permanent change）。之所以这么说， 是因为仅仅一句话很难让一个人产生持久变化。它必须不断地被重复，不是不间 断地反复，而是经过一段时间的反思之后再重复。</p></blockquote><h2 id="怎么解决"><a href="#怎么解决" class="headerlink" title="怎么解决"></a>怎么解决</h2><h3 id="知识量超负荷"><a href="#知识量超负荷" class="headerlink" title="知识量超负荷"></a>知识量超负荷</h3><ul><li>对于那些只接触过一次的信息，我们通常只能记住其中一小部分。</li><li>我们应该少而精而非多而浅地去学习。</li><li>要想掌握某件事，我们必须首先选择一些关键点，隔段时间就重复一下，让自己完全沉浸其中，并不断提高自己的知识和技能。关键在于间隔性重复。</li><li>一旦真正透彻地掌握了自己的工作，人们就会变得更有创造性，甚至能够创造奇迹。</li><li>要想真正了解一个领域，你必须透彻地吸收一些重要信息，而不是盲目地接触大量信息</li></ul><h3 id="消极过滤"><a href="#消极过滤" class="headerlink" title="消极过滤"></a>消极过滤</h3><blockquote><p>事实上，在我们所接受的信息中，只有很少一部分信息有机会被我们记住，更不要说进入我们的潜意识，被我们接受，并实际应用到 自己的生活当中了。当我们读书、听录音、看录像或参加研讨班时，我们是带着 自己当时的心态去阅读或聆听的，在很多情况下，我们都是用一种焦虑、消极、 犹豫不决、先入判断或者是坚持固有思维的态度去判断自己所接受到的信息。我 们本来可以 100%地听到自己身边的人在说些什么，听到自己身边出现了什么声 音，我们可以 100%地通过阅读让那些书和文献中的理念进入我们的大脑。但由 于我们的大脑常常是封闭而消极的，所以我们听到或读到的信息就会在我们的潜 意识遭遇心理上的堵塞，我们正是通过它来接受、相信、理解和使用信息的，结果最终只有10%的信息能够进入我们的潜意识。</p></blockquote><blockquote><p>当人们第一次接触时，他们会立刻拒绝，因为这个想法跟他们之前的想法有些冲突；<br>第二次接触时，他们会抵制，因为他们仍然无法接受这个想法；<br>第三次接触，他们会部分接受，但在实际应用的时候仍然会有所保留；<br>第四次接触时，他们会完全接受，因为他们感觉这个想法跟自己一直以来的想法完全 一致；<br>第五次接触时，他们会将其应用到实际工作中，会部分吸收，将其转化为自己的想法；<br>等到第六次接触时，他们会将其据为己有，完全吸收，并将其传播给其他人</p></blockquote><p>我们可以有捷径去吸收这些知识，而不是必须得经过这完整的六步。</p><h4 id="积极聆听"><a href="#积极聆听" class="headerlink" title="积极聆听"></a>积极聆听</h4><p>通过自己的积极思维所体验到的积极经历越多，你就可以自动跨越这 6 个步骤，许多创造性的想法几乎会不知不觉地浮现出来。</p><h4 id="使用绿灯思维"><a href="#使用绿灯思维" class="headerlink" title="使用绿灯思维"></a>使用绿灯思维</h4><blockquote><p>消极思维会让我们只能学到或利用自己接触到的一小部分信息；只能发挥自己的一小部分潜力； 过早地拒绝大部分信息；积极、开放的心态最有利于我们的成长，它会引发我们的创造力和应变力，最大限度地激发我们的灵感。我们必须设法敞开自己的心胸。每次接触新信息时，我们不要总是琢磨这些信息错在哪里，而是成为绿灯思考者，积极发现其中的正确之处，并告诉自己， “我知道自己读到或听到的信息是有一定价值的，可它究竟在哪儿呢？”将封闭、消极的心态变成开放而积极的心态并不是偶然事件。一旦下定决心要作出改变，你就需要制定一套清晰的策略，不断加强自己的新思维方式。</p></blockquote><h3 id="缺少跟进"><a href="#缺少跟进" class="headerlink" title="缺少跟进"></a>缺少跟进</h3><p>“有些人在接触了新事物之后，没有制订一个跟进计划，猜猜结果会怎样？”<br>“我想他们很快就会恢复旧习惯”<br>要想将知识变为行动，你需要制订一个跟进计划<br>跟进学习系统应该如下所示：</p><p><img src="https://i.loli.net/2019/06/20/5d0b76a6479a482175.png" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们常说要知行合一，只是说而没有行动，在互联网知识爆炸的时代，各个知识付费，知识IP大量崛起，充斥着我们的身边，我们获取知识越来越容易，反而越来越迷茫，越来越焦虑。我们要像作者学习少而精，间隔性重复我们所学的知识，才能够内化吸收。我们新学一个知识，就需要我们去进行一段时间的刻意练习，不然这个知识就忘记了，和我们毫无关联了。</p><hr><p><strong>所有图片均来自网络</strong></p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 学习力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>innosetup MoveFile 失败 代码183</title>
      <link href="/movefile-shi-bai.html"/>
      <url>/movefile-shi-bai.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/06/18/5d08ce60a6cdb11966.png" alt=""></p><hr><h3 id="这类问题排查方案"><a href="#这类问题排查方案" class="headerlink" title="这类问题排查方案:"></a>这类问题排查方案:</h3><h4 id="权限对不对"><a href="#权限对不对" class="headerlink" title="权限对不对"></a>权限对不对</h4><p>安装包是否有权限去替换这个问题，如果没有权限提升权限验证试一下<br>innosetup 提升权限代码</p><pre><code>    [Setup]    PrivilegesRequired = admin</code></pre><h4 id="安装包中是否存在这个文件"><a href="#安装包中是否存在这个文件" class="headerlink" title="安装包中是否存在这个文件"></a>安装包中是否存在这个文件</h4><p>安装到其他路径对比查看是否有这个文件</p><h4 id="这个文件被其他软件占用"><a href="#这个文件被其他软件占用" class="headerlink" title="这个文件被其他软件占用"></a>这个文件被其他软件占用</h4><p>如果知道占用的程序，那么手动杀掉程序点击重试，是否能够成功。如果成功，那么只要代码去杀掉这个程序即可</p><h5 id="已知程序占用，则杀掉程序"><a href="#已知程序占用，则杀掉程序" class="headerlink" title="已知程序占用，则杀掉程序"></a>已知程序占用，则杀掉程序</h5><p>innosetup 调用 KillTask函数 杀掉进程即可</p><h5 id="未知程序占用"><a href="#未知程序占用" class="headerlink" title="未知程序占用"></a>未知程序占用</h5><p>innosetup 脚本代码先 调用rename 修改文件，再安装测试一下</p><pre><code>if FileExists(tempfile)=false then      begin        if RenameFile(oldfile,newfile) then           begin             result := true;             Exit;           end;      end;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚本 </tag>
            
            <tag> innosetup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《刻意练习》--(美)安德斯·艾利克森（Anders Ericsson）（美）罗伯特·普尔</title>
      <link href="/ke-yi-lian-xi.html"/>
      <url>/ke-yi-lian-xi.html</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://images-cn.ssl-images-amazon.com/images/I/51WDB9ecgvL.jpg" alt=""></h2><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>无论你是孩子还是成年人，无论你是否有“天赋”，只要掌握正确的方法，你的梦想都可以实现。如果你相信“21天学会C语言”“3天学会弹钢琴”，那么本书不适合你。如果你不满足于自己的能力只是“足够好”，一直在追求“非常好”，那么本书就是为你而写的。放弃一切错误方法，从今天开始“刻意练习”，因为这是最强大的，也是唯一正确的学习方法。</p><h2 id="为什么’天才’是训练的产物"><a href="#为什么’天才’是训练的产物" class="headerlink" title="为什么’天才’是训练的产物"></a>为什么’天才’是训练的产物</h2><p>通过高强度训练，能够改造身体和大脑，产生像天赋一般的奇迹能力，从而铸就天才。<br>案例：美国人21小时做46001个俯卧撑案例：伦敦出租车司机的海马体，经过高强度训练后比之前增大不少</p><p>通过训练，人人都可以练出完美音高，人人都可以成为莫扎特<br>案列：日本心理学实验“一年训练时间让24个幼儿具备和莫扎特一样的完美音高”</p><h2 id="为什么大部分人没有什么大师"><a href="#为什么大部分人没有什么大师" class="headerlink" title="为什么大部分人没有什么大师"></a>为什么大部分人没有什么大师</h2><h3 id="存在思想误区"><a href="#存在思想误区" class="headerlink" title="存在思想误区"></a>存在思想误区</h3><blockquote><p>第一种错误思想是我们的老朋友，即认为某人的能力通常受到基因特征的限制。这种思想常常表现为各种各样“我不能”或者“我不是”之类的表述。但是，如我们已经了解的那样，在任何一个人们选择着重发展的行业或领域之中，人人都可以通过正确的训练来帮助自己大幅度地提高。我们可以塑造自己的潜力。</p><p> 第二种错误思想认为，如果你足够长时间地做某件事情，一定会更擅长。这种思想错在哪里，我们很清楚。以完全相同的方式一而再再而三地做某件事情，并不是提高绩效和表现的秘诀；它会使人们停下前进的脚步，并且缓慢地下滑。</p><p> 第三种错误思想认为，要想提高，只需要努力。如果足够刻苦，你会更加优秀。但现实是，所有这些事情，即管理、销售和团队合作，全都是专业化的技能，除非你运用一些专门用于提升那些特定技能的练习方法，否则，即使加倍努力，也无法让你有更大的进步。</p></blockquote><h3 id="不是有效的练习"><a href="#不是有效的练习" class="headerlink" title="不是有效的练习"></a>不是有效的练习</h3><h4 id="‘天真的练习’只能成为新手"><a href="#‘天真的练习’只能成为新手" class="headerlink" title="‘天真的练习’只能成为新手"></a>‘天真的练习’只能成为新手</h4><blockquote><p>   基本上只是反复地做某件事情，并指望只靠那种反复，就能提高表现和水平</p></blockquote><h4 id="有目的的练习四个特点"><a href="#有目的的练习四个特点" class="headerlink" title="有目的的练习四个特点"></a>有目的的练习四个特点</h4><ul><li>有目的的练习是专注的</li><li>有目的的练习包含反馈</li><li>有目的的练习需要走出舒适区</li><li>有目的的练习具有定义明确的特定目标</li></ul><p>如果不满足于”足够好”，而需要追求卓越，那么就需要刻意练习</p><h2 id="什么是刻意练习"><a href="#什么是刻意练习" class="headerlink" title="什么是刻意练习"></a>什么是刻意练习</h2><h3 id="与其他类型的有目的的练习区别"><a href="#与其他类型的有目的的练习区别" class="headerlink" title="与其他类型的有目的的练习区别"></a>与其他类型的有目的的练习区别</h3><ul><li>首先，它需要一个已经得到合理发展的行业或领域，也就是说，在那一行业或领域之中，最杰出的从业者已达到一定程度的表现水平，使他们与其他刚刚进入该行业或领域的人们明显地区分开来。</li><li>其次，刻意练习需要一位能够布置练习作业的导师，以帮助学生提高他的水平。</li></ul><p>刻意练习也是一种有目的的练习，而且知道该朝什么方向发展，以及怎样去达到目标。</p><h3 id="刻意练习的特点"><a href="#刻意练习的特点" class="headerlink" title="刻意练习的特点"></a>刻意练习的特点</h3><blockquote><ul><li>刻意练习发展的技能，是其他人已经想出怎样提高的技能，也是已经拥有一整套行之有效的训练方法的技能。训练的方案应当由导师或教练来设计和监管，他们既熟悉杰出人物的能力，也熟悉怎么样才能最好地提高那种能力。</li></ul></blockquote><blockquote><ul><li>刻意练习发生在人们的舒适区之外，而且要求学生持续不断地尝试那些刚好超出他当前能力范围的事物。因此，它需要人们付出近乎最大限度的努力。一般来讲，这并不令人心情愉快。</li></ul></blockquote><blockquote><ul><li>刻意练习包含得到良好定义的特定目标，通常还包括目标表现的某些方面；它并非指向某些模糊的总体改进。一旦设定了总体目标，导师或教练将制订一个计划，以便实现一系列微小的改变，最后将这些改变累积起来，构成之前期望的更大的变化。改进目标表现的某些方面，使得从业者能够看到他的表现已经通过练习得到了提高。</li></ul></blockquote><blockquote><ul><li>刻意练习是有意而为的，也就是说，它需要人们完全的关注和有意识的行动。简单地遵照导师或教练的指示去做，还不够。学生必须紧跟他的练习的特定目标，以便能做出适当的调整，控制练习。</li></ul></blockquote><blockquote><ul><li>刻意练习包含反馈，以及为应对那些反馈而进行调整的努力。在练习过程的早期，大量的反馈来自导师或教练，他们将监测学生的进步、指出存在的问题，并且提供解决这些问题的方法。随着时间的推移，学生必须学会自己监测自己、自己发现错误，并做出相应调整。这种自我监测，需要高效的心理表征。</li></ul></blockquote><blockquote><ul><li>刻意练习既产生有效的心理表征，又依靠有效的心理表征。提高水平与改进心理表征是相辅相成的，两者不可偏废；随着人们水平的提升，表征也变得更加详尽和有效，反过来使得人们可能实现更大程度的改进。心理表征使人们能监测在练习中和实际的工作中做得怎么样。它们表明了做某件事的正确方法，并使得人们注意到什么时候做得不对，以及怎样来纠正。</li></ul></blockquote><blockquote><ul><li>刻意练习通过着重关注过去获取的技能的某些特定方面，致力于有针对性地提高那些方面，并且几乎总是包括构建或修改那些过去已经获取的技能；随着时间的推移，这种逐步的改进最终将造就卓越的表现。由于新技能的学习是建立在现有技能基础上的，因此，导师会为初学者提供正确的基本技能，使学生后来能在更高层面上重新学习那些基本的技能。</li></ul></blockquote><h3 id="什么是心里表征"><a href="#什么是心里表征" class="headerlink" title="什么是心里表征"></a>什么是心里表征</h3><p>心理表征是一种与我们大脑正在思考的某个物体、某个观点、某些信息或者其他任何事物相对应的心理结构，或具体或抽象。一个简单的例子是视觉形象。一个重要的事实是：它们都是“行业或领域特定的”，也就是说，只应用于专为它们而培养出来的技能。直白点你看待世界的方式，接受信息判断信息的思维模式和套路。<strong>新手与专家的差别就在于心理表征的不同</strong></p><h3 id="怎么运用刻意练习"><a href="#怎么运用刻意练习" class="headerlink" title="怎么运用刻意练习"></a>怎么运用刻意练习</h3><ul><li><p>找到学习的价值</p><ul><li>如果你无法找到你的价值，你就很快会陷入停滞阶段</li><li>跨越停滞阶段<ul><li>以新的方式挑战自己</li><li>攻克特定的弱点</li><li>保持动机</li><li>继续前行的理由<ul><li>增强继续前行的倾向</li></ul></li><li>停下脚步的理由<ul><li>弱化停下脚步的理由</li></ul></li><li>精心设置目标</li></ul></li></ul></li><li><p>找到一位导师</p><ul><li>建立心理表征</li><li>拆分你的任务</li></ul></li><li>详细的计划</li><li>专注和投入</li><li>有效的反馈<ul><li>没有反馈，没有办法找到自己的错误，没办法改进自己</li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>《刻意练习》这本书被各种机构和大神推荐，我以前也经常在其他书中看到，说来惭愧，最近才仔细阅读这本书。刻意练习这个概念是作者总结归纳提出来的，也有些行业实用性，就是说有些行业不适用。但是这个不要紧，我们理解刻意练习的本质是什么之后，我们可以对其进行调整适合自己练习和成长，所以在学习技能的过程就是不断优化心里表征才能不断迈向卓越。人的成长也是如此，不断的优化处理信息和获取信息的心里表征，才能让我们快速成长。</p><hr><p><strong>所有图片均来自网络</strong></p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 学习力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《零秒思考》--[日] 赤羽雄二</title>
      <link href="/ling-miao-si-kao.html"/>
      <url>/ling-miao-si-kao.html</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://i.loli.net/2019/06/18/5d0850ea318c782349.jpg" alt=""></h2><h2 id="什么是零秒思考"><a href="#什么是零秒思考" class="headerlink" title="什么是零秒思考"></a>什么是零秒思考</h2><p>作者通过在麦肯锡工作总结出来的，所谓“零秒”，就是瞬间便能认清现状，瞬间便能整理问题，瞬间便能考虑出解决办法，瞬间便能决定该如何行动。没有犹豫的时间，也没有烦恼的时间。作者是通过做笔记这个途径刻意练习之后拥有了这个能力，那么为什么要用笔记法来训练思考呢？</p><h2 id="记笔记好处"><a href="#记笔记好处" class="headerlink" title="记笔记好处"></a>记笔记好处</h2><p>留下你思考的痕迹，留下痕迹更容易记忆<br>理清你的大脑中的思考<br>能够平静下来不断思考问题本身<br>不断的在问自己和总结问题，下次遇到有过思考的问题那么就能很快做决定</p><h2 id="怎么记笔记"><a href="#怎么记笔记" class="headerlink" title="怎么记笔记"></a>怎么记笔记</h2><p>写一个主题，现状或者问题<br>思考一下原因<br>然后写 4-6 条 对策<br>具体内容要足够明确<br>顺序不重要<br>对策能够按照一定的逻辑归纳整理<br>多角度对同一个标题写不同的内容<br>挖掘笔记的内容，提炼总结，常回顾</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>目的是零秒思考，过程和方法是不是一定要这样有待怀疑，作者用日本的理念与我们本身存在偏差，所以有些坚持在每个人看来是不同的效果，就像作者所说的想到什么就写下来，重复写也没有关系，但是如果没有组织这些想法写一千次还是一样，我觉得并不能提高你的思维能力，遇到这类问题，如果没有系统的思考过那么这个问题还是主观片面的，我觉得每次在写下想法的过程中，需要提炼组织写好每个问题，基于黄金思维圈或者金字塔等其他模型有逻辑的组织好你的想法，重复的想法有不同的角度可以系统的重新写一次，留下痕迹以便让记忆深刻。便于下次遇到就能想到上次的思考，达到所谓的“零秒思考”。想到了什么问题，就及时写出来记录下来能够及时理清大脑中的想法和思考。但是具体实施过程中需要找到适合自己的方法，目的是训练自己的思维能力，适合自己训练的方法就行。</p><hr><p><strong>所有图片均来自网络</strong></p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《为什么精英都是时间控》-【日】烨泽紫苑</title>
      <link href="/wei-shi-me-jing-ying-du-shi-shi-jian-kong.html"/>
      <url>/wei-shi-me-jing-ying-du-shi-shi-jian-kong.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/06/17/5d0746de4cf7334156.jpg" alt=""></p><hr><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p> 就像作者所说看这本书的目的，肯定是想看看有没有办法提高工作效率和时间的使用效率。本书作者是桦泽紫苑，日本一名神经科医生，他与习惯忙碌的日本人不同，认为日本人现在的以工作为中心崇尚加班的生活方式不健康。想要用这本书让日本人不仅不加班还提高工作效率，从而减少日本人的抑郁率和自杀率。</p><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><p>本书开篇就确立几个原则</p><ul><li>以专注力为中心对时间进行分配</li><li>提高专注力，创造出时间</li><li>提高工作效率上下功夫</li><li>花时间进行自我投资</li></ul><p>确认这几个原则的目的就是告诉读者中心作者的时间管理是以专注力为核心的时间管理方法。在专注力高的时候做正确的事情效率会提高，以专注力为核心，解释专注力运行模式，如何提高专注力。</p><h4 id="专注力运行机制"><a href="#专注力运行机制" class="headerlink" title="专注力运行机制"></a>专注力运行机制</h4><p>1、任务分为专注性、非专注性。把专注性工作放到专注力高的时间处理。<br>2、早上很重要、大脑的黄金时间。有效的利用好早上的时间<br>3、人的专注力时间大概是 15<em> 45 </em> 90分钟法则</p><h4 id="如何多出几倍时间"><a href="#如何多出几倍时间" class="headerlink" title="如何多出几倍时间"></a>如何多出几倍时间</h4><p>提高工作效率-》节省出自由时间-》提升自己-》提升工作效率 形成正循环</p><h4 id="提高专注力"><a href="#提高专注力" class="headerlink" title="提高专注力"></a>提高专注力</h4><p>1、早起利用好早上黄金时间，通过运动、沐浴、咀嚼等方式让自己彻底清醒提高专注力<br>2、牺牲什么都不要牺牲睡觉时间，不要睡太久。<br>3、运动锻炼<br>4、设置限制时间，提高效率，提高专注力</p><h4 id="恢复专注力"><a href="#恢复专注力" class="headerlink" title="恢复专注力"></a>恢复专注力</h4><p>1、穿插工作恢复，运动，小睡，午休等方式来清楚疲惫、提升专注力。<br>2、主动娱乐不要被动娱乐<br>3、睡觉前不要进行大量运动，玩手机、看电视、看小说等让大脑放松轻松入睡。</p><h4 id="根据脑科学原理设计的最完美的一天"><a href="#根据脑科学原理设计的最完美的一天" class="headerlink" title="根据脑科学原理设计的最完美的一天"></a>根据脑科学原理设计的最完美的一天</h4><p><img src="https://i.loli.net/2019/06/17/5d0748d31792c55017.jpg" alt="根据脑科学原理设计的最完美的一天"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实读书就是容易看完了之后什么都没有改变，作者说的这些道理都懂然并卵，自己没有改变还是和以前一样，读书重要的就是改变行为方式，改变思维方式。所以了解之后需要去行动，就像坚持每天阅读一样，在没有行动以前再多的感悟也只是感慨而已，很容易就忘记了。希望自己在吸收作者知识精华之后，能够有行之有效的改变和行动，做到知行合一。</p><hr><p><strong>所有图片均来自网络</strong></p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 效率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《有效学习》[美] 乌尔里希·伯泽尔 著 张海龙 译</title>
      <link href="/you-xiao-xue-xi.html"/>
      <url>/you-xiao-xue-xi.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/06/12/5d0062aecf26583137.png" alt=""></p><hr><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本书一直在强调：学习活动是一个过程、一套方法、一个体系，它最终将帮助人们更有效地获得专业技能。我们一旦掌握了如何学习的方法，就可以提升我们在任何一个领域的技能。只要我们思想上勤奋、方法上得当、态度上严谨，再加以练习和实践，让各种知识触类旁通，并进行持之以恒的回顾与反思，我们一定可以成为精通某一领域的专家</p><h2 id="系统化的学习方法"><a href="#系统化的学习方法" class="headerlink" title="系统化的学习方法"></a>系统化的学习方法</h2><h3 id="价值感："><a href="#价值感：" class="headerlink" title="价值感："></a>价值感：</h3><blockquote><p>如果我们本身不想学，那么是不太可能学会的，也就更谈不上精通了。所以我们必须认识到，我们打算学习的知识和技能是有价值的，而且必须能发现其中的意义。学习的过程，其实也是赋予某种事物具体意义的过程。</p></blockquote><blockquote><p><strong>动机是学习活动的终极动力</strong>，主动探索和发现事物的价值感及意义是掌握任何一项技能的第一步。同时，富有创造性的学习活动，可以帮助我们塑造积极的思维模式，使得学以致用成为可能。</p></blockquote><h3 id="目标："><a href="#目标：" class="headerlink" title="目标："></a>目标：</h3><blockquote><p> 在精通某项技能的初始阶段，专注才是最关键的。我们需要搞清楚我们要学习的究竟是什么，并且设定阶段性目标<br> 学习就是一项知识管理的活动，它包括设定学习目标、制订学习计划、掌握基本技巧和掌握专业技能。同时，做好情绪管理也是进行思维活动的重要因素。</p></blockquote><h3 id="提升："><a href="#提升：" class="headerlink" title="提升："></a>提升：</h3><blockquote><p>某些形式的练习，可以让我们比其他人取得更好的成绩。因此，在这个学习阶段，我们需要通过一些有针对性的练习打磨技巧，从而提高技能水平。</p></blockquote><blockquote><p>学习需要积极反馈才能做到有效监控。学习的过程是一个需要付出努力且不断试错的过程，善于调整学习时机，做好情绪管理，始终把关注点放在精通专业技能这一角度上，精益求精指日可待。</p></blockquote><h3 id="实践："><a href="#实践：" class="headerlink" title="实践："></a>实践：</h3><blockquote><p>在这一阶段，我们在掌握了基础内容之后，需要把所学知识与技能运用到实践中去，借此充实我们的知识与技能。在实际应用中，要加深对知识与技能实际意义的理解。</p></blockquote><blockquote><p>判断一个学习者水平如何，就是要看他是否主动拓展自己的知识领域、是否有新想法。在这个过程中，将所学知识应用于实际，并始终保持创造性，才能保证知识的精进。</p></blockquote><h3 id="融合："><a href="#融合：" class="headerlink" title="融合："></a>融合：</h3><blockquote><p>在这一阶段，我们需要把所有掌握的知识与技能融会贯通，明白各个组成部分之间是如何有机结合在一起的。在学习目的方面，了解某一个具体细节或者一个步骤是不够的，我们需要知道这个细节或步骤如何与其他部分互动。</p></blockquote><blockquote><p>寻找知识的内在联系，发现知识背后的规律是学习的根本目的。在这个过程中，系统化思维是必不可少的，而构成系统化思维的因素也有很多，比如推论假设、实验验证、类比推理等。</p></blockquote><h3 id="反思："><a href="#反思：" class="headerlink" title="反思："></a>反思：</h3><blockquote><p>在学习过程中，我们很容易犯错误或者过度自信，所以我们需要回顾和反思，重新审视我们的理解，从反思学习过程的活动中有所收获。</p></blockquote><blockquote><p>知识的学习是一个永恒变化的过程。在这个过程中，我们需要学会回顾与反思，这是一种思维习惯，也是掌握专业技能的有效方法。温故而知新，才是推动知识更新迭代的终极法则。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这是一本学习如何学习的技能书，值得反复阅读和深入内化应用，这个时代最基础的底层技能就是学习能力，如果学习能力不行真的是跟不上时代，毫无竞争力，所以我们需要提高我们的学习能力，不断的打磨我们的学习方法和技巧,找到适合自己的学习方法。这本书中在不同的学习阶段提供了不同的学习方法和技巧以及在各个不同的阶段可能出现的问题需要注意的点。学习能力就是有一套使适用于自己完整的快速学习的过程方法。</p><p>就像最近读了几本书一样，在某些时刻犯下了只是想把书读完的错误，这是毫无意义的，学习就是需要寻找价值，如果没有价值感和意义感，读了就只是读了而已，在职场学习来说，在阅读前我们需要问自己为什么要阅读，想要解决什么问题，想要提升哪方面的能力？这本书讲的那个只是大体会是什么？和你有什么关联？<br>在阅读过程中我们需要不断的问自己这篇文章作者想表达什么？传递了什么知识？这个知识有什么用？合不合理？知识有哪些延伸？这个有哪些使用边界？来龙去脉是什么？等等。合上书本回头想一想，帮你自己更好的理解和掌握知识。</p><p>学习了这些知识，我们需要设定一个目标和行动计划去应用去融入你的实际生活，不断的练习直到深入理解和掌握，然后触类旁通知识关联应用。在知识应用过程中我们需要验证和记录反思，不要怕犯错，不断从错误中学习不断内化才能成为你的知识。</p><p>其实学习就是为了改变自己的思考或者行为方式，所以在学习过程中我们需要不断对这个思考方式进行思考，我们需要时间去慢思考，而不是一直都无法改变思考方式的快思考，不断的对标专家思考方式，看看我们的差距在哪里，学习他们的思考方式，刻意练习。</p><p>学习就是一项生产活动，就是会涉及很多思维活动，学习就是一个不断对自己提问，不断自我测验的过程，中间需要很多步骤和练习，所以学习就是需要个人努力。不论花费时间多少，只有自己努力学来的才是自己的。</p><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://i.loli.net/2019/06/12/5d005bef99ec617546.png" alt="有效学习.png"></p><hr><hr><p><strong>所有图片均来自网络</strong></p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 学习力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codesing Command failed signature too large to embed (size limitation of on-disk representation)</title>
      <link href="/signature-too-largeto-embed.html"/>
      <url>/signature-too-largeto-embed.html</url>
      
        <content type="html"><![CDATA[<h1 id="codesign-signature-too-large-to-embed-size-limitation-of-on-disk-representation"><a href="#codesign-signature-too-large-to-embed-size-limitation-of-on-disk-representation" class="headerlink" title="codesign : signature too large to embed (size limitation of on-disk representation)"></a>codesign : signature too large to embed (size limitation of on-disk representation)</h1><p>今天同事新增一个模块之后codesign写的签名脚本出现这个bug，网上搜索一圈两个解决方法</p><h2 id="–timestamp-none"><a href="#–timestamp-none" class="headerlink" title="–timestamp=none"></a>–timestamp=none</h2><p>codesign后面带上–timestamp=none 参数</p><h2 id="–signature-size"><a href="#–signature-size" class="headerlink" title="–signature-size"></a>–signature-size</h2><p>codesign后面带上–signature-size=13666 这个值设置大一点，具体设置需要设置多大跟进签名文件大小验证</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macosx </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《如何高效写作》</title>
      <link href="/ru-he-gao-xiao-xie-zuo.html"/>
      <url>/ru-he-gao-xiao-xie-zuo.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://images-cn.ssl-images-amazon.com/images/I/51ItRFApaCL.jpg" alt=""></p><hr><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>不管是工作还是生活中，需要“写”的地方越来越多，但我们真的会写、能写、写得好么？这本《如何高效写作》告诉我们，只要掌握写作的流程，每一步都目标清晰、达到标准，快速升级写作技能并不是难事。作者根据自己多年的经验，总结出一套简单、易上手的写作流程，经过“确定信息、分析读者、收集点子、写出概要、打草稿、反复推敲、精炼修改”这7步，就能流畅、轻松地写出好文章</p><h2 id="关于写作"><a href="#关于写作" class="headerlink" title="关于写作"></a>关于写作</h2><p>写作场合的不断增加，按理来说，对于写作的抗拒应该也会随之减少。但是，对于工作中的写作场合，例如，写方案、写设计书，或者是写企划书、报告书的时候，好像还是有很多人苦恼于“写不好”。写不好，也就是说如果没有办法运用文章很好地进行沟通会怎样呢？<strong>首先，会造成误解</strong>。就像是“这个邮件根本不是这个意思的，但却给对方带来了非常消极的影响”或者是“用邮件向项目成员发出指示，但对方却做出了与本意完全相反的理解”等情况。甚至还会出现这样的情况：给客户做的方案，客户却看不懂、理解不了；提交给领导的企划书通不过、得不到领导的认可；</p><h3 id="写作技能三要素"><a href="#写作技能三要素" class="headerlink" title="写作技能三要素"></a>写作技能三要素</h3><h4 id="表达方式的储备"><a href="#表达方式的储备" class="headerlink" title="表达方式的储备"></a>表达方式的储备</h4><p>也就是说如何把所想表达出来。例如词汇、修辞手法、有效的表达方式，等等。这些只能靠储备。</p><h4 id="基本技巧"><a href="#基本技巧" class="headerlink" title="基本技巧"></a>基本技巧</h4><p>写作技能的第二个要素就是“造句方法”，也就是“基本技巧”。大家也许有读到过，句子尽量简短、归纳法、演绎法等说法。基本技巧是必要的。例如，长的修饰语尽量相隔远一点，主语和谓语尽量靠得近一些，等等。没有这些基本技巧，就写不出易懂的文章。</p><h4 id="程序（运用能力）"><a href="#程序（运用能力）" class="headerlink" title="程序（运用能力）"></a>程序（运用能力）</h4><p>这些基本技巧只不过是零件,零件固然重要，但如果不知道如何使用这些零件，也就写不出完整的文章。在这里，就需要掌握第三个要素，也就是“程序（运用能力）”，即归纳想法并将之精练成文章的过程。</p><h3 id="写作技能"><a href="#写作技能" class="headerlink" title="写作技能"></a>写作技能</h3><h4 id="技能＝技巧＋程序（运用能力）"><a href="#技能＝技巧＋程序（运用能力）" class="headerlink" title="技能＝技巧＋程序（运用能力）"></a>技能＝技巧＋程序（运用能力）</h4><p>很多技能提升的书中会有“请这样做”等关于技巧的描写，但却很少会写“如何使用它”“在什么样的文脉中可以使用它”，因此并不怎么派得上用场。其实，这就是误认为“技能=技巧”的结果。光是收集了大量的技巧并不能起到多大作用，技巧和程序（运用能力）两者缺一不可。</p><h2 id="写作的目标"><a href="#写作的目标" class="headerlink" title="写作的目标"></a>写作的目标</h2><p>所有文章都是有目标的</p><h3 id="获取共识"><a href="#获取共识" class="headerlink" title="获取共识"></a>获取共识</h3><p>提供信息，确立读者和作者之间关于主题的共识。要确立共识，理解读者是很重要的。</p><h3 id="调动预期反应"><a href="#调动预期反应" class="headerlink" title="调动预期反应"></a>调动预期反应</h3><p>所有文章都是为了调动读者的反应而存在的。对提问的回答、获取支援、批准计划等。</p><h3 id="留下预期印象"><a href="#留下预期印象" class="headerlink" title="留下预期印象"></a>留下预期印象</h3><p>即使调动了预期反应，但如果破坏了印象则会给商务活动带来恶劣影响。必须站在读者的角度思考，读者会有怎样的印象。</p><h2 id="写作的程序"><a href="#写作的程序" class="headerlink" title="写作的程序"></a>写作的程序</h2><h3 id="确定信息"><a href="#确定信息" class="headerlink" title="确定信息"></a>确定信息</h3><p>所有写作的文章都是有目标的，目标是解决或者说明什么问题的？那么我们就需要去确认到底是解决什么问题？解决问题就是现状有什么问题，然后通过什么步骤解决可以达到预期的效果</p><h3 id="分析读者"><a href="#分析读者" class="headerlink" title="分析读者"></a>分析读者</h3><p>为什么必须分析读者呢？原因在于，所有沟通交流的质量，都是由交流的对象来评价的，文章也是一样的。所谓交流，只是自己传递出信息是不成立的，必须要有接收信息的人，而交流的质量，就是由接收信息的人来评价的。信息是否得到了有效的传递，是由接收的人来判断的，因此，了解接收信息的人、了解读者，是非常重要的。<br>根据读者的不同，文章的要素也会随之变化</p><h4 id="读者是谁？他站在什么样的立场？"><a href="#读者是谁？他站在什么样的立场？" class="headerlink" title="读者是谁？他站在什么样的立场？"></a>读者是谁？他站在什么样的立场？</h4><p>读者是谁？<br>是一个人，还是几个人？<br>读者站在什么样的立场，负担着怎样的责任？</p><h4 id="读者对背景、事情经过等情况掌握了多少？"><a href="#读者对背景、事情经过等情况掌握了多少？" class="headerlink" title="读者对背景、事情经过等情况掌握了多少？"></a>读者对背景、事情经过等情况掌握了多少？</h4><p>对于这个主题，读者对其背景、事情经过了解多少？<br>读者拥有什么样的背景知识？</p><h4 id="读者在担心什么？"><a href="#读者在担心什么？" class="headerlink" title="读者在担心什么？"></a>读者在担心什么？</h4><p>读者拥有什么样的价值观？<br>担心些什么问题？<br>读者的思考倾向是怎样的？</p><h4 id="读者喜欢什么样的表达方式、与作者的距离是怎样的？"><a href="#读者喜欢什么样的表达方式、与作者的距离是怎样的？" class="headerlink" title="读者喜欢什么样的表达方式、与作者的距离是怎样的？"></a>读者喜欢什么样的表达方式、与作者的距离是怎样的？</h4><p>读者经常使用的表达方式（说话方式、写作方式）是什么？<br>读者了解我吗？<br>了解的话，与我的距离是近还是远呢？</p><h3 id="收集点子"><a href="#收集点子" class="headerlink" title="收集点子"></a>收集点子</h3><p>点子指的就是想法，或者也可以说是灵机一动。我们在说到点子的时候，都觉得它应该是一个创新的、崭新的东西，但其实它并没有那么高深，它就是一个“想法”。即使是头脑中浮现出来的一些东西，这样的程度也是没有问题的，重要的是“毫不迟疑地想出来”。总之，想出来。之后再来进行归纳筛选。<br>收集点子有以下几种方法：<br>（1）一条一条地写下来；<br>（2）写在便笺上；<br>（3）在白纸上自由地写下来；<br>（4）使用大纲编辑器（Outline Editor）；<br>（5）把书当成点子抽屉的把手；<br>（6）储备想法。</p><h3 id="写概要"><a href="#写概要" class="headerlink" title="写概要"></a>写概要</h3><p>概要指的就是“轮廓”。在文章中也叫“架构”。我之前说的“在写作前要进行思考”，这就是思考的主要部分了。思考把什么样的内容用什么样的流程、顺序进行传递。也就是说，确定说话的顺序</p><h4 id="概要的框架1（报告型）"><a href="#概要的框架1（报告型）" class="headerlink" title="概要的框架1（报告型）"></a>概要的框架1（报告型）</h4><p><img src="https://i.loli.net/2019/06/05/5cf77e353ac5821198.png" alt=""></p><h4 id="概要的框架2（要求型）"><a href="#概要的框架2（要求型）" class="headerlink" title="概要的框架2（要求型）"></a>概要的框架2（要求型）</h4><p><img src="https://i.loli.net/2019/06/05/5cf77e353bc9534521.png" alt=""></p><h4 id="通用型概要"><a href="#通用型概要" class="headerlink" title="通用型概要"></a>通用型概要</h4><p><img src="https://i.loli.net/2019/06/05/5cf77e351ec5e78418.png" alt=""></p><h3 id="写草稿"><a href="#写草稿" class="headerlink" title="写草稿"></a>写草稿</h3><p>这个实际上指的是，以之前说明的东西为基础，试着写下来看看。可以用手写，习惯了用电脑的人，也可以用电脑来写。把思考的东西先写出个大概，然后再推敲与修改</p><h3 id="推敲与修改"><a href="#推敲与修改" class="headerlink" title="推敲与修改"></a>推敲与修改</h3><p>与主题无关的信息都是噪声。在一个段落中只讲一个主题。为了让读者清楚地知道“这个段落讲的是这个事情”，只能在段落中放进一个主题。</p><h4 id="写文章的三个基本原则"><a href="#写文章的三个基本原则" class="headerlink" title="写文章的三个基本原则"></a>写文章的三个基本原则</h4><h5 id="一个词／一个意思"><a href="#一个词／一个意思" class="headerlink" title="一个词／一个意思"></a>一个词／一个意思</h5><p>选择读者能够理解的词语<br>选择确定为单一语义的词语</p><h5 id="一个句子／一个点子"><a href="#一个句子／一个点子" class="headerlink" title="一个句子／一个点子"></a>一个句子／一个点子</h5><p>一个句子中，只表达一个思想<br>不要使用不作为转接连词的“ga”</p><h5 id="一个段落／一个主题"><a href="#一个段落／一个主题" class="headerlink" title="一个段落／一个主题"></a>一个段落／一个主题</h5><p>在一个段落中只涉及一个主题<br>不要写进与主题无关的信息</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这本书是偶然看到的，而且是一位软件工程师写的，顿时激起了兴趣想看看，花了一个小时半小时一口气看完了，感觉非常有指导意义，大部分人写作的时候，花了大部分时间在70%的时间在写作，30%的时间在思考写作的程序，但是作者认为应到花70%时间去思考写作程序，30%时间用来写作。这70%的时间用来确定信息，分析读者，收集点子，写概要等程序上。不站在读者的基础上写出来的文章很难有吸引力。因此，在付诸实际行动前，事先明确意图，并将意图具体化、有形化是非常重要的。设计——写作前的思考。写文章前，先想好要写什么、要怎么写、要怎样来表达思想，这比什么都重要。书本很薄但是非常详细的描述了写作的框架流程和步骤，日后在写作工程中可以按照这个流程来写，不是说要写的多么漂亮荡气回肠，至少表达的信息和逻辑清晰且准确。其中作者也提到他的写作技巧是通过写博客写书一步步总结出来的。关于写博客作者这样说的</p><h3 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h3><p>写博客实际上就是“输出”的过程。通过这件事，持续地将“自我所得的感受和经验化为法则”、将“抽象化的原理化为条理清晰的原则进而内化于心”，并将其“传递给他人”“以文章的形式留下痕迹”。在这样重复的实践中，逐渐形成了自己的写作方式。<br>具体的流程如下：<br>（1）用一句话把想说的写下来；<br>（2）把想法分点写下来；<br>（3）构建故事框架；<br>（4）加入血肉；<br>（5）重读一次进行精练</p><p>就像作者所说 不试着写下来也就没有办法进行精练。不写下来就等于0，我们没有办法对0进行精练。因此，笔耕不辍是非常重要的，写完扔掉，然后再写。</p><hr><p><strong>所有图片均来自网络</strong></p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 学习力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《练习的心态》--如何培养耐心、专注和自律</title>
      <link href="/lian-xi-de-xin-tai.html"/>
      <url>/lian-xi-de-xin-tai.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://images-cn.ssl-images-amazon.com/images/I/51nbvBFk42L._SX341_BO1,204,203,200_.jpg" alt=""></p><hr><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>很薄的一本书，作者总结他学习技能的时的一套练习的方法和心态，解释了什么是练习,练习的心态，然后怎么去掌握这个练习的心态，以期达到更好的练习效果</p><h2 id="什么是正确练习"><a href="#什么是正确练习" class="headerlink" title="什么是正确练习"></a>什么是正确练习</h2><p>所谓练习，就是怀着实现某个特定目标的有意的意识和意图，来反复参加某项活动。<br>通过将注意力停留在过程之中，我们做到了收放自如，同时，也熟练掌握了自己致力于从事的任何一项活动。这就是正确练习的本质。</p><h2 id="为什么要练习"><a href="#为什么要练习" class="headerlink" title="为什么要练习"></a>为什么要练习</h2><p><strong>人生中值得去做的每一件事情，都需要练习</strong>。事实上，人生本身只不过是一个漫长的练习过程，是一种永无止境地优化各种行为的努力。当你弄懂了练习的正确原理，学习某些新事物的任务将变成一种没有压力的愉快与平和的体验，变成一个适合你生活中各种领域的过程，并且促成你对生活中所有的艰辛与痛苦采用合适的视角来观察。</p><h2 id="如何掌握"><a href="#如何掌握" class="headerlink" title="如何掌握"></a>如何掌握</h2><h3 id="以过程为导向，不以结果为导向"><a href="#以过程为导向，不以结果为导向" class="headerlink" title="以过程为导向，不以结果为导向"></a>以过程为导向，不以结果为导向</h3><ul><li>让自己始终以过程为导向。</li><li>重点关注当前。</li><li>将过程确定为目标，并且运用总目标作为船舵，以指引自己的努力。</li><li>对自己想要做到的事情刻意地训练，带着意图训练，并且自始至终清醒地知道那种意图。<br><strong>做好了这些，你将消除源于以结果为导向、受结果驱动的思维的那些判断与情绪。</strong></li></ul><h3 id="关键是视角"><a href="#关键是视角" class="headerlink" title="关键是视角"></a>关键是视角</h3><p>当你始终知道你的意图，以便着重关注当前这一刻时，会很容易发现自己什么时候没有采用这种视角。在那些时候，你马上开始判断自己做了什么、做得怎么样，然后体验到不耐烦和厌倦。你发现自己处在这些时刻时，只需轻轻地提醒自己，你已经和当前脱节了。这样一来，你便已经开始塑造内心的“观察者”，事实将证明，这对你的自我指引十分重要。</p><blockquote><p>当我们试图理解自己以及我们对人生中各种努力的痛苦挣扎时，可以通过观察一朵鲜花来找到平和。问你自己：一朵鲜花的生命，从撒下种子到完全盛开，在什么时候可以达到完美？<br>我希望你已经知道了下面这个答案：它自始至终都是完美的。它在种子落到土壤中的那一刻是完美的，不论在成长的哪个阶段的哪个时刻，它都是完美的。它在做一颗种子的时候是完美的，那时，人们将它种到地里。在那一刻，它就是它应当成为的东西：种子。它当时没有那些鲜艳绽放的花朵，并不意味着它就不是一颗好的花种。当这颗种子开始发芽，钻出地面时，它并不会因为只是显现了单纯的绿色而不完美。在它生长的每个阶段，从最初的种子到怒放的鲜花，以及最终凋谢、回归大地，它都是那朵鲜花的生命的各种特殊阶段，都是完美的。一朵鲜花，首先必定是一粒种子，而且，一定要有水、土壤、阳光的滋润，还要历经时间的沉淀，它才能够长成一朵最终怒放的花朵。所有这些要素，都要在时间的沉淀之中共同努力，才能催生美丽的鲜花。</p></blockquote><h3 id="4“S”方法"><a href="#4“S”方法" class="headerlink" title="4“S”方法"></a>4“S”方法</h3><p>所谓的4“S”方法，是指四个以“S”开头的英文字母，它们是：简化（simplify）、细分（small）、缩短（short）和放慢（slow）。你将发现，这些概念相互之间存在着密切的关联，并且经常相互之间来回流动。在你提升自己对练习的心态的控制过程中，重要的是尽可能容易地将思绪停留在过程之中。而这四种方法的每一种都是基本的和直接简明的，可以帮助你将思绪停留在过程之中.</p><h3 id="平静与DOC方法"><a href="#平静与DOC方法" class="headerlink" title="平静与DOC方法"></a>平静与DOC方法</h3><h4 id="平静"><a href="#平静" class="headerlink" title="平静"></a>平静</h4><p>平静的定义是镇定与平和。毫无疑问，它看起来是追求人生幸福的必需素质。平静是一种值得努力去追求的美德。我们怎样致力于平静？怎样将这种品质融入我们对人生的体验之中？怎样做到保持平静？拥有这种美德的人们的标志是，他们坦然面对日常生活中每时每刻的起起落落。对这些人来说，各种各样的事情似乎不会让他们感到烦恼。为什么这样？因为平静来自客观。客观，平息了我们脑海中的内心独白。</p><h4 id="DOC方法"><a href="#DOC方法" class="headerlink" title="DOC方法"></a>DOC方法</h4><ul><li>Do 做—–正在阅读也是做事情</li><li>Observe 观察— 观察自己是否专注于当前的事情，是否带有了其他情绪</li><li>Correct 纠正—及时客观的纠正自己的行为和情绪</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>职场中各式各样的技能我们都需要学习，没有好的学习方法和一定量练习没有办法掌握，本书告诉我们在练习技能时的以过程为导向，不以结果为导向，以做-观察-纠正的方式及时调整自己的状态，专注于当下，专注于当前的任务。我们常常感到焦虑，也是因为我们无法专注于当前的事情，总是让情绪左右了自我，然后练习的的效果越来越差，从而越来越焦虑，就像自己在读书的时候不要老是盯着有没有读完或者学习完毕，应该专注于学习本身，专注于学到了多少有用的知识。不要想着一口吃一个胖子，慢下来一步一个脚印，专注当前任务的练习，以达到以慢为快的效果。</p><hr><p><strong>所有图片均来自网络</strong></p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 学习力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《复盘对过去的事情做思考演练》</title>
      <link href="/fu-pan-dui-guo-qu-de-shi-qing-zuo-si-kao-yan-lian.html"/>
      <url>/fu-pan-dui-guo-qu-de-shi-qing-zuo-si-kao-yan-lian.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/06/03/5cf521563d00026575.jpg" alt=""></p><hr><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本书从系统介绍了复盘，从为什么复盘,复盘的好处,复盘的方法步骤，复盘的条件，以及需要防范的地方等多个方面让你轻而易举的了解复盘以及怎么使用它。</p><h2 id="什么是复盘"><a href="#什么是复盘" class="headerlink" title="什么是复盘"></a>什么是复盘</h2><p>“复盘”原是围棋术语，本意是对弈者下完一盘棋之后，重新在棋盘上把对弈过程摆一遍，看看哪些地方下得好，哪些下得不好，哪些地方可以有不同甚至是更好的下法等。 这个把对弈过程还原并且进行研讨、分析的过程，就是复盘。就是在头脑中对过去所做的事情重新“过”一遍。它通过对过去的思维和行为进行回顾、反思和探究，实现能力的提升</p><h3 id="与总结的区别"><a href="#与总结的区别" class="headerlink" title="与总结的区别"></a>与总结的区别</h3><p>复盘的关键是推演，通过推演这个动作，复盘就不仅仅是对过去的复制呈现，而是可以对各种可能性进行探讨。正是因为推演这个动作，将复盘与总结从本质上区别开来。复盘不同于总结，就像沙盘不同于计划一样。</p><h2 id="为什么要复盘"><a href="#为什么要复盘" class="headerlink" title="为什么要复盘"></a>为什么要复盘</h2><p>复盘可以帮助我们避免犯同样的错误，固化流程、校验方向，认清问题背后的问题，发现和产生新的想法与知识。除了提升能力之外，它还对提升个人品性和组织性格有巨大作用。三思而后行，一个习惯复盘的个人和企业，品性会更加低调和踏实，避免浮躁和冒进带来的危害</p><h2 id="复盘分类"><a href="#复盘分类" class="headerlink" title="复盘分类"></a>复盘分类</h2><h3 id="自我复盘"><a href="#自我复盘" class="headerlink" title="自我复盘"></a>自我复盘</h3><p>自我复盘是一种最简单、最具操作性的复盘方式，它不受时间和空间等外在条件的限制，也不受事情本身进展的约束，只要我们自己愿意，只要形成习惯，就可以随时、随地、随意地进行复盘。一闪念，一回想，一反思，一对照，一总结，都可以是复盘。而它也不否定那种正式的复盘，个人依旧可以找一个宁静的空间，对某件事情进行完整的复盘</p><h3 id="团队复盘"><a href="#团队复盘" class="headerlink" title="团队复盘"></a>团队复盘</h3><p> 在一个好的团队复盘文化的笼罩下，遵循一定的复盘流程，每个人都承担好合适的角色，一个成功的团队复盘是可以期待的</p><h3 id="复盘他人"><a href="#复盘他人" class="headerlink" title="复盘他人"></a>复盘他人</h3><p>看谁哪件事情做得好，或者做得差，自己试着进行复盘，找出做得好或者差的原因，并找出做得好的关键和规律，以便自己做的时候，能够有一个好的结果。这可以说是用他山之石，磨自己的刀。    </p><h4 id="纯粹复他人的盘"><a href="#纯粹复他人的盘" class="headerlink" title="纯粹复他人的盘"></a>纯粹复他人的盘</h4><p>看谁哪件事情做得好，或者做得差，自己试着进行复盘，找出做得好或者差的原因，并找出做得好的关键和规律，以便自己做的时候，能够有一个好的结果。这可以说是用他山之石，磨自己的刀。</p><h3 id="对比复盘"><a href="#对比复盘" class="headerlink" title="对比复盘"></a>对比复盘</h3><p>就是自己做了一件事情，对手也做了件差不多的事情，两者对比复盘，比较下自己和对手不同的做事思维、不同的着力点，别人哪里比自己做得好，哪里自己做得比别人好，最终效果有什么差别，为什么他人将着力点放在某个地方而不是其他地方。通过这样的对比，可以找出差距，发现行业的关键成功要素，得到对消费者更深层次的理解，透彻把握行业的规律，最终可以获得关于行业和业务的“直觉和本能”。</p><h2 id="复盘中的三种角色"><a href="#复盘中的三种角色" class="headerlink" title="复盘中的三种角色"></a>复盘中的三种角色</h2><ul><li>一种职能是引导，保证复盘按照正确的流程进行</li><li>一种职能是设问，通过不停地追问来引发思考，进而得出结论</li><li>一种职能是叙述，对事情的发展过程进行情境重现，对别人提出的问题进行回答，在解答疑问的过程中去除迷思，接近规律</li></ul><h2 id="复盘的两种方法"><a href="#复盘的两种方法" class="headerlink" title="复盘的两种方法"></a>复盘的两种方法</h2><h3 id="情境重现法"><a href="#情境重现法" class="headerlink" title="情境重现法"></a>情境重现法</h3><p> 情境重现，除了重现当时的行为外，重要的就是要重现当时的信息场（流）、思维场（流）和情绪场（流）</p><ul><li>信息场，对应着“要真实，完整呈现复盘事件”。对于信息场的描述，必须遵从真实、全面、完整三条标准</li><li>思维场，对应着“要超脱，站在自身之外看复盘”。勇敢袒露自己的所思所想，不担心人笑我幼稚，也不担心人说没逻辑</li><li>情绪场，对应着“要虚心，放空自己进行复盘”。说的只是当时的情绪，要像一个旁观者一样，看待当时的情绪，而不能将当时的情绪带入到现在的复盘中</li></ul><h3 id="关键点法"><a href="#关键点法" class="headerlink" title="关键点法"></a>关键点法</h3><h4 id="正向关键点法则"><a href="#正向关键点法则" class="headerlink" title="正向关键点法则"></a>正向关键点法则</h4><p>正向关键点法则是说在复盘的过程中，对事件按照时间顺序或者事件内容进行考虑，寻找关键节点，然后围绕关键节点进行重现和思考的复盘方法</p><h4 id="逆向关键点法则"><a href="#逆向关键点法则" class="headerlink" title="逆向关键点法则"></a>逆向关键点法则</h4><p>逆向关键点法则是说在复盘的过程中，根据以前的经验，先行确定事件成功必须满足的关键成功因素，然后围绕关键成功因素进行复盘，看看自己和他人所做的事情，哪些因素做得比较好，哪些因素做得不够好，究竟哪些因素最终导致了事情的成功或者失败。然后针对复盘得出的结论，进行弥补和强化，最终赢得下一次事件的成功</p><h2 id="复盘的内容"><a href="#复盘的内容" class="headerlink" title="复盘的内容"></a>复盘的内容</h2><ul><li>现在情况如何</li><li>当初是怎么决定的</li><li>让我们再审视下思考的前提</li></ul><h2 id="复盘的步骤"><a href="#复盘的步骤" class="headerlink" title="复盘的步骤"></a>复盘的步骤</h2><ul><li>回顾目标</li><li>结果比对</li><li>叙述过程</li><li>自我剖析</li><li>众人设问</li><li>总结规律</li><li>案例佐证</li><li>复盘归档</li></ul><h2 id="如何评判复盘结论是否到位"><a href="#如何评判复盘结论是否到位" class="headerlink" title="如何评判复盘结论是否到位"></a>如何评判复盘结论是否到位</h2><ul><li>复盘结论的落脚点是否在偶发性的因素上；</li><li>复盘结论是指向人还是指向事</li><li>复盘结论的得出，是否有过3次以上的连续的why或者why not的追问</li><li>是否是经过交叉验证得出的结论</li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><h3 id="避免五个误区"><a href="#避免五个误区" class="headerlink" title="避免五个误区"></a>避免五个误区</h3><ul><li>自己骗自己，不能无情剖析自己</li><li>流于形式，走过场；</li><li>追究责任，变成批斗会</li><li>强调客观，推卸责任</li><li>太急于得出结论——形成了好的复盘文化</li></ul><h3 id="倡导“5求”"><a href="#倡导“5求”" class="headerlink" title="倡导“5求”"></a>倡导“5求”</h3><ul><li>求真（重在实事求是）</li><li>求实（重在内容和找原因）</li><li>求学（重在改进和提高）</li><li>求内（重在反思和自我剖析）</li><li>求道（重在找到本质和规律）</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>人学习有三种途径，一种是自书本上学前人的知识，一种是自身边的人身上学其先进，一种是向自己过去的经验和教训学习。其中最重要的学习途径是向自己学习，尤其是对于成大事者，你的所作所为越是开天辟地的创新越无人可以学习，只能向自己学习。向自己学习的最佳方法就是复盘，复盘中，要坦诚，不要装。没弄明白的地方要弄明白，不能揣着糊涂装明白，那样对自己有害，对团队有害，对成长有害。复盘需要应用到个人生活习惯中去形成个人的反思日记配合个人日记做记录能够起到更好的效果。</p><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://i.loli.net/2019/06/03/5cf51f42c81a544676.png" alt=""></p><hr><p><strong>所有图片均来自网络</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 学习力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《书都不会读 你还想成功》</title>
      <link href="/shu-du-bu-hui-du-ni-huan-xiang-cheng-gong.html"/>
      <url>/shu-du-bu-hui-du-ni-huan-xiang-cheng-gong.html</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://i.loli.net/2019/06/03/5cf4e60d4585f93382.jpg" alt=""></h2><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>通过讲了一个怎么读书获取成功的故事，整本书把读书大体分为四个阶段，第一阶段读书兴趣和技巧培养阶段，第二阶段 基础定向阅读：专业能力提升阶段，第三阶段:培养成功者思维，第四阶段：丰富精神世界</p><h2 id="第一阶段基础定向阅读-读书兴趣和技巧培养阶段"><a href="#第一阶段基础定向阅读-读书兴趣和技巧培养阶段" class="headerlink" title="第一阶段基础定向阅读:读书兴趣和技巧培养阶段"></a>第一阶段基础定向阅读:读书兴趣和技巧培养阶段</h2><p>这一阶段定个目标100天都33本书，可以是畅销书、故事、传记等只要是自己感兴趣的书籍都可以，目的是培养自己阅读习惯和阅读技巧只有养成习惯之后你才不会觉得读书是那么难，不需要消耗你的意志力，才能坚持长期读书。</p><h3 id="在读书习惯养成过程中你会遇的问题？"><a href="#在读书习惯养成过程中你会遇的问题？" class="headerlink" title="在读书习惯养成过程中你会遇的问题？"></a>在读书习惯养成过程中你会遇的问题？</h3><h4 id="创造读书的时间"><a href="#创造读书的时间" class="headerlink" title="创造读书的时间"></a>创造读书的时间</h4><p>书中提到读书就行一天三顿饭，零散的时间只要你好好利用会比你想象的要多。时间就行海绵一样挤挤总是有的。</p><h4 id="克服倦怠"><a href="#克服倦怠" class="headerlink" title="克服倦怠"></a>克服倦怠</h4><p>培养习惯的过程中肯定会遇到阻力，关键是你在明白和知道这个阻力之后的行动，作者提示可以去见去见指导老师、去见书友、去图书馆等方法来明确自己读书的初衷，重新迸发激情和意志力。习惯的养成可以看看看看《习惯的力量》、《微习惯》等书籍了解和建立自己的习惯。就像书中所说“倦怠期有多长，程度多深并不重要，重要的是看你克服它的决心有多大”</p><h3 id="阅读技巧"><a href="#阅读技巧" class="headerlink" title="阅读技巧"></a>阅读技巧</h3><p>读书就是学习、思考、实践从而改变自己的思考和行为方式，100天读33本，如果的读书的读的太慢是完不成任务的，读的太快了，知识没有吸收。那读书就没有任何意义。所以需要一定的阅读技巧具体的阅读技巧可以参考《如何快速阅读一本书》等相关读书技巧的书籍来提升自己的快速读书技巧，主动阅读的效果永远好于被动阅读的效果，越主动效果越好。</p><h2 id="第二阶段基础定向阅读-专业能力提升阶段"><a href="#第二阶段基础定向阅读-专业能力提升阶段" class="headerlink" title="第二阶段基础定向阅读:专业能力提升阶段"></a>第二阶段基础定向阅读:专业能力提升阶段</h2><p>读书就是为了改变和提升自己，定下一年读100本关于自身专业的书籍的目标，来提高自己在专业方面的能力，通过学习书中的方法和经验争取做专业上的第一名。<br>书中提到：你知道红皇后效应（Red Queen Effect）吗？若沿逆行的滚梯往上走，即便是跑步前进，如 果速度不够快，结果还是停在原地。红皇后效应就是指这个现象。也就是说，如果自己的速度 与周边环境变化一致，就只能是在原地踏步，无论如何都无法向前迈进。红皇后效应出自因 《爱丽丝梦游仙境》一书而闻名于世的作家刘易斯·卡罗尔（Lewis Carroll）的另一本小说《爱 丽丝魔境之旅》。红皇后是小说中的女王，也是国际象棋中的棋子之一，是奔跑高手。她对不 论怎么跑也跑不出去一步的爱丽丝说：为了保住自己的位置，就要用全力奔跑；要想去别的地 方，就要用比现在至少快两倍的速度奔跑。”<br>要想快速超越别人，那么先了解周围出色的同事或者专业领域的大牛读什么书，然后加倍努力学习才能实现弯道超车。</p><h3 id="关于选书-THX读书法"><a href="#关于选书-THX读书法" class="headerlink" title="关于选书-THX读书法"></a>关于选书-THX读书法</h3><p>从自己业务领域中的经典或基本得到好评的书开始，先读10本左右，在读完一本书的时候就会想到下一本要读的书了，一本书定会唤来另一本书，这个主题的书是自己喜欢的，就一定会再寻找和这个主题相同或相似的书。这会找到你要读的100本书 —这就是T形读书法，读书读到一定深度自然而然会产生新的想法，而后就过渡到别的领域或书籍里去，从而形成另一个T字，最终经过在头脑里的整合，当两个T字连在一起，就会形成一个H，这便是H型读书法。把几个T混搭在一起就是X形读书法</p><h2 id="第三阶段加强定向阅读-培养成功者思维"><a href="#第三阶段加强定向阅读-培养成功者思维" class="headerlink" title="第三阶段加强定向阅读:培养成功者思维"></a>第三阶段加强定向阅读:培养成功者思维</h2><p>改变自己的思维方式。需要拥有的不是受公司束缚的普通职员的思路，而是公司经营者的思路。应该让自己真正具备领军人物的素质。要想如此，只能通过读书来改变，没有别的办法。想要成功仅仅通过第二阶段提升专业能力是很难做到的，成功者不仅仅有过硬的专业知识，而且具有成功者的思维模式，改变你的思维模式，培养成功者的思维模式是迈向成功的重要一步，那么就定下一个1年365读本书目标去实现:<br>首先读100本有关当代成功CEO的书，不管他是东方的还是西方的。<br>其次读100本类似塞缪尔·斯迈尔斯的《自我拯救》类自我启迪的书，当然不是平时常见的可以轻松阅读的那些书<br>最后再读165本培养领导才能的书，包括记述伟大人物的传记、自传和评传。</p><h2 id="第四阶段深层定向阅读-成为领军人物"><a href="#第四阶段深层定向阅读-成为领军人物" class="headerlink" title="第四阶段深层定向阅读:成为领军人物"></a>第四阶段深层定向阅读:成为领军人物</h2><p>通过阅读人文古典书籍使自己成为领军人物。这也是我们追求和向往的阶段。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本书讲述的是如何通过读书改变人生这样一则故事告诉我们，只有通过读书去改变和提升自己才能获取自己想要的成功。任何时候起步都不晚，关键在于行动，不要与现实妥协，不要认为自己能力有限，而要以任何梦想都可以实现的心态，以炽热而紧迫的心情去读书。读书在阅读之外重在思考和实践。那就开始行动吧。</p><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://i.loli.net/2019/06/03/5cf4e54b643fe43814.png" alt=""></p><hr><p><strong>所有图片均来自网络</strong></p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 学习力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《好好学习:个人知识管理精进指南》</title>
      <link href="/hao-hao-xue-xi-ge-ren-zhi-shi-guan-li-jing-jin-zhi-nan.html"/>
      <url>/hao-hao-xue-xi-ge-ren-zhi-shi-guan-li-jing-jin-zhi-nan.html</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a><img src="http://s6.sinaimg.cn/orignal/001q8muLzy7d55opnKd65" alt=""></h2><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p> 互联网时代，大部分人对知识是有焦虑的，在信息海量的时代，迷茫的会越来越多，被动的填充式学习只会越来越焦虑，所以我们应该拼什么，作者认为拼的是知识深度构建认知优势，如何提升我们的认知深度？首先深度的认知能力是什么：在分析问题的时候，能够跳出问题本身思考更普遍的情况；在寻求答案的时候，能够根据理由可信度判断是否接受这个结论。理解了什么是深度认知，让我们再进一步思考：通过深度认知得出结论，往往能解释相似情境中的很多问题。在这些结论中，有些结论经过了更为广泛长期的验证，也在更普遍的领域具有指导意义和应用价值。那么，这些结论就是我们说的临界知识。<br>        <strong>所以提升我们的认知深度就需要掌握更多的临界知识</strong><br>        作者通过这个事情引出了临界知识这个概念，那我们用黄金思维圈分析一下这个知识：what 临界知识是什么？ why为什么要掌握？how 怎么学习掌握？</p><h2 id="what-临界知识是什么"><a href="#what-临界知识是什么" class="headerlink" title="what 临界知识是什么"></a>what 临界知识是什么</h2><p><strong>临界知识是世间万事万物最本质的东西，是事物的底层规律。各个学科和领域的临界知识需要打通，在解决问题的时候，方可厚积薄发，从本质上将问题解决</strong>。</p><h2 id="why-为什么要掌握"><a href="#why-为什么要掌握" class="headerlink" title="why 为什么要掌握"></a>why 为什么要掌握</h2><ul><li>我们一生就需要学习三个级别的课程：<br>（1）公共基础课：执行能力；<br>（2）专业必修课：专业能力；<br>（3）通用必修课：结构能力。<br>而通用必修课，就是要掌握临界知识，认知事物更加底层的结构与规律<ul><li>为什么大多数人的学习层次上不去？<br>提高学习效率，可能是每个读书人都在追求的。可是能不能很好地做到，就是另一码事了，我们常常把知识学习之后，自认为我们知道了.但是很少能做到知行合一</li><li>想要提高学习效率就需要：<br><strong>升级读书方法:知识之间建立联系搭建自己的知识体系 这就需要学通用必修课：结构能力，花大时间在临界知识上，能让你读书事半功倍，提升认知深度</strong></li></ul></li></ul><h2 id="how-怎么掌握"><a href="#how-怎么掌握" class="headerlink" title="how 怎么掌握"></a>how 怎么掌握</h2><h3 id="怎么发现"><a href="#怎么发现" class="headerlink" title="怎么发现"></a>怎么发现</h3><ul><li>1.从自己感兴趣的领域入手，学习这个学科的重要知识</li><li>2.找到最重要的知识和原理的原始出处 </li><li>3.尝试用更加基本的原理来解释这个知识 </li><li>4.没有解释的时候，想办法寻找或者自己创造一个假设，并验证 </li></ul><h3 id="怎么学习"><a href="#怎么学习" class="headerlink" title="怎么学习"></a>怎么学习</h3><h4 id="心态"><a href="#心态" class="headerlink" title="心态"></a>心态</h4><h5 id="1、绿灯思维"><a href="#1、绿灯思维" class="headerlink" title="1、绿灯思维"></a>1、绿灯思维</h5><p>遇到新观点或不同的意见时，第一反应是：哇，这个观点一定有用，我应该怎么用它来帮助自己呢？避免红灯思维</p><h5 id="2、以慢为快"><a href="#2、以慢为快" class="headerlink" title="2、以慢为快"></a>2、以慢为快</h5><p>把慢功夫花在真问题<br>二八法则 把80%的时间，花在20%的重要问题上面 </p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><h5 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h5><p>反思不是总结，至少两者的侧重点非常不同。总结是对结果的好坏进行分析；而反思是对产生结果的<br>原因进行分析。或者，换个说法：反思的实质是对假设进行校正<br>从应用的角度看：<br>做事的顺序：做出假设——→采取行动——→产生结果<br>反思的顺序：观察结果（现象）——→研究原先假设——→反思校正假设</p><ul><li><p>反思的价值</p><ul><li>反思帮助我们发现知识的误区：跳跃性假设</li><li>反思可以促进已有知识产生新知识</li><li>反思可以督促我们检查学到的新知识是否用了起来<ul><li>对标法<ul><li>每日反思对标，其实是一个“打卡”的过程<br>  记录每天对标的结果，让我们能够看到自己的进步，从而更加积极地坚持反思、提升自我，这是一个正反馈的过程。因此，坚持对标记录，能够通过正反馈，加速习惯的养成。</li><li>每天反思对标同样的内容，是一个自我催眠的过程<br>就像心理学中讲的，我们可以通过自说自话来与潜意识对话，影响我们的思考和认知。</li><li>参考现代企业管理中“对标管理”的方法，我们也可以把这个对标的过程标准化为“对标——对表——对照”三个步骤，让反思日记在对表环节，更加精细和易于比较</li></ul></li></ul></li></ul></li><li><p>训练反思能力的方法</p><ul><li>从小事反思,深入突破<ul><li>由小及大</li><li>由点及面</li></ul></li><li>生活案例化</li><li>培养记反思日记的习惯</li></ul></li></ul><h5 id="以教为学"><a href="#以教为学" class="headerlink" title="以教为学"></a>以教为学</h5><ul><li>价值<ul><li>第一，因为要教别人，就会督促自己发现知识阻塞，进一步打通已有知识</li><li>第二，教别人的过程，是一个强化记忆和认识的过程。</li><li>第三，教别人之后，别人提出疑问、质疑和新想法，会增强我们的认识。</li></ul></li><li>费曼技巧</li></ul><h5 id="刻意练习"><a href="#刻意练习" class="headerlink" title="刻意练习"></a>刻意练习</h5><ul><li>对基本核心知识划小圈</li><li>将基本知识组合成更大的能力单元</li><li>在各知识能力单元之间构建认知框架</li></ul><h4 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h4><ul><li>记录<ul><li>如实记录过程</li><li>主动思考，挖掘看不见的关系</li></ul></li><li>定期回顾<ul><li>周月度回顾 审视问题解决思路</li><li>年度回顾 检视基本思维方式和激发灵感</li><li>5年以上回顾 探寻基本规律如何影响生活</li></ul></li><li>付费购买<ul><li>买知识</li><li>买时间</li></ul></li></ul><h3 id="怎么使用"><a href="#怎么使用" class="headerlink" title="怎么使用"></a>怎么使用</h3><h4 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h4><ul><li>第一，在不同的场景中，重复应用同一个临界知识</li><li>第二，在不同的时间里，重复应用同一个临界知识</li></ul><h4 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h4><ul><li>借助外部资源掌握临界知识 </li><li>刻意练习掌握临界知识 <ul><li>抓住问题的本质进行练习</li><li>大量地持续练习</li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>作者通过临界知识这一个概念来表达个人知识管理精进的重点就在于通用能力临界知识，通过学习和掌握临界知识让我们更清楚和掌握底层规律，把这些临界知识作为知识体系的底层支柱，作为知识体系的基本结构，使知识体系更加完善和可迁移，<strong>不断的思考我们的思考过程，不断改进我们的思维方式</strong>，才能不断的优化和使用我们的知识结构。</p><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://i.loli.net/2019/05/31/5cf0e32e64b0d50840.png" alt=""></p><hr><hr><p><strong>所有图片均来自网络</strong></p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 学习力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《晨间日记的奇迹》</title>
      <link href="/chen-jian-ri-ji-de-qi-ji.html"/>
      <url>/chen-jian-ri-ji-de-qi-ji.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/05/29/5cee77f873c7e72485.jpg" alt=""></p><h2 id="​"><a href="#​" class="headerlink" title="​"></a>​</h2><h2 id="晨间日记"><a href="#晨间日记" class="headerlink" title="晨间日记"></a>晨间日记</h2><p>​        作者在生涯前13年本着改进自己坚持每天写日记，记录着每一天发生快乐与不快乐的事情，这不是一个容易达到的成就，但是他的坚持好像没有换来他的成长和成功，被离婚、小孩上学问题等诸多不幸缠身，一度坚持不下去13的习惯，没有提笔写日记的欲望，觉得“像这样的日记，再写下去完全没有意义”，“这样的日记没有办法帮助我”，隔天清晨起来13年的习惯使然，让他再度兴起补上昨天日记的念头，当我再次提笔写日记，竟然发现写出来的日记内容跟以前不同了，内容非常正面、积极.从此改变方法且早上写日记，这就是晨间日记的由来。</p><h2 id="为什么作者坚持的每日日记没有用？"><a href="#为什么作者坚持的每日日记没有用？" class="headerlink" title="为什么作者坚持的每日日记没有用？"></a>为什么作者坚持的每日日记没有用？</h2><p>​        阅读书本发现前13年作者的日记就是流水式的记录，只有记录事件，没有情绪，没有反思。这些信息记录之后其实没有什么意义的，你没办法从这些记录里面去学习，去改进自己，不是记日记不好，是没有用对方法。</p><h2 id="为何晨间日记就作用那么大？"><a href="#为何晨间日记就作用那么大？" class="headerlink" title="为何晨间日记就作用那么大？"></a>为何晨间日记就作用那么大？</h2><p>​        晨间日记从工作，健康，生活，金钱等多个方面计划和记录事务和状态，然后规划反思学习，进行自我管理从而促成自我进步。</p><h2 id="为什么早上写日记"><a href="#为什么早上写日记" class="headerlink" title="为什么早上写日记"></a>为什么早上写日记</h2><p>作者归纳了几个优点如下:</p><p>​        对于上班族来说，早上的时间自由，可以让写日记的习惯保持下去（持续性）</p><p>​        早晨是一天的开始，可以让我们更好的做好一天的准备（计划性）</p><p>​        早晨头脑清醒，可以准确地记录前一天发生的事情（效率&amp;记录性）</p><p>​        早晨可以梳理并记录前一天的情绪，尽量客观平衡地看待自己的感情（客观性）</p><p>​        可以将过去宝贵的经验或回忆，在当天灵活地用上（灵活性）</p><h2 id="记日记的作用"><a href="#记日记的作用" class="headerlink" title="记日记的作用"></a>记日记的作用</h2><p>  如果记日记是面向积极生活、自我管理、自我进步的那么会有诸多优点：</p><p>​        1、提升写作能力  </p><p>​        2、谈话题材源源不断  </p><p>​        3、提高贵人运  </p><p>​        4、发现自我肉体与精神的状况及模式</p><p>​        5、在自己身上挖宝，彻底改变人生</p><h2 id="那晨间日记到底记录什么才有用"><a href="#那晨间日记到底记录什么才有用" class="headerlink" title="那晨间日记到底记录什么才有用?"></a>那晨间日记到底记录什么才有用?</h2><p>​<strong>记日记就要记录不造假的真实自己，记录自己的思考、行为与心里情绪， 然后清楚的知道过去、现状与未来，从过去中反思学习，把握现在和规划未来。</strong><br>      那么我们可以把自己的思考、行为、情绪分成多个模块来记录整理</p><p>​        工作</p><p>​        金钱</p><p>​        健康</p><p>​        人际关系</p><p>​        …..</p><p>​      要设定几个栏位，完全是因人而异的。不管设定什么内容的栏位，都是个人自由。自己需要哪些方面提高就记录哪些方面？但是必须要有<strong>昨天内容的反思和明日梦想的实施计划</strong></p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>​    实践才是检验真理的唯一标准，说了这么多不坚持行动，一切都是空谈，把他培养成习惯实践会告诉你答案，怎么培养这个习惯，作者给出了如下原则和建议：</p><h3 id="原则"><a href="#原则" class="headerlink" title="原则:"></a>原则:</h3><p>​        1、早上不要花三分钟以上的时间</p><p>​        2、先决定书写的地点</p><p>​        3、写一个字也没关系</p><h3 id="建议"><a href="#建议" class="headerlink" title="建议:"></a>建议:</h3><p>​        1、开心日记作战法。在写日记还没有变成习惯之前，记得只要写“快乐的事情”就可以了。</p><p>​        2、ONE TWO 作战法。   让写日记的动作，变得跟打开水龙头，自然就会有自来水流出一样，让写日记变成是一个很自然的动作</p><p>​        3、“巴甫洛夫的狗”作战法。充分利用我们的反射条件。所以在写晨间日记之前，一定要订个开始的仪式。</p><p>​        4、奖励自己作战法。等到自己超越了习惯化的三大敌人后，请给予自己奖励吧！</p><p>​        5、宣告众天下作战法。请大声地跟公司的同事、死党及朋友们说『我现在正在挑战「晨间日记」』、「我现在已经持续写一个星期了！」藉由向大家宣告的方式，             来提升自己的写日记动机。宣告众天下，也等于在对自己宣告。</p><p>​        6、一千日作战法。不管什么样的习惯，只要能够持续一千日以上的话，就可以完全变成习惯了。</p><p>​        7、为别人努力作战法 。可以让我们变得更懂得去体谅别人，让我们凡事不为自己的利益，而是为自己重要的人而努力。</p><p>​    这些建议能够帮助我们克服身体、心里障碍建立习惯，从而改变自己的人生</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2><p>​        晨间日记是一个自我记录、自我总结、自我规划的一个载体工具。调整好这个工具适用于自己才能发挥出工具的魅力，记录自己，改进自己，规划自己坚持下去就能创造奇迹，为自己的梦想助力</p><h2 id="个人Evernote晨间日记模板"><a href="#个人Evernote晨间日记模板" class="headerlink" title="个人Evernote晨间日记模板"></a>个人Evernote晨间日记模板</h2><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://i.loli.net/2019/05/29/5cee7b0e77ee341264.png" alt=""></h2><p><strong>所有图片均来自网络</strong></p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 学习力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《如何高效学习》</title>
      <link href="/ru-he-gao-xiao-xue-xi.html"/>
      <url>/ru-he-gao-xiao-xue-xi.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://images-cn.ssl-images-amazon.com/images/I/41JcUDadRGL._SX350_BO1,204,203,200_.jpg" alt=""></p><hr><h2 id="什么是整体性学习"><a href="#什么是整体性学习" class="headerlink" title="什么是整体性学习"></a>什么是整体性学习</h2><blockquote><p>  整体性学习的基础就是将知识关联起来已达到记忆和应用知识的目的，开始学习的最佳技术是比喻、内化、基于流程的记事和图表法，这些方法构成了整体性学习的基础，通过这些方法将知识关联组成小单元结构，然后通过模型组织知识单元，打造高效学习高速公路</p></blockquote><h2 id="学习顺序"><a href="#学习顺序" class="headerlink" title="学习顺序"></a>学习顺序</h2><h3 id="获取阶段"><a href="#获取阶段" class="headerlink" title="获取阶段"></a>获取阶段</h3><h4 id="获取途径"><a href="#获取途径" class="headerlink" title="获取途径"></a>获取途径</h4><ul><li>请教</li><li>搜索网上资源</li><li>看书、视频、讲座</li></ul><h4 id="信息分类"><a href="#信息分类" class="headerlink" title="信息分类"></a>信息分类</h4><ul><li>随意信息</li><li>观点信息</li><li>过程信息</li><li>具体信息</li><li>抽象信息</li></ul><h4 id="阅读方法"><a href="#阅读方法" class="headerlink" title="阅读方法"></a>阅读方法</h4><ul><li><p>快速阅读</p><ul><li>指读法</li><li>练习阅读法</li><li>积极阅读法<ul><li>我要学什么知识</li><li>我要怎么记住知识</li><li>我要怎么应用知识</li></ul></li></ul></li><li><p>笔记流</p><ul><li>混合笔记流 将观点与图像联系</li><li>课下笔记流 将冗长的文字分解成示意图</li><li>评注流 写下关键信息</li></ul></li></ul><h4 id="记忆法"><a href="#记忆法" class="headerlink" title="记忆法"></a>记忆法</h4><ul><li>联想法</li><li>挂钩法</li><li>信息压缩</li></ul><h4 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h4><p>简化信息，提取关键知识，建立基础知识结构模型</p><h3 id="理解阶段"><a href="#理解阶段" class="headerlink" title="理解阶段"></a>理解阶段</h3><ul><li><p>内在化  </p><ul><li>明确你要内在化的概念和知识</li><li>在脑海中建立图像</li><li>动态化图像</li><li>加入更多的感官、感觉和情感</li><li>重复和优化</li></ul></li><li><p>比喻法 将不熟悉的知识与熟悉的架起一座沟通的桥梁</p><ul><li>方法<ul><li>确定你需要深入理解和记忆的知识</li><li>在个人经验中寻找与知识信息相似的部分</li><li>重复上述过程</li></ul></li><li>技巧<ul><li>要有寻找比喻的欲望</li><li>注意第一个出现在脑海里的念头</li><li>优化和测试你的比喻</li></ul></li></ul></li><li><p>图表法</p><ul><li>流程图</li><li>概念图</li><li>图像</li></ul></li></ul><h3 id="拓展阶段"><a href="#拓展阶段" class="headerlink" title="拓展阶段"></a>拓展阶段</h3><ul><li>深度拓展 了解知识的来龙去脉</li><li>横向拓展 了解相关的其他知识</li><li>纵向拓展 不同知识间建立模型</li></ul><h3 id="纠错阶段"><a href="#纠错阶段" class="headerlink" title="纠错阶段"></a>纠错阶段</h3><ul><li>在实践中发现问题</li><li>理清概念错误还是</li></ul><h3 id="应用阶段"><a href="#应用阶段" class="headerlink" title="应用阶段"></a>应用阶段</h3><p>知识应用是学习的最终目的，将学到的知识应用到你的问题中去</p><h3 id="测试阶段"><a href="#测试阶段" class="headerlink" title="测试阶段"></a>测试阶段</h3><p>发现和纠正不同学习阶段的问题</p><h2 id="费曼技巧"><a href="#费曼技巧" class="headerlink" title="费曼技巧"></a>费曼技巧</h2><h3 id="措施"><a href="#措施" class="headerlink" title="措施"></a>措施</h3><blockquote><ul><li>理解没有真正掌握的知识</li><li>记住那些有理解，但是遗忘的知识</li><li>靠前学习的高效方法</li></ul></blockquote><h3 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h3><blockquote><ul><li>选中要学习的概念</li><li>设想自己是一名老师，正在试图教会一名新生这个知识点</li><li>感到疑惑时，返回查找资料</li><li>简化和比喻</li></ul></blockquote><h2 id="方法之外"><a href="#方法之外" class="headerlink" title="方法之外"></a>方法之外</h2><ul><li>能量管理，让自己身体和心里有能量去学习和阅读</li><li>不要没有目的的去学习，一定要带着目的去学习你想要的知识</li><li>绝不拖延</li><li>批处理更聚焦每一次的学习</li><li>有组织，建立行动清单养成好的习惯</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>学习知识的目的是应用，在不同的学习阶段通过不同的方法构建知识单元，然后利用模型组织知识，让不同的知识之间有联系，构建自己的知识体系。</p><hr><p><strong>所有图片均来自网络</strong></p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 学习力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《学习力:颠覆职场学习的高效方法》</title>
      <link href="/xue-xi-li-dian-fu-zhi-chang-xue-xi-de-gao-xiao-fang-fa.html"/>
      <url>/xue-xi-li-dian-fu-zhi-chang-xue-xi-de-gao-xiao-fang-fa.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://images-cn.ssl-images-amazon.com/images/I/51nDsCzEEgL._SY346_.jpg" alt=""></p><hr><h2 id="三大策略"><a href="#三大策略" class="headerlink" title="三大策略"></a>三大策略</h2><h3 id="功利性"><a href="#功利性" class="headerlink" title="功利性"></a>功利性</h3><blockquote><p>   聚焦寻找解决方案去阅读不需要一定得全部读完，能够有效的减少大量意志力去读完一本书，而且需要深入学习才能了解解决方法，能够有效的避免浅读，找到方法之后自然应用于实际，可以有效避免遗忘。这些正式大脑阻碍我们学习的问题，因为大脑是总想懒惰的重复劳动，不想走出舒适区，容易被小的完成行动感到满足，而且特别容易忘记</p></blockquote><h4 id="方法步骤"><a href="#方法步骤" class="headerlink" title="方法步骤"></a>方法步骤</h4><ul><li>选择一个要解决的问题去学习</li><li>确定学习内容的范围和顺序</li><li>实际应用所学内容解决问题</li></ul><h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><ul><li>工作流程框架的知识体系框架</li><li>业务领域的专业知识框架</li><li>职位目标的能力知识框架</li></ul><h3 id="可迁移"><a href="#可迁移" class="headerlink" title="可迁移"></a>可迁移</h3><ul><li>组织好先前知识和先前经验</li><li>多样化情景应用</li><li>对知识做更高层次抽象</li></ul><h2 id="五大技巧"><a href="#五大技巧" class="headerlink" title="五大技巧"></a>五大技巧</h2><h3 id="搜索技巧"><a href="#搜索技巧" class="headerlink" title="搜索技巧"></a>搜索技巧</h3><blockquote><p>  了解搜索机制和规则，更好的服务于自己</p></blockquote><h3 id="阅读技巧"><a href="#阅读技巧" class="headerlink" title="阅读技巧"></a>阅读技巧</h3><h4 id="四大阅读理念"><a href="#四大阅读理念" class="headerlink" title="四大阅读理念"></a>四大阅读理念</h4><ul><li>带着目的去读书<ul><li>围绕这个目的选书</li><li>做阅读前的准备</li><li>锁定与目的有关的内容</li></ul></li><li>第二遍比第一遍容易理解</li><li>阅读后用自己的语言组织回忆</li><li>按自己框架重新组织阅读</li></ul><h4 id="三大阅读方法"><a href="#三大阅读方法" class="headerlink" title="三大阅读方法"></a>三大阅读方法</h4><ul><li>整体阅读<ul><li>确定阅读目的</li><li>提出具体问题</li><li>选出关键词或者关键句</li><li>挑选关键点</li><li>归纳问题的结论</li></ul></li><li>多重阅读<ul><li>明确目的</li><li>画出框架</li><li>变速阅读</li><li>重点精读</li></ul></li><li>主题阅读<ul><li>搭建主题框架</li><li>填充主题框架</li></ul></li></ul><h3 id="理解技巧"><a href="#理解技巧" class="headerlink" title="理解技巧"></a>理解技巧</h3><h4 id="事实性知识"><a href="#事实性知识" class="headerlink" title="事实性知识"></a>事实性知识</h4><ul><li>思维导图</li><li>记忆法</li></ul><h4 id="概念性知识"><a href="#概念性知识" class="headerlink" title="概念性知识"></a>概念性知识</h4><ul><li>这个知识的来龙去脉是什么？什么背景</li><li>与其他知识之间的联系</li><li>哪三个能用和不能用的场景</li></ul><h4 id="程序性知识"><a href="#程序性知识" class="headerlink" title="程序性知识"></a>程序性知识</h4><ul><li>流程化：书面整理出程序性知识的流程</li><li>刻意使用</li><li>提炼出更具一般性的流程</li></ul><h4 id="元认知知识"><a href="#元认知知识" class="headerlink" title="元认知知识"></a>元认知知识</h4><h3 id="积累技巧"><a href="#积累技巧" class="headerlink" title="积累技巧"></a>积累技巧</h3><ul><li>收藏技巧</li><li>笔记技巧</li><li>组织技巧</li></ul><h3 id="应用技巧"><a href="#应用技巧" class="headerlink" title="应用技巧"></a>应用技巧</h3><ul><li>最简应用</li><li>自然重复</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>   整本书大体是用多个学习方式和方法总结出来的一套方法，但是书本的逻辑不是很清楚，其实总结就是一个重点在于框架，先搭建框架，然后填充框架，应用框架，修正框架，方法和策略就是一些技巧去快速搭建、应用、修正框架！使得框架逻辑条理清晰适用于自己解决某一个或者某一类问题。</p></blockquote><hr><p><strong>所有图片均来自网络</strong></p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 学习力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac osx 数字签名</title>
      <link href="/macosx-qian-ming.html"/>
      <url>/macosx-qian-ming.html</url>
      
        <content type="html"><![CDATA[<hr><h2 id="签名证书获取"><a href="#签名证书获取" class="headerlink" title="签名证书获取"></a>签名证书获取</h2><p>mac上文件签名需要获取 Developer ID Application 证书， 具体怎么获取证书参考<a href="https://zhuanlan.zhihu.com/p/30844150" target="_blank" rel="noopener">文章</a>  或者google 相关的文章即可 </p><p><strong>注意：和移动端IOS的证书不是一套</strong></p><h2 id="证书导入"><a href="#证书导入" class="headerlink" title="证书导入"></a>证书导入</h2><h3 id="手动导入"><a href="#手动导入" class="headerlink" title="手动导入"></a>手动导入</h3><p>​    双击证书，输入密码会自动导入，再钥匙访问串里面可以看到导入的证书</p><h3 id="指令导入"><a href="#指令导入" class="headerlink" title="指令导入"></a>指令导入</h3><pre class=" language-shell"><code class="language-shell"># 将证书导入mac 系统钥匙串 再使用develoer id 来签名#step1 解锁钥匙串security unlock-keychain -p **** login.keychain# 将证书文件导入到系统的login 钥匙串中 之后再使用原始的签名逻辑即可 P12Path p12证书文件路径 p12 注意证书不能有空格 需要将证书文件copy到此目录security import "$SignatureSecretKeyPath" -k login.keychain -P **** -A# **** 表示当前证书的密码security unlock-keychain -p **** login.keychain# **** 表示当前账号的密码# 注意几个密码的区分</code></pre><h2 id="签名指令"><a href="#签名指令" class="headerlink" title="签名指令"></a>签名指令</h2><pre class=" language-shell"><code class="language-shell">codesign -s identity [-i identifier] [-r requirements] [-fv] [path ...]codesign -v [-R requirement] [-v] [path|pid ...]codesign -d [-v] [path|pid ...]codesign -h [-v] [pid ...]</code></pre><h2 id="需要签名的内容"><a href="#需要签名的内容" class="headerlink" title="需要签名的内容"></a>需要签名的内容</h2><ul><li>mac 下的库文件 framework</li><li>mac 下的动态库 dylib</li><li>mac 下nodejs C++ 生成的 .node 文件</li><li>包含的 子app文件</li><li>electron 本身带有的 库文件和子app 例如 Helper.app 等</li></ul><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class=" language-shell"><code class="language-shell">#!/bin/bash -ilex#脚本主要用来实现mac签名#该函数递归查找 framework、dylib、node文件签名function CodeSignFiles(){    for element in `ls $1`    do        dir_or_file=$1"/"$element        if [ -d $dir_or_file ]        then            strFileExName=${dir_or_file##*.}            #echo "$strFileExName"            #echo "$dir_or_file"            if [[ "${dir_or_file##*.}"x = "framework"x ]];then                echo ""            else                CodeSignFiles $dir_or_file            fi;        else            strFileExName=${dir_or_file##*.}            if [[ "${dir_or_file##*.}"x = "dylib"x ]];then                #echo "$dir_or_file"                codesign --force --verify --verbose --sign "$OSX_SIGN" "$dir_or_file"            elif [[ "${dir_or_file##*.}"x = "node"x ]]; then                #echo "$dir_or_file"                codesign --force --verify --verbose --sign "$OSX_SIGN" "$dir_or_file"            fi        fi    done}# 接收 electron-builder生成之后的 app 路径，以及 app 名字App_path=$1AppProductName=$2if [ ! -n "$1" ] ;then    echo "you should input app path...."      exit 1fiif [ ! -n "$2" ] ;then    echo "you should input app name...."      exit 1fi#export OSX_SIGN = 'Developer ID Application: ****** Co., Ltd (*****)'# 递归签名 electron-builder生成之后的 app 路径CodeSignFiles "$App_path/Contents/Resources/"# 签名electron app 自带的codesign --force --verify --verbose --sign "$OSX_SIGN" "$App_path/Contents/Frameworks/Mantle.framework/Versions/A"codesign --force --verify --verbose --sign "$OSX_SIGN" "$App_path/Contents/Frameworks/ReactiveCocoa.framework/Versions/A"codesign --force --verify --verbose --sign "$OSX_SIGN" "$App_path/Contents/Frameworks/Squirrel.framework/Versions/A"codesign --force --verify --verbose --sign "$OSX_SIGN" "$App_path/Contents/Frameworks/Electron Framework.framework/Versions/A"codesign --force --verify --verbose --sign "$OSX_SIGN" "$App_path/Contents/Frameworks/Mantle.framework/"codesign --force --verify --verbose --sign "$OSX_SIGN" "$App_path/Contents/Frameworks/ReactiveCocoa.framework/"codesign --force --verify --verbose --sign "$OSX_SIGN" "$App_path/Contents/Frameworks/Squirrel.framework/"codesign --force --verify --verbose --sign "$OSX_SIGN" "$App_path/Contents/Frameworks/Electron Framework.framework/"codesign --force --verify --verbose --sign "$OSX_SIGN" "$App_path/Contents/Frameworks/$AppProductName Helper EH.app/" --timestamp=nonecodesign --force --verify --verbose --sign "$OSX_SIGN" "$App_path/Contents/Frameworks/$AppProductName Helper NP.app/" --timestamp=nonecodesign --force --verify --verbose --sign "$OSX_SIGN" "$App_path/Contents/Frameworks/$AppProductName Helper.app/" --timestamp=nonecodesign --force --verify --verbose --sign "$OSX_SIGN" "$App_path/Contents/MacOS/$AppProductName" --timestamp=nonecodesign -f -s "$OSX_SIGN" -v "$App_path" --deep --timestamp=none# 查看签名状态 如果是 accep 则表示签名成功echo "### verifying signature"codesign -vvv -d "$App_path"spctl -a -t exec -vv "$App_path"</code></pre><hr><hr><p><strong>所有图片均来自网络</strong></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macosx </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows 数字签名</title>
      <link href="/windows-dai-ma-qian-ming.html"/>
      <url>/windows-dai-ma-qian-ming.html</url>
      
        <content type="html"><![CDATA[<h2 id="获取数字签名证书"><a href="#获取数字签名证书" class="headerlink" title="获取数字签名证书"></a>获取数字签名证书</h2><p>​    这个不具体分析，网上可以找到很多文章怎么获取数字签名证书</p><h2 id="签名工具-signtool-exe"><a href="#签名工具-signtool-exe" class="headerlink" title="签名工具  signtool.exe"></a>签名工具  signtool.exe</h2><pre><code>signtool [command] [options] [file_name | ...]  </code></pre><p>全部指令详解参考 <a href="https://docs.microsoft.com/en-us/dotnet/framework/tools/signtool-exe" target="_blank" rel="noopener">文档</a></p><p>其中：</p><p>(1) <strong>/v</strong>：显示详细的签名结果；</p><p>(2) <strong>/f xx.pfx</strong>：加载代码签名证书。请把颁发给你的用户证书放到signtool目录下，或者指定文件路径；</p><p>(3) <strong>/p 密码</strong>：申请证书时候设置的密码；</p><p>(4) <strong>/t,/tr</strong>：为代码加上WoSign免费时间戳，确保签名后的代码永不过期；</p><p>(5) <strong>test.dll</strong>: 就是您要签名的Windows文件，如：.cab, .dll, .exe 等文件；</p><h2 id="时间戳服务地址"><a href="#时间戳服务地址" class="headerlink" title="时间戳服务地址"></a>时间戳服务地址</h2><ul><li><p>SHA1签名算法与时间戳 SHA-1 timestamping </p><p>URL： <a href="http://timestamp.verisign.com/scripts/timstamp.dll" target="_blank" rel="noopener">http://timestamp.verisign.com/scripts/timstamp.dll</a> (The timstamp.dll filename is required to conform to old MS-DOS naming convention).   </p></li><li><p>SHA-1签名算法与RFC3161 时间戳 SHA-1 with RFC 3161 timestamping </p><p>URL：  <a href="http://sha1timestamp.ws.symantec.com/sha1/timestamp" target="_blank" rel="noopener">http://sha1timestamp.ws.symantec.com/sha1/timestamp</a>   </p></li><li><p>SHA-256签名算法与RFC3161 时间戳SHA-256 with RFC 3161 timestamping </p><p>URL： <a href="http://sha256timestamp.ws.symantec.com/sha256/timestamp" target="_blank" rel="noopener">http://sha256timestamp.ws.symantec.com/sha256/timestamp</a></p></li></ul><h1 id="bat脚本"><a href="#bat脚本" class="headerlink" title="bat脚本"></a>bat脚本</h1><pre class=" language-bash"><code class="language-bash"><span class="token keyword">echo</span> off:: 设置signtool.exe 目录<span class="token keyword">set</span> curdir<span class="token operator">=</span>%cd%\publish\win\signtool<span class="token keyword">echo</span> %curdir%::指定electron-builder生成的绿色包目录<span class="token keyword">set</span> DIR<span class="token operator">=</span><span class="token string">"%cd%\dist\win-ia32-unpacked\"echo DIR=%DIR%:: SignatureSecretKeyPath 签名证书路径的环境变量，因为证书一般不放入代码工程，所以用环境变量:: 循环遍历目录下的需要签名文件:: password 表示证书的密码:: www.XXXX.com 表示证书申请的域名for /R %DIR% %%f in (*.node) do (    %curdir%\HWInfo\signtool.exe sign /v /as /f %SignatureSecretKeyPath% /tr "</span>http://sha256timestamp.ws.symantec.com/sha256/timestamp<span class="token string">" /p password /fd sha256 /du https://www.XXXX.com /d . %%f    if errorlevel 1 echo %errorlevel%)for /R %DIR% %%f in (*.dll) do (    %curdir%\HWInfo\signtool.exe sign /v /as /f %SignatureSecretKeyPath% /tr "</span>http://sha256timestamp.ws.symantec.com/sha256/timestamp<span class="token string">" /p password /fd sha256 /du https://www.XXXX.com /d . %%f    if errorlevel 1 echo %errorlevel%)for /R %DIR% %%f in (*.exe) do (    %curdir%\HWInfo\signtool.exe sign /v /as /f %SignatureSecretKeyPath% /tr "</span>http://sha256timestamp.ws.symantec.com/sha256/timestamp<span class="token string">" /p password /fd sha256 /du https://www.XXXX.com /d . %%f    if errorlevel 1 echo %errorlevel%)cd %curdir%echo "</span>done<span class="token operator">!</span>"goto Exit:Error<span class="token keyword">echo</span> Error<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span>:Exit<span class="token keyword">echo</span> on</code></pre><hr><hr><p><strong>所有图片均来自网络</strong></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>electron 代码 解密</title>
      <link href="/electron-dai-ma-jie-mi.html"/>
      <url>/electron-dai-ma-jie-mi.html</url>
      
        <content type="html"><![CDATA[<h2 id="解密模块需要解决的问题"><a href="#解密模块需要解决的问题" class="headerlink" title="解密模块需要解决的问题"></a>解密模块需要解决的问题</h2><ul><li>在读取指定路径的加密文件</li><li>AES 解密代码文件</li><li>加载 JS 解密之后的内容</li></ul><h3 id="怎么加载"><a href="#怎么加载" class="headerlink" title="怎么加载"></a>怎么加载</h3><p><a href="https://segmentfault.com/a/1190000012373889" target="_blank" rel="noopener">nodejs模块加载机制</a></p><p><a href="http://www.ruanyifeng.com/blog/2015/05/require.html" target="_blank" rel="noopener">require() 源码解读</a></p><p>通过了解nodejs 的模块加载机制 其实执行的主要代码类似</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>exports<span class="token punctuation">,</span> require<span class="token punctuation">,</span> module<span class="token punctuation">,</span> __filename<span class="token punctuation">,</span> __dirname<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 模块源码</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>那么，我们在C++中也用此模型来加载代码文件</p><h2 id="nodejs-C-插件开发"><a href="#nodejs-C-插件开发" class="headerlink" title="nodejs C++ 插件开发"></a>nodejs C++ 插件开发</h2><p>这一块的学习资料具体参考<a href="http://nodejs.cn/api/addons.html" target="_blank" rel="noopener">官方文档</a>和<a href="https://github.com/nodejs/node-addon-examples.git" target="_blank" rel="noopener">官方例子</a></p><p>nodejs C++插件中 我们是可以使用V8的，这是我们执行 js 代码的重要前提条件</p><h2 id="获取加密JS代码路径"><a href="#获取加密JS代码路径" class="headerlink" title="获取加密JS代码路径"></a>获取加密JS代码路径</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//file_path 需要返回的完整路径</span><span class="token comment" spellcheck="true">//resources_dir_path 运行时获取的electron资源文件夹路径</span><span class="token comment" spellcheck="true">//加密之后的js文件md5值</span><span class="token keyword">bool</span> LoadJS<span class="token operator">::</span><span class="token function">GenerateFilePath</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string<span class="token operator">&amp;</span> file_path<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> resources_dir_path<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> code_id<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>resources_dir_path<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> code_id<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        file_path <span class="token operator">=</span> resources_dir_path<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//加密的代码不能放入asar 中，不然C++无法加载，这里的路径为加密文件时定义好的路径</span>        file_path <span class="token operator">+</span><span class="token operator">=</span> u8<span class="token string">"/app.asar.unpacked/encryption/"</span><span class="token punctuation">;</span>        file_path <span class="token operator">+</span><span class="token operator">=</span> code_id<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="AES-解密实现"><a href="#AES-解密实现" class="headerlink" title="AES 解密实现"></a>AES 解密实现</h2><p>通过 openssl来实现AES 解密，下面这个例子，来自<a href="https://www.openssl.org/docs/manmaster/man3/EVP_CipherUpdate.html]" target="_blank" rel="noopener">openssl官方文档</a>。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">do_crypt</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>in<span class="token punctuation">,</span> FILE <span class="token operator">*</span>out<span class="token punctuation">,</span> <span class="token keyword">int</span> do_encrypt<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/* Allow enough space in output buffer for additional block */</span>     <span class="token keyword">unsigned</span> <span class="token keyword">char</span> inbuf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">,</span> outbuf<span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">+</span> EVP_MAX_BLOCK_LENGTH<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> inlen<span class="token punctuation">,</span> outlen<span class="token punctuation">;</span>     EVP_CIPHER_CTX <span class="token operator">*</span>ctx<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/*      * Bogus key and IV: we'd normally set these from      * another source.      */</span>     <span class="token keyword">unsigned</span> <span class="token keyword">char</span> key<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"0123456789abcdeF"</span><span class="token punctuation">;</span>     <span class="token keyword">unsigned</span> <span class="token keyword">char</span> iv<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"1234567887654321"</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* Don't set key or IV right away; we want to check lengths */</span>     ctx <span class="token operator">=</span> <span class="token function">EVP_CIPHER_CTX_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">EVP_CipherInit_ex</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ctx<span class="token punctuation">,</span> <span class="token function">EVP_aes_128_cbc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>                       do_encrypt<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">OPENSSL_assert</span><span class="token punctuation">(</span><span class="token function">EVP_CIPHER_CTX_key_length</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">OPENSSL_assert</span><span class="token punctuation">(</span><span class="token function">EVP_CIPHER_CTX_iv_length</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* Now we can set key and IV */</span>     <span class="token function">EVP_CipherInit_ex</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> iv<span class="token punctuation">,</span> do_encrypt<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         inlen <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span>inbuf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> in<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>inlen <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">EVP_CipherUpdate</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> outbuf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>outlen<span class="token punctuation">,</span> inbuf<span class="token punctuation">,</span> inlen<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">/* Error */</span>             <span class="token function">EVP_CIPHER_CTX_free</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token function">fwrite</span><span class="token punctuation">(</span>outbuf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> outlen<span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">EVP_CipherFinal_ex</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> outbuf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>outlen<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">/* Error */</span>         <span class="token function">EVP_CIPHER_CTX_free</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token function">fwrite</span><span class="token punctuation">(</span>outbuf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> outlen<span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">EVP_CIPHER_CTX_free</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h2 id="加载加密的代码内容"><a href="#加载加密的代码内容" class="headerlink" title="加载加密的代码内容"></a>加载加密的代码内容</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//获取解密的key 和向量 iv</span><span class="token keyword">bool</span> LoadJS<span class="token operator">::</span><span class="token function">GenerateKeyAndIv</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> key<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">&amp;</span> iv<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> code_id<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>code_id<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">32</span> <span class="token operator">&amp;&amp;</span> key <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> ch_code_id <span class="token operator">=</span> code_id<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        key <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"</span><span class="token punctuation">;</span>        iv <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>code_id<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iv <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//file_data 文件内容</span><span class="token comment" spellcheck="true">//file_length 文件大小</span><span class="token comment" spellcheck="true">//need_decrypt 是否需要解密</span><span class="token comment" spellcheck="true">//file_path 加密文件路径</span><span class="token comment" spellcheck="true">// code_id 加密文件md5 值</span><span class="token keyword">bool</span> LoadJS<span class="token operator">::</span><span class="token function">LoadFileData</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">&amp;</span> file_data<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> file_length<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">bool</span><span class="token operator">&amp;</span> need_decrypt<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> file_path<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> code_id<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">bool</span> success <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    FOpen file_open<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//打开文件</span>    file_open<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> FOpen<span class="token operator">::</span>R_B_MODE_TYPE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>file_open<span class="token punctuation">.</span><span class="token function">IsOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> file_decrypt_length <span class="token operator">=</span> file_open<span class="token punctuation">.</span><span class="token function">GetLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file_decrypt_length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//设置缓存大小</span>        <span class="token keyword">char</span><span class="token operator">*</span> ch_file_decrypt_data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>file_decrypt_length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//读取加密文件内容</span>        file_open<span class="token punctuation">.</span><span class="token function">ReadChar</span><span class="token punctuation">(</span>ch_file_decrypt_data<span class="token punctuation">,</span> file_decrypt_length<span class="token punctuation">)</span><span class="token punctuation">;</span>        file_open<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>need_decrypt<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//</span>            <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> ch_key <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            ch_key<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>            <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> ch_iv <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GenerateKeyAndIv</span><span class="token punctuation">(</span>ch_key<span class="token punctuation">,</span> ch_iv<span class="token punctuation">,</span> code_id<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//解密缓存ch_file_decrypt_data 中的内容</span>                <span class="token comment" spellcheck="true">//把openssl 官方加解密的例子稍微封装一下</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Decrypt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>ch_file_decrypt_data<span class="token punctuation">,</span> file_decrypt_length<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">&amp;</span><span class="token punctuation">)</span>file_data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token operator">&amp;</span><span class="token punctuation">)</span>file_length<span class="token punctuation">,</span> ch_key<span class="token punctuation">,</span> ch_iv<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    success <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ch_key <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">memset</span><span class="token punctuation">(</span>ch_key<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch_key<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ch_file_decrypt_data <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">memset</span><span class="token punctuation">(</span>ch_file_decrypt_data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> file_decrypt_length<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch_file_decrypt_data<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            file_data <span class="token operator">=</span> ch_file_decrypt_data<span class="token punctuation">;</span>            file_length <span class="token operator">=</span> file_decrypt_length<span class="token punctuation">;</span>            success <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> success<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="加载-JavaScript"><a href="#加载-JavaScript" class="headerlink" title="加载 JavaScript"></a>加载 JavaScript</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> LoadJS<span class="token operator">::</span><span class="token function">V8Load</span><span class="token punctuation">(</span><span class="token keyword">const</span> Nan<span class="token operator">::</span>FunctionCallbackInfo<span class="token operator">&lt;</span>v8<span class="token operator">::</span>Value<span class="token operator">></span><span class="token operator">&amp;</span> info<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">bool</span> success <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 前置返回值</span>    <span class="token comment" spellcheck="true">//v8 对象域</span>    Nan<span class="token operator">::</span>HandleScope scope<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">Length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Nan<span class="token operator">::</span><span class="token function">ThrowError</span><span class="token punctuation">(</span><span class="token string">"Wrong number of arguments"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取Global 对象 </span>    v8<span class="token operator">::</span>Local<span class="token operator">&lt;</span>v8<span class="token operator">::</span>Object<span class="token operator">></span> global <span class="token operator">=</span> Nan<span class="token operator">::</span><span class="token function">GetCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">Global</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取传入的参数</span>    v8<span class="token operator">::</span>Local<span class="token operator">&lt;</span>v8<span class="token operator">::</span>Value<span class="token operator">></span> need_decrypt <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    v8<span class="token operator">::</span>Local<span class="token operator">&lt;</span>v8<span class="token operator">::</span>Value<span class="token operator">></span> resources_dir_path_arg <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    v8<span class="token operator">::</span>Local<span class="token operator">&lt;</span>v8<span class="token operator">::</span>Value<span class="token operator">></span> code_id_arg <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    v8<span class="token operator">::</span>Local<span class="token operator">&lt;</span>v8<span class="token operator">::</span>Value<span class="token operator">></span> exports_arg <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    v8<span class="token operator">::</span>Local<span class="token operator">&lt;</span>v8<span class="token operator">::</span>Value<span class="token operator">></span> require_arg <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    v8<span class="token operator">::</span>Local<span class="token operator">&lt;</span>v8<span class="token operator">::</span>Value<span class="token operator">></span> module_arg <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    v8<span class="token operator">::</span>Local<span class="token operator">&lt;</span>v8<span class="token operator">::</span>Value<span class="token operator">></span> file_name_arg <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    v8<span class="token operator">::</span>Local<span class="token operator">&lt;</span>v8<span class="token operator">::</span>Value<span class="token operator">></span> dir_name_arg <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    v8<span class="token operator">::</span>Local<span class="token operator">&lt;</span>v8<span class="token operator">::</span>Value<span class="token operator">></span> process_arg <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//参数判断你是否 传入正确</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>need_decrypt<span class="token operator">-</span><span class="token operator">></span><span class="token function">IsBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>resources_dir_path_arg<span class="token operator">-</span><span class="token operator">></span><span class="token function">IsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>code_id_arg<span class="token operator">-</span><span class="token operator">></span><span class="token function">IsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>require_arg<span class="token operator">-</span><span class="token operator">></span><span class="token function">IsFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>file_name_arg<span class="token operator">-</span><span class="token operator">></span><span class="token function">IsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>dir_name_arg<span class="token operator">-</span><span class="token operator">></span><span class="token function">IsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Nan<span class="token operator">::</span><span class="token function">ThrowError</span><span class="token punctuation">(</span><span class="token string">"Wrong argument"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//判断md5值是否为32 位</span>    v8<span class="token operator">::</span>Local<span class="token operator">&lt;</span>v8<span class="token operator">::</span>String<span class="token operator">></span> v8_str_code_id <span class="token operator">=</span> code_id_arg<span class="token punctuation">.</span>As<span class="token operator">&lt;</span>v8<span class="token operator">::</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>v8_str_code_id<span class="token operator">-</span><span class="token operator">></span><span class="token function">Length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">32</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Nan<span class="token operator">::</span><span class="token function">ThrowError</span><span class="token punctuation">(</span><span class="token string">"Wrong code_id length"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 保存运行时electron的资源文件夹路径 变量</span>    std<span class="token operator">::</span>string str_resources_dir_path<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>v8convert<span class="token operator">::</span><span class="token function">v8String2UTF8String</span><span class="token punctuation">(</span>str_resources_dir_path<span class="token punctuation">,</span> resources_dir_path_arg<span class="token punctuation">.</span>As<span class="token operator">&lt;</span>v8<span class="token operator">::</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 保存 加密文件md5值 变量</span>        std<span class="token operator">::</span>string str_code_id<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>v8convert<span class="token operator">::</span><span class="token function">v8String2UTF8String</span><span class="token punctuation">(</span>str_code_id<span class="token punctuation">,</span> code_id_arg<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            std<span class="token operator">::</span>string str_error<span class="token punctuation">;</span>            std<span class="token operator">::</span>string str_file_path<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GenerateFilePath</span><span class="token punctuation">(</span>str_file_path<span class="token punctuation">,</span> str_resources_dir_path<span class="token punctuation">,</span> str_code_id<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">char</span><span class="token operator">*</span> ch_file_data <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> file_length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">bool</span> b_need_decrypt <span class="token operator">=</span> need_decrypt<span class="token operator">-</span><span class="token operator">></span><span class="token function">BooleanValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//代码文件解密</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">LoadFileData</span><span class="token punctuation">(</span>ch_file_data<span class="token punctuation">,</span> file_length<span class="token punctuation">,</span> b_need_decrypt<span class="token punctuation">,</span> str_file_path<span class="token punctuation">,</span> str_code_id<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    std<span class="token operator">::</span>string str_code <span class="token operator">=</span> <span class="token string">"(function (global, exports, require, module, __filename, __dirname, process) { return function (global, exports, require, module, __filename, __dirname, process) {\n"</span><span class="token punctuation">;</span>                    str_code <span class="token operator">+</span><span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span>ch_file_data<span class="token punctuation">,</span> file_length<span class="token punctuation">)</span><span class="token punctuation">;</span>                    str_code <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"\n}.call(this, global, exports, require, module, __filename, __dirname, process); })"</span><span class="token punctuation">;</span>                    <span class="token function">memset</span><span class="token punctuation">(</span>ch_file_data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> file_length<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>b_need_decrypt<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token function">free</span><span class="token punctuation">(</span>ch_file_data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span>                    <span class="token punctuation">{</span>                        <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch_file_data<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    v8<span class="token operator">::</span>Local<span class="token operator">&lt;</span>v8<span class="token operator">::</span>String<span class="token operator">></span> l_v8_str_code <span class="token operator">=</span> Nan<span class="token operator">::</span><span class="token function">New</span><span class="token punctuation">(</span>str_code<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToLocalChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>str_code<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> str_code<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    v8<span class="token operator">::</span>Local<span class="token operator">&lt;</span>v8<span class="token operator">::</span>Script<span class="token operator">></span> l_script_code<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//C++ 字符串 JavaScript脚本转换成v8执行脚本</span>                    v8<span class="token operator">::</span>MaybeLocal<span class="token operator">&lt;</span>v8<span class="token operator">::</span>Script<span class="token operator">></span> ml_script_code <span class="token operator">=</span> Nan<span class="token operator">::</span><span class="token function">CompileScript</span><span class="token punctuation">(</span>l_v8_str_code<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>ml_script_code<span class="token punctuation">.</span><span class="token function">ToLocal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>l_script_code<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>l_script_code<span class="token punctuation">.</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// 执行获得函数</span>                            v8<span class="token operator">::</span>Local<span class="token operator">&lt;</span>v8<span class="token operator">::</span>Value<span class="token operator">></span> l_v8_script_code_run_result <span class="token operator">=</span> l_script_code<span class="token operator">-</span><span class="token operator">></span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>l_v8_script_code_run_result<span class="token operator">-</span><span class="token operator">></span><span class="token function">IsFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token punctuation">{</span>                                v8<span class="token operator">::</span>Local<span class="token operator">&lt;</span>v8<span class="token operator">::</span>Function<span class="token operator">></span> l_v8_script_code_fun <span class="token operator">=</span> l_v8_script_code_run_result<span class="token punctuation">.</span>As<span class="token operator">&lt;</span>v8<span class="token operator">::</span>Function<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">//参数列表</span>                                v8<span class="token operator">::</span>Local<span class="token operator">&lt;</span>v8<span class="token operator">::</span>Value<span class="token operator">></span> l_v8_code_argv<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> global<span class="token punctuation">,</span> exports_arg<span class="token punctuation">,</span> require_arg<span class="token punctuation">,</span> module_arg<span class="token punctuation">,</span> file_name_arg<span class="token punctuation">,</span> dir_name_arg<span class="token punctuation">,</span> process_arg <span class="token punctuation">}</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// v8 调用函数</span>                                l_v8_script_code_fun<span class="token operator">-</span><span class="token operator">></span><span class="token function">Call</span><span class="token punctuation">(</span>global<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> l_v8_code_argv<span class="token punctuation">)</span><span class="token punctuation">;</span>                                success <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token keyword">else</span>                            <span class="token punctuation">{</span>                                str_error <span class="token operator">=</span> u8<span class="token string">"script_code is not function:"</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">else</span>                        <span class="token punctuation">{</span>                            str_error <span class="token operator">=</span> u8<span class="token string">"script_code is empty:"</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span>                    <span class="token punctuation">{</span>                        str_error <span class="token operator">=</span> u8<span class="token string">"compileScript failed:"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    str_error <span class="token operator">=</span> u8<span class="token string">"loadFileData failed:"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                str_error <span class="token operator">=</span> u8<span class="token string">"generateFilePath failed:"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                str_error <span class="token operator">+</span><span class="token operator">=</span> u8<span class="token string">" codeid = "</span><span class="token punctuation">;</span>                str_error <span class="token operator">+</span><span class="token operator">=</span> str_code_id<span class="token punctuation">;</span>                Nan<span class="token operator">::</span><span class="token function">ThrowError</span><span class="token punctuation">(</span>str_error<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    info<span class="token punctuation">.</span><span class="token function">GetReturnValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>Nan<span class="token operator">::</span><span class="token function">New</span><span class="token punctuation">(</span>success<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="执行说明"><a href="#执行说明" class="headerlink" title="执行说明"></a>执行说明</h2><p>上面C++ 代码其实执行的是这样一段JS 代码</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>global<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> require<span class="token punctuation">,</span> module<span class="token punctuation">,</span> __filename<span class="token punctuation">,</span> __dirname<span class="token punctuation">,</span> process<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>global<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> require<span class="token punctuation">,</span> module<span class="token punctuation">,</span> __filename<span class="token punctuation">,</span> __dirname<span class="token punctuation">,</span> process<span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 解密后的JS代码内容</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> global<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> require<span class="token punctuation">,</span> module<span class="token punctuation">,</span> __filename<span class="token punctuation">,</span> __dirname<span class="token punctuation">,</span> process<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>然后执 闭包，最后调用函数</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>把加密封装成一个nodejs模块，然后生产环境打包时完成代码加密，运行时依赖它解密即可，加密和解密配套使用，还可以使用zip等压缩包配套再来一层加密</p><p>至此，electron的源码加解密全部完成</p><hr><hr><p><strong>所有图片均来自网络</strong></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>electron 代码 加密</title>
      <link href="/electron-dai-ma-jia-mi.html"/>
      <url>/electron-dai-ma-jia-mi.html</url>
      
        <content type="html"><![CDATA[<h2 id="常见前端代码加密方式"><a href="#常见前端代码加密方式" class="headerlink" title="常见前端代码加密方式"></a>常见前端代码加密方式</h2><p>​    如果“加密”就是让别人无法反向工程摸索你的代码逻辑的话，那是没办法的，其实任何一种语言都避免不了被反向工程，而JavaScript的特点是下载到了客户的机器上执行，所以无论如何都可以被摸清楚，只是困难度而已！那我们怎么增加困难度呢？</p><p>常见的一些nodejs “加密的办法”</p><ul><li>代码压缩</li><li>代码混淆</li><li>JS 自己加载 加密的文件和执行内容（解密方法暴露了）</li><li>代码内容存入一些特殊的文件内（例如png等），然后加载</li><li>利用 enclosejs （是一款开源的打包、加密工具；用于打包、加密nodejs的的工程）</li><li>….</li></ul><h2 id="electron-中的前端代码"><a href="#electron-中的前端代码" class="headerlink" title="electron 中的前端代码"></a>electron 中的前端代码</h2><p>​    electron的 代码是直接随安装包一起发布的，上述的一些方法完全起不到任何作用，electron又不像 nw、cef那样提供一些丰富的接口可以达到加密的目的，官方只有一个 asar 压缩代码，那怎么解决呢？</p><p>加密的目的：</p><ul><li>源码加密</li><li>解密方式不好破解</li></ul><p>纯前端方式无法实现，那么借助C++来实现，如何实现：</p><ul><li>C++ 调用读取加密文件</li><li>C++ 解密文件</li><li>C++ 加载运行JavaScript</li></ul><p>这样就可以比较完整的解决加密的问题，C++ 不知道加密文件地址，那么把加密文件路径传递给C++解密去运行</p><h2 id="代码加密实现"><a href="#代码加密实现" class="headerlink" title="代码加密实现"></a>代码加密实现</h2><p>需要实现的内容：</p><ul><li>遍历获取所有的 JS 代码文件</li><li>AES 加密文件内容存放到一个地址</li><li>源文件内容修改为 加载C++加密模块 传入加密之后的路径</li></ul><h3 id="获取所有-JS-代码路径"><a href="#获取所有-JS-代码路径" class="headerlink" title="获取所有 JS 代码路径"></a>获取所有 JS 代码路径</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//遍历 递归 获取js文件列表</span><span class="token keyword">function</span> <span class="token function">GetJsFiles</span><span class="token punctuation">(</span>pathDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> files <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>pathDir<span class="token punctuation">)</span>    files<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> filepath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>pathDir<span class="token punctuation">,</span> filename<span class="token punctuation">)</span>        <span class="token keyword">var</span> info <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">statSync</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">".js"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// console.log(filepath)</span>            jsFileList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">GetJsFiles</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>​    </p><h3 id="文件内容AES-加密"><a href="#文件内容AES-加密" class="headerlink" title="文件内容AES 加密"></a>文件内容AES 加密</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'crypto'</span><span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> md5file <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'md5-file'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//输入 utf8 输出 binary 加密</span><span class="token keyword">var</span> encryptData <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>chCodeId<span class="token punctuation">,</span> filedata<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//传入文件的MD5值 作为key 和向量的 参数</span>    <span class="token keyword">var</span> _iv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Buffer</span><span class="token punctuation">(</span>chCodeId<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//从md5值 的第5位开始取16个值</span>    <span class="token keyword">var</span> _ucKey <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"</span>    <span class="token keyword">var</span> _Key <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Buffer</span><span class="token punctuation">(</span>_ucKey<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_iv<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> cipher <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">createCipheriv</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">,</span> _Key<span class="token punctuation">,</span> _iv<span class="token punctuation">)</span>    <span class="token keyword">var</span> crypted <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>filedata<span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token string">'binary'</span><span class="token punctuation">)</span>    crypted <span class="token operator">+</span><span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">final</span><span class="token punctuation">(</span><span class="token string">'binary'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> crypted<span class="token punctuation">}</span></code></pre><h2 id="修改原JS代码文件的内容"><a href="#修改原JS代码文件的内容" class="headerlink" title="修改原JS代码文件的内容"></a>修改原JS代码文件的内容</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">modifyJsfile</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> md5value<span class="token punctuation">,</span>isEnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> stringcode <span class="token operator">=</span> <span class="token template-string"><span class="token string">`  const path = require('path');  const resourcesDirPath = (process.resourcesPath = process.resourcesPath || process.env.resourcesPath);  var yzj_loadjs = require('decrypt');  yzj_loadjs.Load(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>isEnode<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,resourcesDirPath, '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>md5value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">' , null, require, null, __filename, __dirname, process);  yzj_loadjs = null;  `</span></span>  fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> stringcode<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>通过 process.resourcesPath = process.resourcesPath || process.env.resourcesPath 获取electron下资源文件夹目录</p><p>require(‘decrypt’) 为解密模块</p><p>传入的参数：</p><ul><li>isEnode 是否加密了</li><li>resourcesDirPath 资源文件目录</li><li>md5value 源文件加密之后的md5值 用来找到源文件 </li></ul><p>其他参数有什么用，后面解密部分你就会了解</p><h2 id="加密JS文件列表-并且写入-指定目录中"><a href="#加密JS文件列表-并且写入-指定目录中" class="headerlink" title="加密JS文件列表 并且写入 指定目录中"></a>加密JS文件列表 并且写入 指定目录中</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">EncodeJSfiles</span><span class="token punctuation">(</span>fileList<span class="token punctuation">,</span> encodeJSfilePath<span class="token punctuation">,</span>isEnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    fileList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取原文件的md5值</span>        <span class="token function">md5file</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err            <span class="token keyword">var</span> filedata <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'读取文件内容文件:'</span> <span class="token operator">+</span> filename<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>encodeJSfilePath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                fs<span class="token punctuation">.</span><span class="token function">mkdirSync</span><span class="token punctuation">(</span>encodeJSfilePath<span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token keyword">var</span> savefilename <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>encodeJSfilePath<span class="token punctuation">,</span> hash<span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'对文件内容进行加密处理:'</span> <span class="token operator">+</span> filename<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isEnode <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> enfileData <span class="token operator">=</span> <span class="token function">encryptData</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> filedata<span class="token punctuation">)</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'对加密的内容存入文件:'</span> <span class="token operator">+</span> savefilename<span class="token punctuation">)</span>                fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>savefilename<span class="token punctuation">,</span> enfileData<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'encoding'</span><span class="token punctuation">:</span> <span class="token string">'binary'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//把加密后的内容写入文件</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'对未加密的内容存入文件:'</span> <span class="token operator">+</span> savefilename<span class="token punctuation">)</span>                fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>savefilename<span class="token punctuation">,</span> filedata<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'encoding'</span><span class="token punctuation">:</span> <span class="token string">'utf8'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//把加密后的内容写入文件</span>            <span class="token punctuation">}</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'对原js代码文件内容进行更改:'</span> <span class="token operator">+</span> filename<span class="token punctuation">)</span>            <span class="token function">modifyJsfile</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>hash<span class="token punctuation">,</span>isEnode<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>代码加密部分比较容易实现，主要是解密，解密请参考下一篇文章 </p><hr><hr><p><strong>所有图片均来自网络</strong></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> electron </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>electron编译文件清理</title>
      <link href="/electron-bian-yi-wen-jian-qing-li.html"/>
      <url>/electron-bian-yi-wen-jian-qing-li.html</url>
      
        <content type="html"><![CDATA[<h2 id="windows-平台清理垃圾文件"><a href="#windows-平台清理垃圾文件" class="headerlink" title="windows 平台清理垃圾文件"></a>windows 平台清理垃圾文件</h2><h3 id="对执行程序无用的垃圾文件有那些"><a href="#对执行程序无用的垃圾文件有那些" class="headerlink" title="对执行程序无用的垃圾文件有那些"></a>对执行程序无用的垃圾文件有那些</h3><ul><li>C++工程编译的文件</li><li>mac 端才使用的模块文件</li><li>文档文件 例如 markdown、doc、excel 等这类开发文档文件</li><li>C++ 源代码文件，如 cpp、cc、h、hpp 等</li><li>objecC 源代码文件，mm、m、swift 文件等  </li><li>mac端才能使用的二进制文件如 .dylib、.framework、.a等文件</li><li>可能没有用的压缩文件 tar、7z、zip文件（可选）</li></ul><h3 id="部分脚本"><a href="#部分脚本" class="headerlink" title="部分脚本"></a>部分脚本</h3><pre class=" language-shell"><code class="language-shell"># 删除一些无关平台文件  /usr/bin/find $curdir -name "linux*" | xargs rm -rf;  /usr/bin/find $curdir -name "darwin*" | xargs rm -rf;  # 删除 visualstudio 编译之后的无用编译文件  /usr/bin/find $curdir -name "*.tlog" | xargs rm -rf;  /usr/bin/find $curdir -name "*.pdb" | xargs rm -rf;  /usr/bin/find $curdir -name "*.exp" | xargs rm -rf;  /usr/bin/find $curdir -name "*.obj" | xargs rm -rf;  /usr/bin/find $curdir -name "obj" | xargs rm -rf;  /usr/bin/find $curdir -name "*.pch" | xargs rm -rf;  /usr/bin/find $curdir -name "*.idb" | xargs rm -rf;  /usr/bin/find $curdir -name "*.ncb" | xargs rm -rf;  /usr/bin/find $curdir -name "*.opt" | xargs rm -rf;  /usr/bin/find $curdir -name "*.plg" | xargs rm -rf;  /usr/bin/find $curdir -name "*.res" | xargs rm -rf;  /usr/bin/find $curdir -name "*.sbr" | xargs rm -rf;  /usr/bin/find $curdir -name "*.ilk" | xargs rm -rf;  /usr/bin/find $curdir -name "*.aps" | xargs rm -rf;  /usr/bin/find $curdir -name "*.sdf" | xargs rm -rf;  /usr/bin/find $curdir -name "*.temp" | xargs rm -rf;  /usr/bin/find $curdir -name "*.dcu" | xargs rm -rf;  /usr/bin/find $curdir -name "*.bsc" | xargs rm -rf;  /usr/bin/find $curdir -name "*.ipch" | xargs rm -rf;  /usr/bin/find $curdir -name "*.map" | xargs rm -rf;  /usr/bin/find $curdir -name "*.exp" | xargs rm -rf;  /usr/bin/find $curdir -name "*.lib" | xargs rm -rf;  /usr/bin/find $curdir -name "*.filters" | xargs rm -rf;  /usr/bin/find $curdir -name "*.vcxproj" | xargs rm -rf;  /usr/bin/find $curdir -name "*.props" | xargs rm -rf;  /usr/bin/find $curdir -name "*.targets" | xargs rm -rf;  # 删除C++、objc源代码文件  /usr/bin/find $curdir -name "*.cpp" | xargs rm -rf;  /usr/bin/find $curdir -name "*.cc" | xargs rm -rf;  /usr/bin/find $curdir -name "*.c" | xargs rm -rf;  /usr/bin/find $curdir -name "*.hpp" | xargs rm -rf;  /usr/bin/find $curdir -name "*.mm" | xargs rm -rf;  /usr/bin/find $curdir -name "*.h" | xargs rm -rf;  /usr/bin/find $curdir -name "*.h" | xargs rm -rf;  /usr/bin/find $curdir -name "*.lzz" | xargs rm -rf;   # 删除编译脚本文件  /usr/bin/find $curdir -name "*.py" | xargs rm -rf;  /usr/bin/find $curdir -name "*.gyp" | xargs rm -rf;  /usr/bin/find $curdir -name "*.gyp*" | xargs rm -rf;  /usr/bin/find $curdir -name "lzz-gyp" | xargs rm -rf;  # 删除一些压缩文件 如果某个类型有用就别删除  /usr/bin/find $curdir -name "*.gz" | xargs rm -rf;  /usr/bin/find $curdir -name "*.rar" | xargs rm -rf;  /usr/bin/find $curdir -name "*.7z" | xargs rm -rf;  /usr/bin/find $curdir -name "*.framework" | xargs rm -rf;  /usr/bin/find $curdir -name "*.zip" | xargs rm -rf;  /usr/bin/find $curdir -name "*.dylib" | xargs rm -rf;  # 删除一些没用的说明文件  /usr/bin/find $curdir -name "*.txt" | xargs rm -rf;  /usr/bin/find $curdir -name "*.md" | xargs rm -rf;  /usr/bin/find $curdir -name "*.doc" | xargs rm -rf;  /usr/bin/find $curdir -name "*.docx" | xargs rm -rf;  # 删除其他  /usr/bin/find $curdir -name "yarn" | xargs rm -rf;</code></pre><h3 id="mac平台"><a href="#mac平台" class="headerlink" title="mac平台"></a>mac平台</h3><h3 id="对执行程序无用的垃圾文件有那些-1"><a href="#对执行程序无用的垃圾文件有那些-1" class="headerlink" title="对执行程序无用的垃圾文件有那些"></a>对执行程序无用的垃圾文件有那些</h3><ul><li>C++工程编译的文件</li><li>window 端才使用的模块</li><li>文档文件 例如 markdown、doc、excel 等这类开发文档文件</li><li>C++ 源代码文件，如 cpp、cc、h、hpp 等</li><li>objecC 源代码文件，mm、m、swift 文件等</li><li>windows端才能使用的二进制文件如 dll,lib等文件</li><li>可能没有用的压缩文件 tar、7z、zip文件（可选）</li><li>…..</li></ul><h3 id="部分脚本-1"><a href="#部分脚本-1" class="headerlink" title="部分脚本"></a>部分脚本</h3><pre class=" language-shell"><code class="language-shell">#删除无关平台的一些文件find $curdir -name "win32*"  | xargs rm -rf;find $curdir -name "linux*"  | xargs rm -rf;#mac端删除xcode编译多出来的垃圾文件find $curdir -name "*.tlog" | xargs rm -rf;find $curdir -name "obj" | xargs rm -rf;find $curdir -name "*.pdb" | xargs rm -rf;find $curdir -name "*.exp" | xargs rm -rf;find $curdir -name "*.obj" | xargs rm -rf;find $curdir -name "*.pch" | xargs rm -rf;find $curdir -name "*.idb" | xargs rm -rf;find $curdir -name "*.ncb" | xargs rm -rf;find $curdir -name "*.opt" | xargs rm -rf;find $curdir -name "*.plg" | xargs rm -rf;find $curdir -name "*.tlog" | xargs rm -rf;find $curdir -name "*.res" | xargs rm -rf;find $curdir -name "*.sbr" | xargs rm -rf;find $curdir -name "*.ilk" | xargs rm -rf;find $curdir -name "*.aps" | xargs rm -rf;find $curdir -name "*.sdf" | xargs rm -rf;find $curdir -name "*.temp" | xargs rm -rf;find $curdir -name "*.dcu" | xargs rm -rf;find $curdir -name "*.bsc" | xargs rm -rf;find $curdir -name "*.ipch" | xargs rm -rf;find $curdir -name "*.xcodeproj" | xargs rm -rf;find $curdir -name "*.vcxproj" | xargs rm -rf;find $curdir -name "*.mk" | xargs rm -rf;find $curdir -name "*.Makefile" | xargs rm -rf;find $curdir -name "*.rc" | xargs rm -rf;# 删除C++、objc源代码文件find $curdir -name "*.cpp" | xargs rm -rf;find $curdir -name "*.cc" | xargs rm -rf;find $curdir -name "*.c" | xargs rm -rf;find $curdir -name "*.hpp" | xargs rm -rf;find $curdir -name "*.mm" | xargs rm -rf;find $curdir -name "*.m" | xargs rm -rf;find $curdir -name "*.xib" | xargs rm -rf;find $curdir -name "*.h" | xargs rm -rf;find $curdir -name "*.h" | xargs rm -rf;find $curdir -name "*.lzz" | xargs rm -rf;  # 删除编译脚本文件find $curdir -name "*.py" | xargs rm -rf;find $curdir -name "*.gyp" | xargs rm -rf;find $curdir -name "*.gyp*" | xargs rm -rf;find $curdir -name "lzz-gyp" | xargs rm -rf;find $curdir -name "*.map" | xargs rm -rf;find $curdir -name "*.a" | xargs rm -rf;# 删除一些压缩文件 如果某个类型有用就别删除find $curdir -name "*.gz" | xargs rm -rf;find $curdir -name "*.rar" | xargs rm -rf;find $curdir -name "*.7z" | xargs rm -rf;find $curdir -name "*.dll" | xargs rm -rf;# 删除一些没用的说明文件find $curdir -name "*.txt" | xargs rm -rf;find $curdir -name "*.md" | xargs rm -rf;find $curdir -name "*.doc" | xargs rm -rf;find $curdir -name "*.docx" | xargs rm -rf; # 删除其他find $curdir -name "yarn" | xargs rm -rf;</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这只是一部分，其中还有需要没用的文件，慢慢优化减少electron安装包的体积</p><hr><hr><p><strong>所有图片均来自网络</strong></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>electron 工程 打包</title>
      <link href="/electron-gong-cheng-da-bao.html"/>
      <url>/electron-gong-cheng-da-bao.html</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>这一套方案只是介绍了我在工程中用的一种解决方案，当然还有很多其他解决方案。</p><h2 id="实现目的"><a href="#实现目的" class="headerlink" title="实现目的"></a>实现目的</h2><p>把electron工程打包成一个安装包，在客户机器上安装完成之后可以直接使用，安装包中包含electron的运行环境，以及工程实现代码</p><h2 id="完整流程"><a href="#完整流程" class="headerlink" title="完整流程"></a>完整流程</h2><h3 id="前端代码打包"><a href="#前端代码打包" class="headerlink" title="前端代码打包"></a>前端代码打包</h3><p>web端代码编译、压缩、混淆代码。这个方案就不细说了，网上可以找到很多相关资料</p><h3 id="electron-builder-生成绿色包"><a href="#electron-builder-生成绿色包" class="headerlink" title="electron-builder 生成绿色包"></a>electron-builder 生成绿色包</h3><p>需要使用 electron-builder 模块来打包electron，electron-builder 具体使用细节可以参考<a href="https://www.electron.build/" target="_blank" rel="noopener">官方文档</a>,配置好基本参数例如：图标、是否压缩、源码目录等</p><p>在工程package.json中部分配置如下：</p><pre class=" language-json"><code class="language-json"><span class="token property">"build"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"directories"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"buildResources"</span><span class="token operator">:</span> <span class="token string">"resource"</span><span class="token punctuation">,</span>            <span class="token property">"output"</span><span class="token operator">:</span> <span class="token string">"dist"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"asar"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token property">"asarUnpack"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"*******"</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"compression"</span><span class="token operator">:</span> <span class="token string">"maximum"</span><span class="token punctuation">,</span>        <span class="token property">"files"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"build"</span><span class="token punctuation">,</span>            <span class="token string">"resource"</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"forceCodeSigning"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token property">"mac"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"icon"</span><span class="token operator">:</span> <span class="token string">"resource/mac/icon.icns"</span><span class="token punctuation">,</span>            <span class="token property">"compression"</span><span class="token operator">:</span> <span class="token string">"maximum"</span><span class="token punctuation">,</span>            <span class="token property">"target"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"dir"</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"win"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"icon"</span><span class="token operator">:</span> <span class="token string">"resource/windows/icon.ico"</span><span class="token punctuation">,</span>            <span class="token property">"target"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"dir"</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>你也可以使用electron-package等模块完成类似工作</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>electron可以加载asar压缩模块内容，但是有几中文件是不能放入asar中的</p><ul><li>C++的 dll 库文件，在asar中无法运行，因为C++没办法加载asar中文件</li><li>C++中加载的资源文件，同上</li><li>objc 加载的资源文件，同上</li></ul><p>最终electron 的资源resource 目录下可以变成</p><ul><li>electron.asar  electron本身自动的代码</li><li>app.asar      可以压缩的纯前端代码以及.node文件</li><li>app.asar.unpacked    如果模块中涉及到C++ dll,那么把整个模块移入到 app.asar.unpacked，当然也可以通过动态加载C++ dll 不需要全部移到这里</li></ul><h3 id="清理nodejs-C-模块中无用文件，减少总体积"><a href="#清理nodejs-C-模块中无用文件，减少总体积" class="headerlink" title="清理nodejs C++模块中无用文件，减少总体积"></a>清理nodejs C++模块中无用文件，减少总体积</h3><p>​    具体实现参考<a href="./electron-bian-yi-wen-jian-qing-li.html">electron编译文件清理</a> 文章</p><h3 id="拷贝相关license"><a href="#拷贝相关license" class="headerlink" title="拷贝相关license"></a>拷贝相关license</h3><p>​    如果集成了第三方库或者功能，拷贝相应的license到 绿色包目录下 </p><h3 id="拷贝C-动态库"><a href="#拷贝C-动态库" class="headerlink" title="拷贝C++动态库"></a>拷贝C++动态库</h3><p>​    目的是把包含C++ dll 或者dylib、framework 的模块 拷贝到  app.asar.unpacked 中，在windows和mac 下要注意不同的 资源路径</p><h3 id="代码加密"><a href="#代码加密" class="headerlink" title="代码加密"></a>代码加密</h3><p><a href="./electron-dai-ma-jia-mi.html">electron代码加密</a></p><p><a href="./electron-dai-ma-jie-mi.html">electron代码解密</a></p><h3 id="代码签名"><a href="#代码签名" class="headerlink" title="代码签名"></a>代码签名</h3><p><a href="./windows-dai-ma-qian-ming.html">windows数字签名</a></p><p><a href="./macosx-qian-ming.html">macosx数字签名</a></p><h3 id="压缩app目录为asar文件"><a href="#压缩app目录为asar文件" class="headerlink" title="压缩app目录为asar文件"></a>压缩app目录为asar文件</h3><pre class=" language-shell"><code class="language-shell"># windows 实现asar pack ./dist/win-ia32-unpacked/resources/app ./dist/win-ia32-unpacked/resources/app.asar;# mac 实现 asar pack ./dist/mac/$AppProductName.app/Contents/Resources/app ./dist/mac/$AppProductName.app/Contents/Resources/app.asar</code></pre><h3 id="把绿色包制作成安装包"><a href="#把绿色包制作成安装包" class="headerlink" title="把绿色包制作成安装包"></a>把绿色包制作成安装包</h3><p>在npm 上有很多相关的模块</p><p>windows 可以用 nsis、innosetup 脚本来定制化你的界面</p><p>mac 上有生成dmg、pkg的模块</p><hr><p><strong>所有图片均来自网络</strong></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> electron </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《这样读书就够了》读后感</title>
      <link href="/zhe-yang-du-shu-jiu-gou-liao.html"/>
      <url>/zhe-yang-du-shu-jiu-gou-liao.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/05/22/5ce4ff8cef1de81441.jpg" alt=""></p><hr><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><h4 id="成人读书存在的问题"><a href="#成人读书存在的问题" class="headerlink" title="成人读书存在的问题"></a>成人读书存在的问题</h4><blockquote><ul><li>没时间、没精力</li><li>看不懂、记不住</li><li>看不下去</li></ul></blockquote><h4 id="成人有效学习的五大公理"><a href="#成人有效学习的五大公理" class="headerlink" title="成人有效学习的五大公理"></a>成人有效学习的五大公理</h4><blockquote><ul><li>自我导向</li><li>关联经验</li><li>强调实践</li><li>聚焦于解决实际问题</li><li>内在驱动</li></ul></blockquote><p>《这样读书就够了》为解决上面的问题使用什么方法？</p><h2 id="拆书法"><a href="#拆书法" class="headerlink" title="拆书法"></a>拆书法</h2><h3 id="RIA-阅读拆页-讲解引导-拆为己用-便签法"><a href="#RIA-阅读拆页-讲解引导-拆为己用-便签法" class="headerlink" title="RIA=阅读拆页+讲解引导+拆为己用 便签法"></a>RIA=阅读拆页+讲解引导+拆为己用 便签法</h3><ul><li><strong>R（Reading，阅读拆页）在读书时，遇到某一个心动片段，停下来，划出来</strong></li><li><strong>I（Interpretation，讲解引导）用自己的话复述原文知识，理解知识并关联自己</strong></li><li><strong>A（Appropriation，拆为己用）</strong> <ul><li><strong>A1便签 写和这个知识有关的自己的经验，通过反思自己的相关经验，让这个知识真的和自己有关</strong></li><li><strong>A2便签 写下针对这个知识自己可以如何进行的下一步行动</strong></li></ul></li></ul><h3 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h3><ul><li>明确目标：提升学习力</li><li>拆解原则：反求诸己</li><li>使用辅助工具：便签</li></ul><h3 id="拆解步骤"><a href="#拆解步骤" class="headerlink" title="拆解步骤"></a>拆解步骤</h3><ul><li>第一步，确定你要读的是致用类的图书，这是拆书法的适用边界。确定你读这本书的目的是为了提升自己某方面的能力，解决具体的问题，并能在实际工作和生活中用上。</li><li>第二步，要求自己用较快的速度阅读，遇到书中的理论、建议、观点或者较难理解的地方时，先问自己一个问题：这对我有多重要？如果这些只是在原书的知识体系中很重要，而对我现在并不重要，那就省下一张便签。如果对我重要或有用，则放慢阅读速度，细读相关内容。</li><li>第三步，在I便签上用自己的语言简要重述相关信息，也可以是总结自己得到的启发、有价值的提醒。写好后贴在相应的书页。</li><li>第四步，针对书中的某个信息，问问自己有没有相关的经历，是否听说或者见到过类似的事情，写在一张A1便签上，贴到I便签旁边。</li><li>第五步，规划今后如何应用。尽量先考虑应用的目标，再写下达到目标应实施的行动。写在一张A2便签上，也贴在书页上。</li><li>第六步，在贴了便签的书页旁，贴一张指示标签。提醒自己这一页有自己的学习资料。</li><li>第七步，看完一本书后，把所有的A2便签拿出来贴在冰箱或墙上，提醒自己落实行动。</li></ul><h3 id="便签细节"><a href="#便签细节" class="headerlink" title="便签细节"></a>便签细节</h3><h4 id="I-便签"><a href="#I-便签" class="headerlink" title="I 便签"></a>I 便签</h4><ul><li>重述知识标准<br>  1.诠释：基本用自己的语言，不直接引用原文语句。<br>  2.准确：对原文相关知识点解读准确。<br>  3.清晰：逻辑清晰，文字精练。<br>  4.致用：将原文知识点总结或加工成具体的操作方法或建议步骤。</li><li>误区<br>  附会就知<br>  只需要对着你写下的I便签问问自己：若是没读那段原文的话，I便签写下的这些我知不知道？如果答案是“我早就知道”，那你很可能就是在用旧知附会新知了。</li></ul><h4 id="A1便签"><a href="#A1便签" class="headerlink" title="A1便签"></a>A1便签</h4><ul><li>内化知识的标准<br>  1.鲜活：是自己亲身经历的，亲眼所见、亲耳所闻的认知。<br>  2.故事：相关叙事要素基本完整，能够清晰地体现出起因和结果。<br>  3.对应：和原文或I便签的4个要素对应，使之成为贴切的案例。<br>  4.反思：无论想到的是成功还是失败的经验，都能帮助自己更深入地理解这个经验，也加深了对原文信息的认知。</li><li>误区<br>泛泛而谈</li></ul><h4 id="A2-便签"><a href="#A2-便签" class="headerlink" title="A2 便签"></a>A2 便签</h4><ul><li><p>应用知识的标准<br>  1.目标：是否规划了目标？目标是否符合SMART法则[插图]？<br>  SMART法则是指制定目标时应该遵循的5个原则，包括S（specific，明确的），M（measurable，可衡量的），A（attainable，可实现的），R（result-based，结果导向的）和T（time-based，明确的截止期限）<br>  2.行动：行动是否可以拉近现状与目标的距离？具体行动步骤如何？行动人是谁？在哪里？行动何时开始？频率如何？<br>  3.关联：是否使用了原文信息或I便签的方法。<br>  4.可控：都是自己能做到或能推动他人做到的吗？可以量化做的程度吗？行动显性化吗？</p></li><li><p>A2便签常见误区：<br>  决心泛滥或感慨万千</p></li></ul><h3 id="学习力展示"><a href="#学习力展示" class="headerlink" title="学习力展示"></a>学习力展示</h3><h4 id="成人学习的三个维度"><a href="#成人学习的三个维度" class="headerlink" title="成人学习的三个维度"></a>成人学习的三个维度</h4><ul><li>追问和反思经验的能力</li><li>分析和整理信息的能力</li><li>内化和应用知识的能力</li></ul><h4 id="标签思维法怎样来提升学习力的"><a href="#标签思维法怎样来提升学习力的" class="headerlink" title="标签思维法怎样来提升学习力的"></a>标签思维法怎样来提升学习力的</h4><p>方法：</p><p>​    追前因后果</p><p>​    前（前车可鉴）：为什么这件事对我重要？作者是怎么引出这个信息的？</p><p>​    因（相因相生）：作者提出了哪些关于原因的假设？是怎么验证或排除这些假设的？还有其他可能性吗？</p><p>​    后（以观后效）：若依从信息去做之后会怎样？对我的好处（效用）是什么？</p><p>​    果（自食其果）：不这么做的后果是什么？不改变的问题有多严重？</p><p>​    明确适用边界</p><p>​    适（适得其反）：有没有相反的观点？有没有不支持这个观点的实例？</p><p>​    用（使用条件）：要这样做得具备哪些条件（考虑成本收益，考虑态度能力……）？什么情况下是不管用的？</p><p>​    边（旁敲边鼓）：从前有没有类似的（或看起来差不多的）信息？其他领域/行业/作者如何看待类似的问题？</p><p>​    界（楚河汉界）：无论是相反的还是类似的信息，和这个信息的真正区别是什么？交界在哪里？</p><p>可以用来：</p><ul><li>解读知识 ，分析整理信息    </li><li>为信息添加上下文，</li><li>I便签：辨别知识和信息</li><li>借助A1、A2便签来追问和反思</li><li>升级学习力</li><li>辨别干货</li></ul><p>  <img src="https://i.loli.net/2019/05/22/5ce4ffc8dbaf120773.jpg" alt=""></p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>   拆书法有只能拆适用类图书，其他书籍使用此方法难有效果。成人读书如果不能自身去尝试和使用无法解决<br>实际中遇到的问题，在打造自己的知识体系过程中，只有修内在，才能外在显示效果，拆书法就是一个内在的修炼方法。需要多锻炼、多练习才能孰能生巧，方能成为自己的拆书家，提升学习力！</p><ul><li>I 标签：<br>  在这本书中作者以分析了成人学习存在的问题和成人有效学习的目的为切入点，通过拆书方法去解决学习力不足的问题，提升学习力，聚沙成塔打造自己的知识体系</li><li>A1 标签：<br> 在上个读上一本书《微习惯》的时候，使用书中的策略在培养自己的小习惯，但是有些东西没有深入去挖掘内在，在具体实施过程中有时经常用动力去完成这个习惯任务。</li><li>A2 标签：<br>  目标：练习拆书法<br>  行动：在读下一本时使用拆书法去拆解内容，写下相关的 I、A1、A2 标签   </li></ul><p>“<strong>行有不得，反求诸己</strong>。” 这句话出自《孟子·离娄上》，它的含义是：事情做不成功，遇到了挫折和困难，或者人际关系处得不好，就要自我反省，一切从自己身上找原因。 而我们平时的做法却往往与圣人背道而驰。 有了问题，不是怨天尤人，而是反躬自省。 </p><hr><p><strong>所有图片均来自网络</strong></p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 学习力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《微习惯》读后感</title>
      <link href="/wei-xi-guan.html"/>
      <url>/wei-xi-guan.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/05/20/5ce2c303b1cb453353.jpg" alt=""></p><hr><h2 id="什么是微习惯"><a href="#什么是微习惯" class="headerlink" title="什么是微习惯"></a>什么是微习惯</h2><blockquote><p><strong>微习惯是一种非常微小的积极行为，你需要每天强迫自己完成它。 微习惯太小，小到不可能失败。</strong></p></blockquote><h2 id="微习惯策略与其他策略"><a href="#微习惯策略与其他策略" class="headerlink" title="微习惯策略与其他策略"></a>微习惯策略与其他策略</h2><blockquote><h3 id="动力策略"><a href="#动力策略" class="headerlink" title="动力策略"></a>动力策略</h3><ul><li>动力不可靠（有时候激发不了）</li><li>不会每次都能激发动力</li><li>边际效益递减（意思就是动力会损耗）</li></ul></blockquote><blockquote><h3 id="意志力策略"><a href="#意志力策略" class="headerlink" title="意志力策略"></a>意志力策略</h3><ul><li>对比动力策略<ul><li>可靠</li><li>可以被强化</li><li>意志力策略可以通过计划执行</li></ul></li><li>缺点 容易损耗，损耗因素有<ul><li>努力程度</li><li>感知难度</li><li>消极情绪</li><li>主观疲劳</li><li>血糖水平</li></ul></li></ul></blockquote><blockquote><h3 id="微习惯策略"><a href="#微习惯策略" class="headerlink" title="微习惯策略"></a>微习惯策略</h3><ul><li>微习惯策略优势<ul><li>以微习惯方式运用意志力，以求较小消耗意志力</li><li>微习惯拓宽你的舒适区 ，因为不会一下踏出你的舒适区，而是扩展边缘</li><li>出现阻力 时 更容易突破<ul><li>开始时   ，因为目标小容易开始行动，不需要消耗很大的动力</li><li>过程中，因为目标够小只需要一点意志力就可以行动，更容易坚持</li></ul></li><li>更容易 跨越障碍<ul><li>身体障碍  </li><li>精神障碍</li></ul></li></ul></li></ul></blockquote><h2 id="为什么使用微习惯策略"><a href="#为什么使用微习惯策略" class="headerlink" title="为什么使用微习惯策略"></a>为什么使用微习惯策略</h2><blockquote><ul><li>没有截止时间</li><li>提升自我效能感</li><li>给与自主权</li><li>远离恐惧、犹豫等情绪</li><li>增强意志力</li></ul></blockquote><h3 id="微习惯策略-1"><a href="#微习惯策略-1" class="headerlink" title="微习惯策略"></a>微习惯策略</h3><blockquote><ul><li>选中合适的微习惯和计划<ul><li>数量不要同时超过4个</li><li>把想法变小和把微习惯变小一样重要</li><li>微习惯小道不耗什么力气就可以完成</li></ul></li><li>挖掘每一个微习惯的内在价值<ul><li>找到你要建立这个习惯你希望的源头，例如健身到底是为了什么？读书为了什么？如果没有产出什么结果，再大的决心也毫无价值</li></ul></li><li>明确习惯依据，纳入日程</li><li>建立回报机制 提升成就感</li><li>记录与追踪完成情况</li><li>微量开始，超额完成</li><li>服从计划安排，摆脱高期待值</li><li>留意习惯养成的标志</li></ul></blockquote><h2 id="微习惯策略八大原则"><a href="#微习惯策略八大原则" class="headerlink" title="微习惯策略八大原则"></a>微习惯策略八大原则</h2><blockquote><ul><li>绝不自欺欺人</li><li>满意每一个进步</li><li>经常回报自己，尤其在完成微习惯之后</li><li>保持头脑清醒</li><li>感到强烈抵触情绪是，后退并缩小目标</li><li>自我鼓励</li><li>不要小看微步骤</li><li>用多余的精力超额完成任务，而不是制定更大目标</li></ul></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>就像作者说的本书不是讲培养习惯的方法，更多像一个自控力自控力运用指导手册，通过微习惯来提高意志力、自控力。在建立习惯过程中，总希望通过激发动力或者靠意志力完成，但是往往人们总会习惯性的高估自己的自控力而失败了。习惯不能直接获得他们是长期不断重复中被塑造出来的，怎么长期呢？就是找他你要养成这个习惯的意义，然后设置一个小到能够毫不费力的可以坚持下去，渐渐地拓展自己的舒适区从而适应这个习惯，潜意识的去完成。</p></blockquote><hr><h2 id="学习之后"><a href="#学习之后" class="headerlink" title="学习之后"></a>学习之后</h2><ul><li>建立两个微习惯<ul><li>每个周末选择一个阅读方向和书籍</li><li>每天阅读十分钟</li></ul></li><li>过程<ul><li>每天记录</li><li>及时回顾与验证自身处在状态</li></ul></li></ul><p><strong>小决心比大决心更有效果 –行动吧！</strong></p><hr><p><img src="https://i.loli.net/2019/05/20/5ce2c822ca61359774.jpg" alt="坚持读书"></p><hr><p><strong>所有图片均来自网络</strong></p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 习惯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《如何戒掉坏习惯》读后感</title>
      <link href="/ru-he-jie-diao-pi-xi-guan.html"/>
      <url>/ru-he-jie-diao-pi-xi-guan.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/05/19/5ce0ee9195ceb63570.jpg" alt=""></p><hr><h2 id="什么是坏习惯"><a href="#什么是坏习惯" class="headerlink" title="什么是坏习惯"></a>什么是坏习惯</h2><blockquote><ul><li>定义<br>  所谓坏习惯，是指禁不住眼前的欲望或是诱惑的驱使，从长远来看会带来负面影响的习惯。坏习惯愈演愈烈，还会像以前的我一样滋生出恶性循环。这些坏习惯会夺走你人生中宝贵的时间，让周围的人失去对你的信任，最后还会夺走你最珍贵的财富——自信。</li><li>特点<br>  劣质货币会驱逐优良货币。”这就是格雷沙姆法则（劣币驱逐良币法则）。它是指一旦对劣质货币（假币）的流通放任不管，人们就不会去使用优良货币（真正的货币），从而导致优良货币从市场上消失。养成了不少坏习惯就会驱逐好习惯</li><li>影响<ul><li>无法保持身体健康</li><li>浪费时间</li><li>生活节奏被打乱</li><li>自我印象降低</li><li>幸福感下降</li></ul></li><li>分类<ul><li>行动性习惯</li><li>身体性习惯</li><li>思考性习惯<br><img src="https://i.loli.net/2019/05/19/5ce0ef8acd9fe38458.jpg" alt=""></li></ul></li></ul></blockquote><h2 id="为什么戒不掉坏习惯"><a href="#为什么戒不掉坏习惯" class="headerlink" title="为什么戒不掉坏习惯"></a>为什么戒不掉坏习惯</h2><blockquote><ul><li>习惯引力的法则</li><li>意识与无意识的平衡</li><li>欲望与理智的斗争</li></ul></blockquote><h2 id="怎么戒掉"><a href="#怎么戒掉" class="headerlink" title="怎么戒掉"></a>怎么戒掉</h2><blockquote><ul><li>明确需要戒掉的习惯</li><li>拥有战胜欲望和诱惑的心灵力量</li><li>合理分配欲望和痛苦</li><li>过程<ul><li>禁欲期<ul><li>方针 克服千难万阻</li><li>对策<ul><li>营造杜绝诱惑的环境</li><li>将行动可视化</li><li>给破罐子破摔设定上限</li></ul></li></ul></li><li>动力缺乏期<ul><li>方针 指定成功范例</li><li>对策<ul><li>设定必胜模式</li><li>制定例外规则</li><li>提升动力</li><li>配合持续开关灵活运用</li></ul></li></ul></li><li>稳定期<ul><li>方针 提高实践率</li><li>对策<ul><li>回顾行动</li><li>彻底斩断坏习惯</li></ul></li></ul></li><li>倦怠期<ul><li>方针 设置变化</li><li>对策<ul><li>注入刺激</li><li>计划下一个习惯</li></ul></li></ul></li></ul></li></ul></blockquote><hr><h2 id="书评"><a href="#书评" class="headerlink" title="书评"></a>书评</h2><blockquote><p> 本书大纲比较乱，感觉仅仅是为了补充《坚持，一种可以养成的习惯》匆匆而写的一本书，不过习惯的正反面相互补充与验证，让自己在行动的过程验证自我。</p></blockquote><hr><p><strong>你的坏习惯有哪些</strong></p><blockquote><p>  <img src="https://i.loli.net/2019/05/19/5ce0f0295e8d057135.jpg" alt=""></p></blockquote><p><img src="https://i.loli.net/2019/05/19/5ce0f4985f73426648.jpg" alt=""></p><hr><p><strong>所有图片均来自网络</strong></p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 习惯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《坚持,一种可以养成的习惯》读后感</title>
      <link href="/jian-chi-yi-chong-ke-yi-yang-cheng-de-xi-guan.html"/>
      <url>/jian-chi-yi-chong-ke-yi-yang-cheng-de-xi-guan.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/05/19/5ce0f575b145579285.jpg" alt=""></p><hr><h2 id="什么是习惯"><a href="#什么是习惯" class="headerlink" title="什么是习惯"></a>什么是习惯</h2><blockquote><p>所谓习惯就是“不依赖意志或毅力，把自己想要持续的事情引导到如每天刷牙般轻松的状态”。总之，保持行动自动地持续进行，就是“习惯”。​习惯就是在脑中设定的程序。从早上起床的时间到通勤路线、用餐时间等，大脑每天光是花时间计划这所有的事情，一天就结束了，根本没有多余的时间做其他的事。于是，大脑设定了一套程序，把固定而重复的行动化为无意识的重复动作。</p></blockquote><h3 id="习惯分类"><a href="#习惯分类" class="headerlink" title="习惯分类"></a>习惯分类</h3><blockquote><ul><li>行为习惯<br>每天规律的行为，例如，读书、写日记、整理、节约、记录家庭收支等。这些行为习惯根据工作或生活环境不同，比较具有弹性，所以对人类而言，培养行为习惯难度不大。培养习惯的时间大约需要一个月</li><li>身体习惯<br>身体习惯是与身体节奏相关的习惯。例如，减肥、运动、早起、戒烟、肌力训练等。相较于行为习惯，培养身体习惯带来的变化对人的影响较大。培养习惯的时间大约需要三个月</li><li>思考习惯<br>这是与思考能力相关的习惯。例如，逻辑性思考能力、创意能力、正面思考以及纾压思考等习惯。思考习惯与当事人的性格有关，所以对于变化所产生的抵抗也最强烈。培养习惯的时间大约需要六个月。</li></ul></blockquote><h2 id="为什么要培养习惯"><a href="#为什么要培养习惯" class="headerlink" title="为什么要培养习惯"></a>为什么要培养习惯</h2><blockquote><p>  <strong>你的所有行动几乎全部，或至少有95％，是由你本人的习惯所决定的。从早上起床到晚上就寝，习惯控制着你的言行和对旁人的反应。而那些成功的人都培养了较好的习惯……所谓习惯，就是对于外来的刺激做出无意识的反应，或是条件反射式的反应。无论如何，当身体学会某种行动，不用思考或努力就可以轻松做出反应，这就是习惯。一旦某种行动化为习惯，就可以在无意识中进行控制。一旦化为习惯，就可以通过较少的劳功获得较大的成果。 心理学家也说，人类有95％的行动是在无意识中进行的，而大部分的无意识行动都是通过习惯产生的。</strong></p></blockquote><h2 id="为什么无法坚持"><a href="#为什么无法坚持" class="headerlink" title="为什么无法坚持"></a>为什么无法坚持</h2><blockquote><p>  简单来说，那是因为人类具有“对抗新变化、维持现状的倾向”的特点。让我再详细说明一下吧。环境变化时，生物会将生理状态维持在某一固定状态，这一状态称为“体内平衡”。我们因应外在的变化，保护自己的身体，通过这样的方式生存下去​抵抗新变化​维持现状</p></blockquote><h2 id="怎么培养"><a href="#怎么培养" class="headerlink" title="怎么培养"></a>怎么培养</h2><h3 id="培养习惯三个原则"><a href="#培养习惯三个原则" class="headerlink" title="培养习惯三个原则"></a>培养习惯三个原则</h3><blockquote><ul><li>锁定一个习惯（不要同时培养多个习惯）<br>  例如减肥的时同时进行饮食控制和运动</li><li>坚持有效的行动（行动规则越简单越好）<br>  复杂的事情容易失败，简单的事物容易坚持</li><li>不要太在意结果<br>  一减肥为例，如果每天称体重，砍刀每个月体重只减1-2斤会感到很焦急，​以专注目标来提高动力是很有用的，我也肯定这样的做法，不过，前提是绝对不能打乱习惯的行动节奏。首先应该重视的是培养习惯本身才对。</li></ul></blockquote><h3 id="培养习惯的三个时期"><a href="#培养习惯的三个时期" class="headerlink" title="培养习惯的三个时期"></a>培养习惯的三个时期</h3><h4 id="阶段一-反抗期：马上就想放弃-（第1天-第7天）"><a href="#阶段一-反抗期：马上就想放弃-（第1天-第7天）" class="headerlink" title="阶段一 反抗期：马上就想放弃 （第1天~第7天）"></a>阶段一 反抗期：马上就想放弃 （第1天~第7天）</h4><p><img src="https://upload-images.jianshu.io/upload_images/5544178-567fe19dd098a535.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/186/format/webp" alt=""></p><blockquote><ul><li>常出现的症状<ul><li>马上就感觉没劲，只有三分钟热度。</li><li>计划内容太过勉强，导致中途放弃。</li><li>时间一天天过去，变得越来越懒得行动</li></ul></li><li>怎么度过<br>  那就是只要把重心放在“撑下去”上就好。也就是说，“每天持续行动”是很重要的。说的夸张点，比如用功念书，那能够是每天打开书本就好；如果是跑步的话，做跑步前的热身运动也可以。这个阶段可以完全忽略行动量或结果。克服反抗期有以下两项具体对策：</li><li>对策一：以“婴儿学步”开始；<br>  以培养运动习惯为例，如果设定每天跑步5公里为目标门槛太高，那么先每天走路十五分开始，这样能轻松开始了，过一阵子，习惯走路之后，自然的就会形成慢跑的良性循环​​<ul><li>效果<br>  行动压力小<br>  引发动力</li><li>方法<ul><li>方法一 细分“时间”<br>  例如 ​5分钟整理15分钟阅读3分钟写日记15分钟跑步</li><li>方法二 细分“步骤”<br>  例如只整理一个房间读一页书写一行日记“走路”而非跑“马拉松”​</li></ul></li><li>重点<ul><li>设定容易执行的门槛</li><li>抛开不足感</li><li>每天持续为这个习惯执行</li></ul></li></ul></li><li>对策二：简单记录<br>  冈田说：“笔记瘦身法的目的，就是让人停止为肥胖做出无谓的努力。”如果清楚自己在超市商店所买的果汁与零食的热量，就会知道自己为肥胖做了多少无意义的努力，也自然会减少摄取不该摄取的热量了<ul><li>效果<ul><li>能够客观的分析并了解问题</li><li>减少行动的不确定性</li><li>提高动力</li></ul></li><li>方法<ul><li>思考记录内容（要记录那些项目）</li><li>思考记录的媒介（要记录在哪里）</li></ul></li><li>重点<ul><li>不要过于繁琐</li><li>每天记录</li></ul></li></ul></li></ul></blockquote><h4 id="阶段二-不稳定期：被预定事项或他人影响（第8天-第21天）"><a href="#阶段二-不稳定期：被预定事项或他人影响（第8天-第21天）" class="headerlink" title="阶段二 不稳定期：被预定事项或他人影响（第8天~第21天）"></a>阶段二 不稳定期：被预定事项或他人影响（第8天~第21天）</h4><p><img src="https://upload-images.jianshu.io/upload_images/5544178-1b06f06ebbdfb1df.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/189/format/webp" alt=""></p><blockquote><ul><li>常出现的症状<ul><li>在已安排好的时间内插入其他事情而荒废计划</li><li>因为加班或个人私事导致计划中断</li><li>因为天气或突发事件导致多日无法持续行动</li></ul></li><li>对策<ul><li>行为模式化<br>  比起每天在不同地点或不同时间点采取行动，重复已化为模式的行动会更容易。这就是成功培养习惯的捷径。<ul><li>效果<ul><li>培养节奏感</li><li>不容易忘记</li></ul></li><li>方法<ul><li>时间：决定星期几、几点开始</li><li>内容：决定数量于方法</li><li>地址：决定地点</li></ul></li><li>重点<ul><li>尽量找出不被侵犯的“圣地”</li><li>考虑一举两得的做法<br>  <img src="https://i.loli.net/2019/05/19/5ce03492bd19c71429.png" alt=""></li><li>每天持续行动</li></ul></li></ul></li><li>设定例外规则<br>  如果因为这类突发事件导致行动总是被中断的话，可能就会产生自我厌恶感或无力感，继而提不起劲，最后就容易失败。<ul><li>效果<ul><li>有弹性的执行计划</li><li>减少压力</li></ul></li><li>方法<ul><li>考虑例外情况</li><li>身体情况，天气，预定事项</li><li>考虑应对方法</li></ul></li><li>重点<ul><li>假设可能例外的状况</li><li>一边尝试一边变更“例外规则”</li></ul></li></ul></li><li>设定持续开关<br>  “持续开关”是善于培养习惯的人为了能够持续行动所设计的一些巧妙的方法。例如，学习时，有人会奖励自己以提升干劲，也有的人会把目标分数写在纸上为自己加油打气，还有人认为跟朋友一起用功学习才有效果。<ul><li>效果<ul><li>能够获得动力</li><li>建立能够持续的机制</li></ul></li><li>方法<ul><li>糖果型开关<ul><li>奖励</li><li>被称赞</li><li>游戏</li><li>理想模式</li><li>仪式</li><li>去除障碍</li></ul></li><li>惩罚型开关<ul><li>损益计算</li><li>结交朋友</li><li>对大众宣布</li><li>处罚游戏</li><li>设定目标</li><li>强制力</li></ul></li></ul></li><li>重点<ul><li>了解自己擅长的事</li><li>不同习惯有不同的 机制</li></ul></li></ul></li></ul></li></ul></blockquote><h4 id="阶段三-倦怠期：逐渐感到厌烦-（第22天-第30天）"><a href="#阶段三-倦怠期：逐渐感到厌烦-（第22天-第30天）" class="headerlink" title="阶段三 倦怠期：逐渐感到厌烦 （第22天~第30天）"></a>阶段三 倦怠期：逐渐感到厌烦 （第22天~第30天）</h4><p><img src="https://upload-images.jianshu.io/upload_images/5544178-eab90d1d74b00194.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/187/format/webp" alt=""></p><blockquote><ul><li>常出现的症状<ul><li>感觉厌烦提不起劲</li><li>感受不到培养习惯的意义</li><li>因一成不变而产生空虚感</li></ul></li><li>对策<ul><li>添加变化<br>  以不同方式行动<ul><li>效果<ul><li>以崭新的心情重新出发</li><li>产生动力</li></ul></li><li>方法<ul><li>改变内容、环境</li><li>使用 “持续开关”</li></ul></li><li>重点<ul><li>以“一举两得” 的角度思考</li><li>准备多重变化</li><li>不要轻易改变模式或规则</li></ul></li></ul></li><li>计划培养下一个习惯<ul><li>效果<ul><li>可以看到现在培养习惯的经过</li><li>提高培养习惯的能力</li></ul></li><li>方法<ul><li>把目标倒过来计算</li><li><ul><li>拟定计划</li></ul></li></ul></li><li>重点<ul><li>排列优先级<ul><li>就算已经拟定好计划也不要执行</li></ul></li></ul></li></ul></li></ul></li></ul></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><ul><li>不同级别的习惯 设定不同的持续时间</li><li>配合持续开关灵活运用</li><li>从小习惯开始</li><li>持续行动</li></ul></blockquote><h2 id="书评"><a href="#书评" class="headerlink" title="书评"></a>书评</h2><blockquote><p>本书想要全面的剖析习惯怎么养成，不过只分析了行动性习惯，这种比较容易坚持的一种习惯方式。不过整体上还是非常有帮助的，从小习惯开始培养和坚持，关注过程而不是结果，“相信过程”是最好的注解。</p></blockquote><hr><p><img src="https://i.loli.net/2019/05/19/5ce03a34266b134145.jpg" alt=""></p><hr><p><strong>所有图片均来自网络</strong></p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 习惯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac osx 涂抹马赛克实现</title>
      <link href="/mac-osx-tu-mo-ma-sai-ke-shi-xian.html"/>
      <url>/mac-osx-tu-mo-ma-sai-ke-shi-xian.html</url>
      
        <content type="html"><![CDATA[<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>参考 <a href="https://www.jianshu.com/p/e4bebae1b36f" target="_blank" rel="noopener">iOS手指涂抹位置变马赛克的实现</a> 实现 mac osx 版本</p><h2 id="图片马赛克实现"><a href="#图片马赛克实现" class="headerlink" title="图片马赛克实现"></a>图片马赛克实现</h2><p> 借助CoreImage 库中的 CIFilter 滤镜，我们可以轻易实现图片的马赛克 代码如下</p><pre class=" language-objectivec"><code class="language-objectivec">NSImage <span class="token operator">*</span> img1 <span class="token operator">=</span> <span class="token punctuation">[</span>NSImage imageNamed<span class="token punctuation">:</span><span class="token string">@"1.png"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>CGImageSourceRef source <span class="token operator">=</span> <span class="token function">CGImageSourceCreateWithData</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__bridge  CFDataRef<span class="token punctuation">)</span>img1<span class="token punctuation">.</span>TIFFRepresentation<span class="token punctuation">,</span> nil<span class="token punctuation">)</span><span class="token punctuation">;</span>CGImageRef inImage <span class="token operator">=</span> <span class="token function">CGImageSourceCreateImageAtIndex</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nil<span class="token punctuation">)</span><span class="token punctuation">;</span>CIImage <span class="token operator">*</span>ciImage  <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>CIImage alloc<span class="token punctuation">]</span> initWithCGImage<span class="token punctuation">:</span>inImage<span class="token punctuation">]</span><span class="token punctuation">;</span>CIFilter <span class="token operator">*</span>filter  <span class="token operator">=</span> <span class="token punctuation">[</span>CIFilter filterWithName<span class="token punctuation">:</span><span class="token string">@"CIPixellate"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">[</span>filter setDefaults<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">[</span>filter setValue<span class="token punctuation">:</span>ciImage forKey<span class="token punctuation">:</span>kCIInputImageKey<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">[</span>filter setValue<span class="token punctuation">:</span><span class="token operator">@</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">.</span>f<span class="token punctuation">)</span> forKey<span class="token punctuation">:</span>kCIInputScaleKey<span class="token punctuation">]</span><span class="token punctuation">;</span>CIImage <span class="token operator">*</span> outPutImg <span class="token operator">=</span> <span class="token punctuation">[</span>filter outputImage<span class="token punctuation">]</span><span class="token punctuation">;</span>NSCIImageRep <span class="token operator">*</span> rep <span class="token operator">=</span> <span class="token punctuation">[</span>NSCIImageRep imageRepWithCIImage<span class="token punctuation">:</span>outPutImg<span class="token punctuation">]</span><span class="token punctuation">;</span>NSImage <span class="token operator">*</span>img2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSImage alloc<span class="token punctuation">]</span> initWithSize<span class="token punctuation">:</span><span class="token punctuation">[</span>outPutImg extent<span class="token punctuation">]</span><span class="token punctuation">.</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">[</span>img2 addRepresentation<span class="token punctuation">:</span>rep<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h2 id="CAShapeLayer"><a href="#CAShapeLayer" class="headerlink" title="CAShapeLayer"></a>CAShapeLayer</h2><p>通过图层遮罩来实现 根据Path 显示马赛克</p><pre class=" language-objectivec"><code class="language-objectivec"><span class="token comment" spellcheck="true">//mac 使用layer 必须设置wantsLayer = YES，默认是NO</span><span class="token keyword">self</span><span class="token punctuation">.</span>view<span class="token punctuation">.</span>wantsLayer <span class="token operator">=</span> YES<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加layer（imageLayer）到self上</span><span class="token keyword">self</span><span class="token punctuation">.</span>imageLabyer <span class="token operator">=</span> <span class="token punctuation">[</span>CALayer layer<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">self</span><span class="token punctuation">.</span>imageLabyer<span class="token punctuation">.</span>frame <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>view<span class="token punctuation">.</span>bounds<span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>view<span class="token punctuation">.</span>layer addSublayer<span class="token punctuation">:</span><span class="token keyword">self</span><span class="token punctuation">.</span>imageLabyer<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">self</span><span class="token punctuation">.</span>shapeLayer <span class="token operator">=</span> <span class="token punctuation">[</span>CAShapeLayer layer<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">self</span><span class="token punctuation">.</span>shapeLayer<span class="token punctuation">.</span>frame <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>view<span class="token punctuation">.</span>bounds<span class="token punctuation">;</span><span class="token keyword">self</span><span class="token punctuation">.</span>shapeLayer<span class="token punctuation">.</span>lineCap <span class="token operator">=</span> kCALineCapRound<span class="token punctuation">;</span><span class="token keyword">self</span><span class="token punctuation">.</span>shapeLayer<span class="token punctuation">.</span>lineJoin <span class="token operator">=</span> kCALineJoinRound<span class="token punctuation">;</span><span class="token keyword">self</span><span class="token punctuation">.</span>shapeLayer<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token number">40.0f</span><span class="token punctuation">;</span><span class="token keyword">self</span><span class="token punctuation">.</span>shapeLayer<span class="token punctuation">.</span>strokeColor <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSColor blueColor<span class="token punctuation">]</span> CGColor<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">self</span><span class="token punctuation">.</span>shapeLayer<span class="token punctuation">.</span>fillColor <span class="token operator">=</span> nil<span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>view<span class="token punctuation">.</span>layer addSublayer<span class="token punctuation">:</span><span class="token keyword">self</span><span class="token punctuation">.</span>shapeLayer<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置mask</span><span class="token keyword">self</span><span class="token punctuation">.</span>imageLabyer<span class="token punctuation">.</span>mask <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>shapeLayer<span class="token punctuation">;</span><span class="token keyword">self</span><span class="token punctuation">.</span>path <span class="token operator">=</span> <span class="token function">CGPathCreateMutable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置马赛克图片</span><span class="token keyword">self</span><span class="token punctuation">.</span>imageLabyer<span class="token punctuation">.</span>contents <span class="token operator">=</span> img2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置底图</span><span class="token keyword">self</span><span class="token punctuation">.</span>view<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>contents <span class="token operator">=</span> img1<span class="token punctuation">;</span></code></pre><h2 id="鼠标响应处理"><a href="#鼠标响应处理" class="headerlink" title="鼠标响应处理"></a>鼠标响应处理</h2><p>  设置View 监听鼠标移动消息<br>  <code>[self.view addTrackingRect:self.view.bounds                    owner:self                 userData:nil             assumeInside:YES];</code></p><p> 处理鼠标移动消息</p><pre class=" language-objectivec"><code class="language-objectivec"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>mouseDown<span class="token punctuation">:</span><span class="token punctuation">(</span>NSEvent <span class="token operator">*</span><span class="token punctuation">)</span>event<span class="token punctuation">{</span>    CGPoint pt <span class="token operator">=</span> event<span class="token punctuation">.</span>locationInWindow<span class="token punctuation">;</span>    <span class="token function">CGPathMoveToPoint</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>path<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> pt<span class="token punctuation">.</span>x<span class="token punctuation">,</span> pt<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    CGMutablePathRef path <span class="token operator">=</span> <span class="token function">CGPathCreateMutableCopy</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">self</span><span class="token punctuation">.</span>shapeLayer<span class="token punctuation">.</span>path <span class="token operator">=</span> path<span class="token punctuation">;</span>    <span class="token function">CGPathRelease</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@"mouseDown"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>mouseUp<span class="token punctuation">:</span><span class="token punctuation">(</span>NSEvent <span class="token operator">*</span><span class="token punctuation">)</span>event<span class="token punctuation">{</span>    <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@"mouseUp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>mouseDragged<span class="token punctuation">:</span><span class="token punctuation">(</span>NSEvent <span class="token operator">*</span><span class="token punctuation">)</span>event<span class="token punctuation">{</span>    CGPoint pt <span class="token operator">=</span> event<span class="token punctuation">.</span>locationInWindow<span class="token punctuation">;</span>    <span class="token function">CGPathAddLineToPoint</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>path<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>pt<span class="token punctuation">.</span>x<span class="token punctuation">,</span> pt<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    CGMutablePathRef path <span class="token operator">=</span> <span class="token function">CGPathCreateMutableCopy</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">self</span><span class="token punctuation">.</span>shapeLayer<span class="token punctuation">.</span>path <span class="token operator">=</span> path<span class="token punctuation">;</span>    <span class="token function">CGPathRelease</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@"mouseDragged"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://upload-images.jianshu.io/upload_images/1728667-c5e135087d60614b.gif?imageMogr2/auto-orient/strip" alt="效果图"></p><p><a href="https://github.com/Smoking/mosiac.git" target="_blank" rel="noopener" title="源码">源码</a></p><p><a href="https://www.lcptcheater.com" target="_blank" rel="noopener">深圳利程电子有限公司</a></p><hr><p><strong>所有图片均来自网络</strong></p>]]></content>
      
      
      <categories>
          
          <category> macosx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> objc </tag>
            
            <tag> macosx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac osx 剪贴板操作</title>
      <link href="/mac-osx-jian-tie-ban-cao-zuo.html"/>
      <url>/mac-osx-jian-tie-ban-cao-zuo.html</url>
      
        <content type="html"><![CDATA[<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="获取剪贴板"><a href="#获取剪贴板" class="headerlink" title="获取剪贴板"></a>获取剪贴板</h3><pre class=" language-objectivec"><code class="language-objectivec">NSPasteboard <span class="token operator">*</span>pasteboard <span class="token operator">=</span> <span class="token punctuation">[</span>NSPasteboard generalPasteboard<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h3 id="清除剪贴板"><a href="#清除剪贴板" class="headerlink" title="清除剪贴板"></a>清除剪贴板</h3><pre class=" language-objectivec"><code class="language-objectivec"><span class="token punctuation">[</span>pasteboard clearContents<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h2 id="枚举剪贴板中的数据类型"><a href="#枚举剪贴板中的数据类型" class="headerlink" title="枚举剪贴板中的数据类型"></a>枚举剪贴板中的数据类型</h2><pre class=" language-objectivec"><code class="language-objectivec">NSPasteboard <span class="token operator">*</span>pasteboard <span class="token operator">=</span> <span class="token punctuation">[</span>NSPasteboard generalPasteboard<span class="token punctuation">]</span><span class="token punctuation">;</span>NSArray <span class="token operator">*</span>urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span>NSPasteboard generalPasteboard<span class="token punctuation">]</span> readObjectsForClasses<span class="token punctuation">:</span><span class="token operator">@</span><span class="token punctuation">[</span><span class="token punctuation">[</span>NSURL class<span class="token punctuation">]</span><span class="token punctuation">]</span> options<span class="token punctuation">:</span><span class="token operator">@</span><span class="token punctuation">{</span>NSPasteboardURLReadingFileURLsOnlyKey<span class="token punctuation">:</span> <span class="token operator">@</span><span class="token punctuation">(</span>YES<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span> valueForKey<span class="token punctuation">:</span><span class="token string">@"path"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>urls<span class="token punctuation">.</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    NSString <span class="token operator">*</span>_nsStr <span class="token operator">=</span> <span class="token string">@"dropfile"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>pasteboard canReadItemWithDataConformingToTypes<span class="token punctuation">:</span><span class="token operator">@</span><span class="token punctuation">[</span>NSPasteboardTypeRTF<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">||</span>          <span class="token punctuation">[</span>pasteboard canReadItemWithDataConformingToTypes<span class="token punctuation">:</span><span class="token operator">@</span><span class="token punctuation">[</span>NSPasteboardTypeRTFD<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    NSString <span class="token operator">*</span>_nsStr <span class="token operator">=</span> <span class="token string">@"rtf"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>pasteboard canReadItemWithDataConformingToTypes<span class="token punctuation">:</span><span class="token operator">@</span><span class="token punctuation">[</span>NSPasteboardTypePNG<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">||</span>         <span class="token punctuation">[</span>pasteboard canReadItemWithDataConformingToTypes<span class="token punctuation">:</span><span class="token operator">@</span><span class="token punctuation">[</span>NSPasteboardTypeTIFF<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    NSString <span class="token operator">*</span>_nsStr <span class="token operator">=</span> <span class="token string">@"image"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>pasteboard canReadItemWithDataConformingToTypes<span class="token punctuation">:</span><span class="token operator">@</span><span class="token punctuation">[</span>NSPasteboardTypeHTML<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    NSString <span class="token operator">*</span>_nsStr <span class="token operator">=</span> <span class="token string">@"html"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>pasteboard canReadItemWithDataConformingToTypes<span class="token punctuation">:</span><span class="token operator">@</span><span class="token punctuation">[</span>NSPasteboardTypeString<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    NSString <span class="token operator">*</span>_nsStr <span class="token operator">=</span> <span class="token string">@"text"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>    NSString <span class="token operator">*</span>_nsStr <span class="token operator">=</span> <span class="token string">@"orther"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="从剪贴板中获取拷贝的文件地址"><a href="#从剪贴板中获取拷贝的文件地址" class="headerlink" title="从剪贴板中获取拷贝的文件地址"></a>从剪贴板中获取拷贝的文件地址</h2><pre class=" language-objectivec"><code class="language-objectivec">NSArray <span class="token operator">*</span>urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span>NSPasteboard generalPasteboard<span class="token punctuation">]</span> readObjectsForClasses<span class="token punctuation">:</span><span class="token operator">@</span><span class="token punctuation">[</span><span class="token punctuation">[</span>NSURL class<span class="token punctuation">]</span><span class="token punctuation">]</span> options<span class="token punctuation">:</span><span class="token operator">@</span><span class="token punctuation">{</span>NSPasteboardURLReadingFileURLsOnlyKey<span class="token punctuation">:</span> <span class="token operator">@</span><span class="token punctuation">(</span>YES<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span> valueForKey<span class="token punctuation">:</span><span class="token string">@"path"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>NSInteger i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>urls<span class="token punctuation">.</span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>string _strTemp <span class="token operator">=</span> <span class="token punctuation">[</span>urls<span class="token punctuation">[</span>i<span class="token punctuation">]</span> UTF8String<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@"filepath:%s"</span><span class="token punctuation">,</span>_strTemp<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="往剪贴板中写入数据"><a href="#往剪贴板中写入数据" class="headerlink" title="往剪贴板中写入数据"></a>往剪贴板中写入数据</h2><pre class=" language-objectivec"><code class="language-objectivec">bool Clipboard<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">SetClipboardData</span><span class="token punctuation">(</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span>string _strFormatName<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> _pBuffer<span class="token punctuation">,</span> size_t _len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pasteboard <span class="token operator">==</span> nil<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">OpenClipboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    NSData <span class="token operator">*</span> _nsData <span class="token operator">=</span> <span class="token punctuation">[</span>NSData dataWithBytes<span class="token punctuation">:</span>_pBuffer length<span class="token punctuation">:</span>_len<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>_strFormatName <span class="token operator">==</span> <span class="token string">"text"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">[</span>pasteboard setData<span class="token punctuation">:</span>_nsData forType<span class="token punctuation">:</span>NSPasteboardTypeString<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>_strFormatName <span class="token operator">==</span> <span class="token string">"image"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">[</span>pasteboard setData<span class="token punctuation">:</span>_nsData forType<span class="token punctuation">:</span>NSPasteboardTypePNG<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>_strFormatName <span class="token operator">==</span> <span class="token string">"html"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">[</span>pasteboard setData<span class="token punctuation">:</span>_nsData forType<span class="token punctuation">:</span>NSPasteboardTypeHTML<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>_strFormatName <span class="token operator">==</span> <span class="token string">"rtf"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">[</span>pasteboard setData<span class="token punctuation">:</span>_nsData forType<span class="token punctuation">:</span>NSPasteboardTypeRTF<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        NSString <span class="token operator">*</span> _nsFormatName <span class="token operator">=</span> <span class="token punctuation">[</span>NSString stringWithCString<span class="token punctuation">:</span>_strFormatName<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> encoding<span class="token punctuation">:</span>NSUTF8StringEncoding<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">[</span>pasteboard setData<span class="token punctuation">:</span>_nsData forType<span class="token punctuation">:</span>_nsFormatName<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="往剪贴板中写入需要拷贝的文件地址"><a href="#往剪贴板中写入需要拷贝的文件地址" class="headerlink" title="往剪贴板中写入需要拷贝的文件地址"></a>往剪贴板中写入需要拷贝的文件地址</h2><pre class=" language-objectivec"><code class="language-objectivec">bool Clipboard<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">SetDropFileData</span><span class="token punctuation">(</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span>vector<span class="token operator">&lt;</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span>string<span class="token operator">></span> _vctFile<span class="token punctuation">,</span> bool _bCopyOrCut<span class="token punctuation">)</span><span class="token punctuation">{</span>    pasteboard <span class="token operator">=</span> <span class="token punctuation">[</span>NSPasteboard pasteboardWithName<span class="token punctuation">:</span>NSGeneralPboard<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span>pasteboard clearContents<span class="token punctuation">]</span><span class="token punctuation">;</span>    NSMutableArray <span class="token operator">*</span> _urlArry <span class="token operator">=</span> <span class="token punctuation">[</span>NSMutableArray array<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it<span class="token punctuation">:</span>_vctFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>        NSString <span class="token operator">*</span>_nsstrTemp <span class="token operator">=</span> <span class="token punctuation">[</span>NSString stringWithUTF8String<span class="token punctuation">:</span>it<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        NSURL<span class="token operator">*</span> _url <span class="token operator">=</span> <span class="token punctuation">[</span>NSURL fileURLWithPath<span class="token punctuation">:</span>_nsstrTemp isDirectory<span class="token punctuation">:</span>NO<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">[</span>_urlArry addObject<span class="token punctuation">:</span>_url<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">[</span>pasteboard writeObjects<span class="token punctuation">:</span>_urlArry<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><a href="https://www.lcptcheater.com" target="_blank" rel="noopener">深圳利程电子有限公司</a></p><hr><p><strong>所有图片均来自网络</strong></p>]]></content>
      
      
      <categories>
          
          <category> macosx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> objc </tag>
            
            <tag> macosx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac osx 获取系统信息</title>
      <link href="/mac-osx-huo-qu-xi-tong-xin-xi.html"/>
      <url>/mac-osx-huo-qu-xi-tong-xin-xi.html</url>
      
        <content type="html"><![CDATA[<h4 id="获取mac地址"><a href="#获取mac地址" class="headerlink" title="获取mac地址"></a>获取mac地址</h4><pre class=" language-objectivec"><code class="language-objectivec">bool ComputerDevice<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">GetMacAddress</span><span class="token punctuation">(</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span>vector<span class="token operator">&lt;</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span>string<span class="token operator">></span><span class="token operator">&amp;</span> vctMacAddress_<span class="token punctuation">)</span><span class="token punctuation">{</span>    kern_return_t kr<span class="token punctuation">;</span>    CFMutableDictionaryRef matchDict<span class="token punctuation">;</span>    io_iterator_t iterator<span class="token punctuation">;</span>    io_registry_entry_t entry<span class="token punctuation">;</span>    matchDict <span class="token operator">=</span> <span class="token function">IOServiceMatching</span><span class="token punctuation">(</span><span class="token string">"IOEthernetInterface"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    kr <span class="token operator">=</span> <span class="token function">IOServiceGetMatchingServices</span><span class="token punctuation">(</span>kIOMasterPortDefault<span class="token punctuation">,</span> matchDict<span class="token punctuation">,</span> <span class="token operator">&amp;</span>iterator<span class="token punctuation">)</span><span class="token punctuation">;</span>    NSDictionary <span class="token operator">*</span>resultInfo <span class="token operator">=</span> nil<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>entry <span class="token operator">=</span> <span class="token function">IOIteratorNext</span><span class="token punctuation">(</span>iterator<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        CFMutableDictionaryRef properties<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>        kr <span class="token operator">=</span> <span class="token function">IORegistryEntryCreateCFProperties</span><span class="token punctuation">(</span>entry<span class="token punctuation">,</span>                                               <span class="token operator">&amp;</span>properties<span class="token punctuation">,</span>                                               kCFAllocatorDefault<span class="token punctuation">,</span>                                               kNilOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            resultInfo <span class="token operator">=</span> <span class="token punctuation">(</span>NSDictionary <span class="token operator">*</span><span class="token punctuation">)</span>properties<span class="token punctuation">;</span>            NSString <span class="token operator">*</span>bsdName <span class="token operator">=</span> <span class="token punctuation">[</span>resultInfo objectForKey<span class="token punctuation">:</span><span class="token string">@"BSD Name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            NSData <span class="token operator">*</span>macData <span class="token operator">=</span> <span class="token punctuation">[</span>resultInfo objectForKey<span class="token punctuation">:</span><span class="token string">@"IOMACAddress"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>macData<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            NSMutableString <span class="token operator">*</span>macAddress <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSMutableString alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> UInt8 <span class="token operator">*</span>bytes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> UInt8<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">[</span>macData bytes<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>NSUInteger i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>macData<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token punctuation">[</span>macAddress appendFormat<span class="token punctuation">:</span><span class="token string">@"%02x"</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span>bytes<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//打印Mac地址</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bsdName <span class="token operator">&amp;&amp;</span> macAddress<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@"网卡:%@\nMac地址:%@\n"</span><span class="token punctuation">,</span>bsdName<span class="token punctuation">,</span>macAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>                vctMacAddress_<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">[</span>macAddress UTF8String<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">IOObjectRelease</span><span class="token punctuation">(</span>iterator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="获取CPU-序列号"><a href="#获取CPU-序列号" class="headerlink" title="获取CPU 序列号"></a>获取CPU 序列号</h4><pre class=" language-objectivec"><code class="language-objectivec">std<span class="token punctuation">:</span><span class="token punctuation">:</span>string ComputerDevice<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">GetCpuIdSerial</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    NSProcessInfo<span class="token operator">*</span> pinfo <span class="token operator">=</span> <span class="token punctuation">[</span>NSProcessInfo processInfo<span class="token punctuation">]</span><span class="token punctuation">;</span>    NSString<span class="token operator">*</span> ret <span class="token operator">=</span> <span class="token punctuation">[</span>pinfo globallyUniqueString<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>ret UTF8String<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="获取操作系统序列号"><a href="#获取操作系统序列号" class="headerlink" title="获取操作系统序列号"></a>获取操作系统序列号</h4><pre class=" language-objectivec"><code class="language-objectivec">std<span class="token punctuation">:</span><span class="token punctuation">:</span>string ComputerDevice<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">GetSoftSytemSerial</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    NSString <span class="token operator">*</span> ret <span class="token operator">=</span> nil<span class="token punctuation">;</span>      io_service_t platformExpert <span class="token punctuation">;</span>      platformExpert <span class="token operator">=</span> <span class="token function">IOServiceGetMatchingService</span><span class="token punctuation">(</span>kIOMasterPortDefault<span class="token punctuation">,</span> <span class="token function">IOServiceMatching</span><span class="token punctuation">(</span><span class="token string">"IOPlatformExpertDevice"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>platformExpert<span class="token punctuation">)</span> <span class="token punctuation">{</span>          CFTypeRef uuidNumberAsCFString <span class="token punctuation">;</span>          uuidNumberAsCFString <span class="token operator">=</span> <span class="token function">IORegistryEntryCreateCFProperty</span><span class="token punctuation">(</span>platformExpert<span class="token punctuation">,</span> <span class="token function">CFSTR</span><span class="token punctuation">(</span><span class="token string">"IOPlatformSerialNumber"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> kCFAllocatorDefault<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>uuidNumberAsCFString<span class="token punctuation">)</span>   <span class="token punctuation">{</span>              ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>CFStringRef<span class="token punctuation">)</span>uuidNumberAsCFString copy<span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token function">CFRelease</span><span class="token punctuation">(</span>uuidNumberAsCFString<span class="token punctuation">)</span><span class="token punctuation">;</span> uuidNumberAsCFString <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token function">IOObjectRelease</span><span class="token punctuation">(</span>platformExpert<span class="token punctuation">)</span><span class="token punctuation">;</span> platformExpert <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      std<span class="token punctuation">:</span><span class="token punctuation">:</span>string str <span class="token operator">=</span> <span class="token punctuation">[</span>ret UTF8String<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span>ret autorelease<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="获取硬盘序列号"><a href="#获取硬盘序列号" class="headerlink" title="获取硬盘序列号"></a>获取硬盘序列号</h4><pre class=" language-objectivec"><code class="language-objectivec">std<span class="token punctuation">:</span><span class="token punctuation">:</span>string ComputerDevice<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">GetHardWareSerial</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    NSString <span class="token operator">*</span>ret <span class="token operator">=</span> nil<span class="token punctuation">;</span>      io_service_t platformExpert <span class="token punctuation">;</span>      platformExpert <span class="token operator">=</span> <span class="token function">IOServiceGetMatchingService</span><span class="token punctuation">(</span>kIOMasterPortDefault<span class="token punctuation">,</span> <span class="token function">IOServiceMatching</span><span class="token punctuation">(</span><span class="token string">"IOPlatformExpertDevice"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>platformExpert<span class="token punctuation">)</span> <span class="token punctuation">{</span>          CFTypeRef serialNumberAsCFString <span class="token punctuation">;</span>          serialNumberAsCFString <span class="token operator">=</span> <span class="token function">IORegistryEntryCreateCFProperty</span><span class="token punctuation">(</span>platformExpert<span class="token punctuation">,</span> <span class="token function">CFSTR</span><span class="token punctuation">(</span><span class="token string">"IOPlatformUUID"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> kCFAllocatorDefault<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>serialNumberAsCFString<span class="token punctuation">)</span> <span class="token punctuation">{</span>              ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>CFStringRef<span class="token punctuation">)</span>serialNumberAsCFString copy<span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token function">CFRelease</span><span class="token punctuation">(</span>serialNumberAsCFString<span class="token punctuation">)</span><span class="token punctuation">;</span> serialNumberAsCFString <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token function">IOObjectRelease</span><span class="token punctuation">(</span>platformExpert<span class="token punctuation">)</span><span class="token punctuation">;</span> platformExpert <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      std<span class="token punctuation">:</span><span class="token punctuation">:</span>string str <span class="token operator">=</span> <span class="token punctuation">[</span>ret UTF8String<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span>ret autorelease<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><a href="https://www.lcptcheater.com" target="_blank" rel="noopener">深圳利程电子有限公司</a></p><hr><p><strong>所有图片均来自网络</strong></p>]]></content>
      
      
      <categories>
          
          <category> macosx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> objc </tag>
            
            <tag> macosx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac osx dock栏处理</title>
      <link href="/mac-osx-dock-lan-chu-li.html"/>
      <url>/mac-osx-dock-lan-chu-li.html</url>
      
        <content type="html"><![CDATA[<h4 id="添加程序到dock栏"><a href="#添加程序到dock栏" class="headerlink" title="添加程序到dock栏"></a>添加程序到dock栏</h4><pre class=" language-objectivec"><code class="language-objectivec"><span class="token operator">-</span> <span class="token punctuation">(</span>BOOL<span class="token punctuation">)</span>addApplicationToDock<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>path <span class="token punctuation">{</span>    NSDictionary <span class="token operator">*</span>domain <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">self</span> persistentDomainForName<span class="token punctuation">:</span><span class="token string">@"com.apple.dock"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    NSArray <span class="token operator">*</span>apps <span class="token operator">=</span> <span class="token punctuation">[</span>domain objectForKey<span class="token punctuation">:</span><span class="token string">@"persistent-apps"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    NSArray <span class="token operator">*</span>matchingApps <span class="token operator">=</span> <span class="token punctuation">[</span>apps filteredArrayUsingPredicate<span class="token punctuation">:</span><span class="token punctuation">[</span>NSPredicate predicateWithFormat<span class="token punctuation">:</span><span class="token string">@"%K CONTAINS %@"</span><span class="token punctuation">,</span> <span class="token string">@"tile-data.file-data._CFURLString"</span><span class="token punctuation">,</span> path<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>matchingApps count<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        NSMutableDictionary <span class="token operator">*</span>newDomain <span class="token operator">=</span> <span class="token punctuation">[</span>domain mutableCopy<span class="token punctuation">]</span><span class="token punctuation">;</span>        NSMutableArray <span class="token operator">*</span>newApps <span class="token operator">=</span> <span class="token punctuation">[</span>apps mutableCopy<span class="token punctuation">]</span><span class="token punctuation">;</span>        NSDictionary <span class="token operator">*</span>app <span class="token operator">=</span> <span class="token punctuation">[</span>NSDictionary dictionaryWithObject<span class="token punctuation">:</span><span class="token punctuation">[</span>NSDictionary dictionaryWithObject<span class="token punctuation">:</span><span class="token punctuation">[</span>NSDictionary dictionaryWithObjectsAndKeys<span class="token punctuation">:</span>path<span class="token punctuation">,</span> <span class="token string">@"_CFURLString"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>NSNumber numberWithInt<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">@"_CFURLStringType"</span><span class="token punctuation">,</span> nil<span class="token punctuation">]</span> forKey<span class="token punctuation">:</span><span class="token string">@"file-data"</span><span class="token punctuation">]</span> forKey<span class="token punctuation">:</span><span class="token string">@"tile-data"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">[</span>newApps addObject<span class="token punctuation">:</span>app<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">[</span>newDomain setObject<span class="token punctuation">:</span>newApps forKey<span class="token punctuation">:</span><span class="token string">@"persistent-apps"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">[</span><span class="token keyword">self</span> setPersistentDomain<span class="token punctuation">:</span>newDomain forName<span class="token punctuation">:</span><span class="token string">@"com.apple.dock"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token keyword">self</span> synchronize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> NO<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="判断程序是否保留在dock栏"><a href="#判断程序是否保留在dock栏" class="headerlink" title="判断程序是否保留在dock栏"></a>判断程序是否保留在dock栏</h4><pre class=" language-objectivec"><code class="language-objectivec"><span class="token operator">-</span> <span class="token punctuation">(</span>BOOL<span class="token punctuation">)</span>isApplicationOnDock<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>name<span class="token punctuation">{</span>    NSDictionary <span class="token operator">*</span>domain <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">self</span> persistentDomainForName<span class="token punctuation">:</span><span class="token string">@"com.apple.dock"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    NSArray <span class="token operator">*</span>apps <span class="token operator">=</span> <span class="token punctuation">[</span>domain objectForKey<span class="token punctuation">:</span><span class="token string">@"persistent-apps"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    NSArray <span class="token operator">*</span>newApps <span class="token operator">=</span> <span class="token punctuation">[</span>apps filteredArrayUsingPredicate<span class="token punctuation">:</span><span class="token punctuation">[</span>NSPredicate predicateWithFormat<span class="token punctuation">:</span><span class="token string">@"not %K CONTAINS %@"</span><span class="token punctuation">,</span> <span class="token string">@"tile-data.file-data._CFURLString"</span><span class="token punctuation">,</span> name<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span>apps isEqualToArray<span class="token punctuation">:</span>newApps<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> YES<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> NO<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="从dock栏移出"><a href="#从dock栏移出" class="headerlink" title="从dock栏移出"></a>从dock栏移出</h4><pre class=" language-objectivec"><code class="language-objectivec"><span class="token operator">-</span> <span class="token punctuation">(</span>BOOL<span class="token punctuation">)</span>removeApplicationFromDock<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>name <span class="token punctuation">{</span>    NSDictionary <span class="token operator">*</span>domain <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">self</span> persistentDomainForName<span class="token punctuation">:</span><span class="token string">@"com.apple.dock"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    NSArray <span class="token operator">*</span>apps <span class="token operator">=</span> <span class="token punctuation">[</span>domain objectForKey<span class="token punctuation">:</span><span class="token string">@"persistent-apps"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    NSArray <span class="token operator">*</span>newApps <span class="token operator">=</span> <span class="token punctuation">[</span>apps filteredArrayUsingPredicate<span class="token punctuation">:</span><span class="token punctuation">[</span>NSPredicate predicateWithFormat<span class="token punctuation">:</span><span class="token string">@"not %K CONTAINS %@"</span><span class="token punctuation">,</span> <span class="token string">@"tile-data.file-data._CFURLString"</span><span class="token punctuation">,</span> name<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span>apps isEqualToArray<span class="token punctuation">:</span>newApps<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        NSMutableDictionary <span class="token operator">*</span>newDomain <span class="token operator">=</span> <span class="token punctuation">[</span>domain mutableCopy<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">[</span>newDomain setObject<span class="token punctuation">:</span>newApps forKey<span class="token punctuation">:</span><span class="token string">@"persistent-apps"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">[</span><span class="token keyword">self</span> setPersistentDomain<span class="token punctuation">:</span>newDomain forName<span class="token punctuation">:</span><span class="token string">@"com.apple.dock"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token keyword">self</span> synchronize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> NO<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><a href="https://www.lcptcheater.com" target="_blank" rel="noopener">深圳利程电子有限公司</a></p><hr><p><strong>所有图片均来自网络</strong></p>]]></content>
      
      
      <categories>
          
          <category> macosx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> objc </tag>
            
            <tag> macosx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ objc-字符串编码转换.md</title>
      <link href="/c-objc-zi-fu-chuan-bian-ma-zhuan-huan.html"/>
      <url>/c-objc-zi-fu-chuan-bian-ma-zhuan-huan.html</url>
      
        <content type="html"><![CDATA[<p>最近碰到字符串编码转换的问题，简单记录下</p><h3 id="Ascii-转unicode"><a href="#Ascii-转unicode" class="headerlink" title="Ascii 转unicode"></a>Ascii 转unicode</h3><pre class=" language-objectivec"><code class="language-objectivec">std<span class="token punctuation">:</span><span class="token punctuation">:</span>wstring <span class="token function">AsciiToWide</span><span class="token punctuation">(</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span>string _strSrc<span class="token punctuation">)</span><span class="token punctuation">{</span>    NSString <span class="token operator">*</span>_nsstr <span class="token operator">=</span> <span class="token punctuation">[</span>NSString stringWithCString<span class="token punctuation">:</span>_strSrc<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> encoding<span class="token punctuation">:</span>NSASCIIStringEncoding<span class="token punctuation">]</span><span class="token punctuation">;</span>    NSString <span class="token operator">*</span>urlStringUTF8 <span class="token operator">=</span> <span class="token punctuation">[</span>_nsstr stringByAddingPercentEscapesUsingEncoding<span class="token punctuation">:</span>NSUTF8StringEncoding<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> _cdata <span class="token operator">=</span> <span class="token punctuation">[</span>urlStringUTF8 cStringUsingEncoding<span class="token punctuation">:</span>NSUnicodeStringEncoding<span class="token punctuation">]</span><span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>wstring <span class="token function">_wstr</span><span class="token punctuation">(</span><span class="token punctuation">(</span>wchar_t<span class="token operator">*</span><span class="token punctuation">)</span>_cdata<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> _wstr<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="unicode-转-Ascii"><a href="#unicode-转-Ascii" class="headerlink" title="unicode 转 Ascii"></a>unicode 转 Ascii</h3><pre class=" language-objectivec"><code class="language-objectivec">std<span class="token punctuation">:</span><span class="token punctuation">:</span>string  <span class="token function">WideToAscii</span><span class="token punctuation">(</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span>wstring _strSrc<span class="token punctuation">)</span><span class="token punctuation">{</span>    wchar_t<span class="token operator">*</span> _csrc <span class="token operator">=</span> const_cast<span class="token operator">&lt;</span>wchar_t<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>_strSrc<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    NSString <span class="token operator">*</span>_nsstr <span class="token operator">=</span> <span class="token punctuation">[</span>NSString stringWithCString<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>_csrc encoding<span class="token punctuation">:</span>NSUnicodeStringEncoding<span class="token punctuation">]</span><span class="token punctuation">;</span>    NSString <span class="token operator">*</span>urlStringUTF8 <span class="token operator">=</span> <span class="token punctuation">[</span>_nsstr stringByAddingPercentEscapesUsingEncoding<span class="token punctuation">:</span>NSUTF8StringEncoding<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> _cdata <span class="token operator">=</span> <span class="token punctuation">[</span>urlStringUTF8 cStringUsingEncoding<span class="token punctuation">:</span>NSASCIIStringEncoding<span class="token punctuation">]</span><span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>string <span class="token function">_str</span><span class="token punctuation">(</span>_cdata<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> _str<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="utf8-转-Ascii"><a href="#utf8-转-Ascii" class="headerlink" title="utf8 转 Ascii"></a>utf8 转 Ascii</h3><pre class=" language-objectivec"><code class="language-objectivec">std<span class="token punctuation">:</span><span class="token punctuation">:</span>string  <span class="token function">UTF8ToAscii</span><span class="token punctuation">(</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span>string _strSrc<span class="token punctuation">)</span><span class="token punctuation">{</span>    NSString <span class="token operator">*</span>_nsstr <span class="token operator">=</span> <span class="token punctuation">[</span>NSString stringWithCString<span class="token punctuation">:</span>_strSrc<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> encoding<span class="token punctuation">:</span>NSUTF8StringEncoding<span class="token punctuation">]</span><span class="token punctuation">;</span>    NSString <span class="token operator">*</span>urlStringUTF8 <span class="token operator">=</span> <span class="token punctuation">[</span>_nsstr stringByAddingPercentEscapesUsingEncoding<span class="token punctuation">:</span>NSUTF8StringEncoding<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> _cdata <span class="token operator">=</span> <span class="token punctuation">[</span>urlStringUTF8 cStringUsingEncoding<span class="token punctuation">:</span>NSUTF8StringEncoding<span class="token punctuation">]</span><span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>string <span class="token function">_str</span><span class="token punctuation">(</span>_cdata<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> _str<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Ascii-转-utf8"><a href="#Ascii-转-utf8" class="headerlink" title="Ascii 转 utf8"></a>Ascii 转 utf8</h3><pre class=" language-objectivec"><code class="language-objectivec">std<span class="token punctuation">:</span><span class="token punctuation">:</span>string  <span class="token function">AsciiToUTF8</span><span class="token punctuation">(</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span>string _strSrc<span class="token punctuation">)</span><span class="token punctuation">{</span>    NSString <span class="token operator">*</span>_nsstr <span class="token operator">=</span> <span class="token punctuation">[</span>NSString stringWithCString<span class="token punctuation">:</span>_strSrc<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> encoding<span class="token punctuation">:</span>NSASCIIStringEncoding<span class="token punctuation">]</span><span class="token punctuation">;</span>    NSString <span class="token operator">*</span>urlStringUTF8 <span class="token operator">=</span> <span class="token punctuation">[</span>_nsstr stringByAddingPercentEscapesUsingEncoding<span class="token punctuation">:</span>NSUTF8StringEncoding<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> _cdata <span class="token operator">=</span> <span class="token punctuation">[</span>urlStringUTF8 cStringUsingEncoding<span class="token punctuation">:</span>NSUTF8StringEncoding<span class="token punctuation">]</span><span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>string <span class="token function">_str</span><span class="token punctuation">(</span>_cdata<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> _str<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><a href="https://www.lcptcheater.com" target="_blank" rel="noopener">深圳利程电子有限公司</a></p>]]></content>
      
      
      <categories>
          
          <category> macosx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> objc </tag>
            
            <tag> macosx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>grep指令</title>
      <link href="/grep-zhi-ling.html"/>
      <url>/grep-zhi-ling.html</url>
      
        <content type="html"><![CDATA[<p>用法: grep [选项]… PATTERN [FILE]…</p><p>在每个 FILE 或是标准输入中查找 PATTERN。</p><p>默认的 PATTERN 是一个基本正则表达式(缩写为 BRE)。</p><p>例如: grep -i ‘hello world’ menu.h main.c</p><p>正则表达式选择与解释:</p><p>  -E, –extended-regexp    PATTERN 是一个可扩展的正则表达式(缩写为 ERE)</p><p>  -F, –fixed-strings      PATTERN 是一组由断行符分隔的定长字符串。</p><p>  -G, –basic-regexp        PATTERN 是一个基本正则表达式(缩写为 BRE)</p><p>  -P, –perl-regexp        PATTERN 是一个 Perl 正则表达式</p><p>  -e, –regexp=PATTERN      用 PATTERN 来进行匹配操作</p><p>  -f, –file=FILE          从 FILE 中取得 PATTERN</p><p>  -i, –ignore-case        忽略大小写</p><p>  -w, –word-regexp        强制 PATTERN 仅完全匹配字词</p><p>  -x, –line-regexp        强制 PATTERN 仅完全匹配一行</p><p>  -z, –null-data          一个 0 字节的数据行，但不是空行</p><p>Miscellaneous:</p><p>  -s, –no-messages        suppress error messages</p><p>  -v, –invert-match        select non-matching lines</p><p>  -V, –version            display version information and exit</p><pre><code>  --help                display this help text and exit</code></pre><p>输出控制:</p><p>  -m, –max-count=NUM      NUM 次匹配后停止</p><p>  -b, –byte-offset        输出的同时打印字节偏移</p><p>  -n, –line-number        输出的同时打印行号</p><pre><code>  --line-buffered      每行输出清空</code></pre><p>  -H, –with-filename      为每一匹配项打印文件名</p><p>  -h, –no-filename        输出时不显示文件名前缀</p><pre><code>  --label=LABEL        将LABEL 作为标准输入文件名前缀</code></pre><p>  -o, –only-matching      show only the part of a line matching PATTERN</p><p>  -q, –quiet, –silent    suppress all normal output</p><pre><code>  --binary-files=TYPE  assume that binary files are TYPE;                        TYPE is &#39;binary&#39;, &#39;text&#39;, or &#39;without-match&#39;</code></pre><p>  -a, –text                equivalent to –binary-files=text</p><p>  -I                        equivalent to –binary-files=without-match</p><p>  -d, –directories=ACTION  how to handle directories;</p><pre><code>                        ACTION is &#39;read&#39;, &#39;recurse&#39;, or &#39;skip&#39;</code></pre><p>  -D, –devices=ACTION      how to handle devices, FIFOs and sockets;</p><pre><code>                        ACTION is &#39;read&#39; or &#39;skip&#39;</code></pre><p>  -r, –recursive          like –directories=recurse</p><p>  -R, –dereference-recursive</p><pre><code>                        likewise, but follow all symlinks  --include=FILE_PATTERN                        search only files that match FILE_PATTERN  --exclude=FILE_PATTERN                        skip files and directories matching FILE_PATTERN  --exclude-from=FILE  skip files matching any file pattern from FILE  --exclude-dir=PATTERN directories that match PATTERN will be skipped.</code></pre><p>  -L, –files-without-match print only names of FILEs containing no match</p><p>  -l, –files-with-matches  print only names of FILEs containing matches</p><p>  -c, –count              print only a count of matching lines per FILE</p><p>  -T, –initial-tab        make tabs line up (if needed)</p><p>  -Z, –null                print 0 byte after FILE name</p><p>文件控制:</p><p>  -B, –before-context=NUM  打印以文本起始的NUM 行</p><p>  -A, –after-context=NUM  打印以文本结尾的NUM 行</p><p>  -C, –context=NUM        打印输出文本NUM 行</p><p>  -NUM                      same as –context=NUM</p><pre><code>  --group-separator=SEP use SEP as a group separator  --no-group-separator  use empty string as a group separator  --color[=WHEN],  --colour[=WHEN]      use markers to highlight the matching strings;                        WHEN is &#39;always&#39;, &#39;never&#39;, or &#39;auto&#39;</code></pre><p>  -U, –binary              do not strip CR characters at EOL (MSDOS/Windows)</p><p>  -u, –unix-byte-offsets  report offsets as if CRs were not there</p><pre><code>                        (MSDOS/Windows)</code></pre><p>‘egrep’即‘grep -E’。‘fgrep’即‘grep -F’。</p><p>直接使用‘egrep’或是‘fgrep’均已不可行了。</p><p>若FILE 为 -，将读取标准输入。不带FILE，读取当前目录，除非命令行中指定了-r 选项。</p><p>如果少于两个FILE 参数，就要默认使用-h 参数。</p><p>如果有任意行被匹配，那退出状态为 0，否则为 1；</p><p>如果有错误产生，且未指定 -q 参数，那退出状态为 2。</p>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker搭建mysql+phpadmin+wordpress+ngnix</title>
      <link href="/docker-da-jian-mysql-phpadmin-wordpress-ngnix.html"/>
      <url>/docker-da-jian-mysql-phpadmin-wordpress-ngnix.html</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li><p>系统版本<br><img src="https://upload-images.jianshu.io/upload_images/1728667-e9d083668ecceec9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1557827558608.png"></p></li><li><p>docker 版本<br>   <img src="https://upload-images.jianshu.io/upload_images/1728667-ff58720c7ff7f977.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1557827461114.png"></p></li><li><p>docker-compose<br>具体安装过程参考官方文档即可<br><img src="https://upload-images.jianshu.io/upload_images/1728667-1c102bd2981dda1c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1557827644821.png"></p></li></ul><h2 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h2><h4 id="建一个-docker-compose-yml文件"><a href="#建一个-docker-compose-yml文件" class="headerlink" title="建一个 docker-compose.yml文件"></a>建一个 docker-compose.yml文件</h4><h5 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h5><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">services</span><span class="token punctuation">:</span>    <span class="token key atrule">mysql</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 选中mariadb的最新版本</span>        <span class="token key atrule">image</span><span class="token punctuation">:</span> mariadb<span class="token punctuation">:</span>latest        <span class="token comment" spellcheck="true"># 端口</span>        <span class="token key atrule">expose</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token string">"3306"</span>        <span class="token comment" spellcheck="true">#映射本地 当前目录下mysql文件夹持久化</span>        <span class="token key atrule">volumes</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> ./mysql<span class="token punctuation">:</span>/var/lib/mysql        <span class="token comment" spellcheck="true">#环境变量设置用户名密码</span>        <span class="token key atrule">environment</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> MYSQL_ROOT_PASSWORD=123456          <span class="token punctuation">-</span> MYSQL_USER=wordpress          <span class="token punctuation">-</span> MYSQL_PASSWORD=123456          <span class="token punctuation">-</span> MYSQL_DATABASE=wordpress          <span class="token punctuation">-</span> MYSQL_RANDOM_ROOT_PASSWORD=1        <span class="token comment" spellcheck="true">#挂掉自动重启</span>        <span class="token key atrule">restart</span><span class="token punctuation">:</span> always</code></pre><h5 id="wordpress"><a href="#wordpress" class="headerlink" title="wordpress"></a>wordpress</h5><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">wordpress</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 选中带有php-fpm 的版本，wordpress docker上有很多版本，根据自己情况选择需要的版本</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> wordpress<span class="token punctuation">:</span>5.2.0<span class="token punctuation">-</span>php7.3<span class="token punctuation">-</span>fpm    <span class="token comment" spellcheck="true"># 把wordpress的主体文件夹映射到本地 wordpress目录</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./wordpress<span class="token punctuation">:</span>/var/www/html    <span class="token comment" spellcheck="true"># 环境变量 根据mysql 设置的填入</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> WORDPRESS_DB_HOST=mysql      <span class="token punctuation">-</span> WORDPRESS_DB_NAME=wordpress      <span class="token punctuation">-</span> WORDPRESS_DB_USER=wordpress      <span class="token punctuation">-</span> WORDPRESS_DB_PASSWORD=123456    <span class="token comment" spellcheck="true"># 设置依赖</span>    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> mysql    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always</code></pre><h5 id="phpmyadmin"><a href="#phpmyadmin" class="headerlink" title="phpmyadmin"></a>phpmyadmin</h5><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">phpmyadmin</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> phpmyadmin/phpmyadmin<span class="token punctuation">:</span>latest    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"8080:80"</span>    <span class="token comment" spellcheck="true"># 根据mysql设置相关环境变量</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> PMA_HOST=mysql        <span class="token punctuation">-</span> PMA_USER=wordpress        <span class="token punctuation">-</span> PMA_PASSWORD=123456    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> mysql          <span class="token punctuation">-</span> nginx    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always</code></pre><h5 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h5><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">nginx</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>latest    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">'80:80'</span>      <span class="token punctuation">-</span> <span class="token string">'443:443'</span>    <span class="token comment" spellcheck="true"># 映射本地，加载本地的配置</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./nginx<span class="token punctuation">:</span>/etc/nginx/conf.d      <span class="token punctuation">-</span> ./logs/nginx<span class="token punctuation">:</span>/var/log/nginx      <span class="token punctuation">-</span> ./wordpress<span class="token punctuation">:</span>/var/www/html  <span class="token comment" spellcheck="true">#这里选择本地wordpress即 wordpress。docker中的目录</span>    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> wordpress    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always</code></pre><h2 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h2><p>根据上面配置在当前目录下创建一个nginx文件夹，存放配置文件,配置如下</p><pre class=" language-nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span><span class="token keyword">listen</span> <span class="token number">80</span><span class="token punctuation">;</span><span class="token keyword">server_name</span> localhost<span class="token punctuation">;</span>    <span class="token keyword">root</span> <span class="token operator">/</span>var<span class="token operator">/</span>www<span class="token operator">/</span>html<span class="token punctuation">;</span>    <span class="token keyword">index</span> <span class="token keyword">index</span><span class="token punctuation">.</span>php<span class="token punctuation">;</span>    <span class="token keyword">access_log</span> <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>access<span class="token punctuation">.</span>log<span class="token punctuation">;</span>    <span class="token keyword">error_log</span> <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>error<span class="token punctuation">.</span>log<span class="token punctuation">;</span>    <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>        <span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span><span class="token operator">/</span> <span class="token operator">/</span><span class="token keyword">index</span><span class="token punctuation">.</span>php<span class="token operator">?</span><span class="token variable">$args</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">location</span> <span class="token operator">~</span> \<span class="token punctuation">.</span>php$ <span class="token punctuation">{</span>        <span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token operator">=</span><span class="token number">404</span><span class="token punctuation">;</span>        <span class="token keyword">fastcgi_split_path_info</span> <span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">+</span>\<span class="token punctuation">.</span>php<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token operator">+</span><span class="token punctuation">)</span>$<span class="token punctuation">;</span>        <span class="token keyword">fastcgi_pass</span> wordpress<span class="token punctuation">:</span><span class="token number">9000</span><span class="token punctuation">;</span>        <span class="token keyword">fastcgi_index</span> <span class="token keyword">index</span><span class="token punctuation">.</span>php<span class="token punctuation">;</span>        <span class="token keyword">include</span> fastcgi_params<span class="token punctuation">;</span>        <span class="token keyword">fastcgi_param</span> SCRIPT_FILENAME <span class="token variable">$document_root</span><span class="token variable">$fastcgi_script_name</span><span class="token punctuation">;</span>        <span class="token keyword">fastcgi_param</span> PATH_INFO <span class="token variable">$fastcgi_path_info</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><p>​    启动：docker-compose up</p><h2 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h2><p>如果wordpress 或者phpadmin 链接数据库失败，单独重启一下 wordpress 或者phpadmin 即可</p><h2 id="待优化"><a href="#待优化" class="headerlink" title="待优化"></a>待优化</h2><ul><li>相互依赖的容器 启动顺序控制<br> <a href="https://www.cnblogs.com/wang_yb/p/9400291.html" target="_blank" rel="noopener">docker compose 服务启动顺序控制</a></li></ul><p><a href="https://github.com/Smoking/docker-lnmp-wordpres.git" target="_blank" rel="noopener">github 地址</a></p><hr><p><a href="https://www.lcptcheater.com" target="_blank" rel="noopener">深圳利程电子有限公司</a></p>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>libwebsocket windows 编译</title>
      <link href="/libwebsocket-windows-bian-yi.html"/>
      <url>/libwebsocket-windows-bian-yi.html</url>
      
        <content type="html"><![CDATA[<h2 id="环境：win7-visual-studio-2015-cmake"><a href="#环境：win7-visual-studio-2015-cmake" class="headerlink" title="环境：win7+visual studio 2015 cmake"></a>环境：win7+visual studio 2015 cmake</h2><h3 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h3><p>libsocket源码：<a href="https://github.com/warmcat/libwebsockets" target="_blank" rel="noopener">https://github.com/warmcat/libwebsockets</a></p><h3 id="官方文档说明"><a href="#官方文档说明" class="headerlink" title="官方文档说明"></a>官方文档说明</h3><p>官方文档说明：libwebsockets/README.build.md 中windows（VS）编译：</p><p>@section cmw Building on Windows (Visual Studio)</p><p>Install CMake 2.6 or greater:<a href="http://cmake.org/cmake/resources/software.html" target="_blank" rel="noopener">http://cmake.org/cmake/resources/software.html</a></p><p>Install OpenSSL binaries.<a href="http://www.openssl.org/related/binaries.html" target="_blank" rel="noopener">http://www.openssl.org/related/binaries.html</a></p><p>(NOTE: Preferably in the default location to make it easier for CMake to find them)</p><p>NOTE2: Be sure that OPENSSL_CONF environment variable is defined and points at \bin\openssl.cfg</p><p>Generate the Visual studio project by opening the Visual Studio cmd prompt:</p><p>cd</p><p>md build</p><p>cd build</p><p>cmake -G “Visual Studio 10” ..</p><p>(NOTE: There is also a cmake-gui available on Windows if you prefer that)</p><p>NOTE2: See this link to find out the version number corresponding to your Visual Studio edition:<a href="http://superuser.com/a/194065" target="_blank" rel="noopener">http://superuser.com/a/194065</a></p><p>Now you should have a generated Visual Studio Solution in your/builddirectory, which can be used to build.</p><p>Some additional deps may be needed</p><p>iphlpapi.lib</p><p>psapi.lib</p><p>userenv.lib</p><p>If you’re using libuv, you must make sure to compile libuv with the same multithread-dll / Mtd attributes as libwebsockets itself</p><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><p>第一步  安装CMake:按照提示完成就行。</p><p>第二步  安装OpenSSl：按照提示完成，主要配置好环境变量</p><p>第三步</p><p>1、按照官网提示使用VS自带的命令窗进行输入指令：</p><p><img src="https://i.loli.net/2019/06/27/5d14af54977db40935.png" alt=""></p><p>2、进入指定的libwebsock源码目录创建目录</p><p><img src="https://i.loli.net/2019/06/27/5d14af5483c8b13589.png" alt=""></p><p><img src="https://i.loli.net/2019/06/27/5d14af547549889948.png" alt=""></p><p>cmake-G “Visual Studio 14”.. -DLIB_SUFFIX=64 -DLWS_WITH_HTTP2=1     -DLWS_OPENSSL_INCLUDE_DIRS=E:\Extern_Library\openssl\inc32\openssl -DLWS_OPENSSL_LIBRARIES=”E:\Extern_Library\openssl\out32\libeay32.lib”</p><p>Bulid 目录下生成libwebsocket工程</p><p><img src="https://i.loli.net/2019/06/27/5d14af549d74364021.png" alt=""></p><p>vs 编译工程 ，发现找不到OpenSSL头文件</p><p>设置 OpenSSL的路径</p><p>完成</p><p><a href="https://www.lcptcheater.com" target="_blank" rel="noopener">深圳利程电子有限公司</a></p><hr><p><strong>所有图片均来自网络</strong></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串编码转换</title>
      <link href="/zi-fu-chuan-bian-ma-zhuan-huan.html"/>
      <url>/zi-fu-chuan-bian-ma-zhuan-huan.html</url>
      
        <content type="html"><![CDATA[<p><em>最近弄碰到字符串编码转换的问题，简单记录下</em></p><h3 id="utf8-转-unicode"><a href="#utf8-转-unicode" class="headerlink" title="utf8 转 unicode"></a>utf8 转 unicode</h3><pre class=" language-cpp"><code class="language-cpp">std<span class="token operator">::</span>wstring <span class="token function">UTF8ToWide</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> source<span class="token punctuation">)</span><span class="token punctuation">{</span>    std<span class="token operator">::</span>wstring_convert<span class="token operator">&lt;</span>std<span class="token operator">::</span>codecvt_utf8<span class="token operator">&lt;</span><span class="token keyword">wchar_t</span><span class="token operator">>></span> conv<span class="token punctuation">;</span>    <span class="token keyword">return</span> conv<span class="token punctuation">.</span><span class="token function">from_bytes</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="unicode-转-utf8"><a href="#unicode-转-utf8" class="headerlink" title="unicode 转 utf8"></a>unicode 转 utf8</h3><pre class=" language-cpp"><code class="language-cpp">std<span class="token operator">::</span>string <span class="token function">WideToUTF8</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>wstring<span class="token operator">&amp;</span> source<span class="token punctuation">)</span><span class="token punctuation">{</span>    std<span class="token operator">::</span>wstring_convert<span class="token operator">&lt;</span>std<span class="token operator">::</span>codecvt_utf8<span class="token operator">&lt;</span><span class="token keyword">wchar_t</span><span class="token operator">>></span> conv<span class="token punctuation">;</span>    <span class="token keyword">return</span> conv<span class="token punctuation">.</span><span class="token function">to_bytes</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="utf8-转-utf16"><a href="#utf8-转-utf16" class="headerlink" title="utf8 转 utf16"></a>utf8 转 utf16</h3><pre class=" language-cpp"><code class="language-cpp">std<span class="token operator">::</span>u16string <span class="token function">UTF8ToUTF16</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> source<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token macro property">#<span class="token directive keyword">if</span> defined(OS_WIN)</span>    <span class="token macro property">#<span class="token directive keyword">if</span> _MSC_VER >= 1900</span>    std<span class="token operator">::</span>wstring_convert<span class="token operator">&lt;</span>std<span class="token operator">::</span>codecvt_utf8_utf16<span class="token operator">&lt;</span>int16_t<span class="token operator">></span><span class="token punctuation">,</span> int16_t<span class="token operator">></span> conv<span class="token punctuation">;</span>    <span class="token keyword">auto</span> begin_pos <span class="token operator">=</span> <span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span><span class="token keyword">const</span> int8_t<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">char16_t</span><span class="token operator">*</span><span class="token punctuation">)</span>conv<span class="token punctuation">.</span><span class="token function">from_bytes</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>begin_pos<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>begin_pos <span class="token operator">+</span> source<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">#<span class="token directive keyword">else</span></span>    std<span class="token operator">::</span>wstring_convert<span class="token operator">&lt;</span>std<span class="token operator">::</span>codecvt_utf8_utf16<span class="token operator">&lt;</span><span class="token keyword">char16_t</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token keyword">char16_t</span><span class="token operator">></span> conv<span class="token punctuation">;</span>    <span class="token keyword">return</span> conv<span class="token punctuation">.</span><span class="token function">from_bytes</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token macro property">#<span class="token directive keyword">else</span></span>    std<span class="token operator">::</span>wstring_convert<span class="token operator">&lt;</span>std<span class="token operator">::</span>codecvt_utf8_utf16<span class="token operator">&lt;</span><span class="token keyword">char16_t</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token keyword">char16_t</span><span class="token operator">></span> conv<span class="token punctuation">;</span>    <span class="token keyword">return</span> conv<span class="token punctuation">.</span><span class="token function">from_bytes</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token punctuation">}</span></code></pre><h3 id="utf16-转-utf8"><a href="#utf16-转-utf8" class="headerlink" title="utf16 转 utf8"></a>utf16 转 utf8</h3><pre class=" language-cpp"><code class="language-cpp">std<span class="token operator">::</span>string <span class="token function">UTF16ToUTF8</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>u16string<span class="token operator">&amp;</span> source<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token macro property">#<span class="token directive keyword">if</span> defined(OS_WIN)</span>    <span class="token macro property">#<span class="token directive keyword">if</span> _MSC_VER >= 1900</span>    std<span class="token operator">::</span>wstring_convert<span class="token operator">&lt;</span>std<span class="token operator">::</span>codecvt_utf8_utf16<span class="token operator">&lt;</span>int16_t<span class="token operator">></span><span class="token punctuation">,</span> int16_t<span class="token operator">></span> conv<span class="token punctuation">;</span>    <span class="token keyword">auto</span> begin_pos <span class="token operator">=</span> <span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span><span class="token keyword">const</span> int16_t<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> conv<span class="token punctuation">.</span><span class="token function">to_bytes</span><span class="token punctuation">(</span>begin_pos<span class="token punctuation">,</span> begin_pos <span class="token operator">+</span> source<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">#<span class="token directive keyword">else</span></span>    std<span class="token operator">::</span>wstring_convert<span class="token operator">&lt;</span>std<span class="token operator">::</span>codecvt_utf8_utf16<span class="token operator">&lt;</span><span class="token keyword">char16_t</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token keyword">char16_t</span><span class="token operator">></span> conv<span class="token punctuation">;</span>    <span class="token keyword">return</span> conv<span class="token punctuation">.</span><span class="token function">to_bytes</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token macro property">#<span class="token directive keyword">else</span></span>    std<span class="token operator">::</span>wstring_convert<span class="token operator">&lt;</span>std<span class="token operator">::</span>codecvt_utf8_utf16<span class="token operator">&lt;</span><span class="token keyword">char16_t</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token keyword">char16_t</span><span class="token operator">></span> conv<span class="token punctuation">;</span>    <span class="token keyword">return</span> conv<span class="token punctuation">.</span><span class="token function">to_bytes</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token punctuation">}</span></code></pre><h3 id="Ascii-转unicode"><a href="#Ascii-转unicode" class="headerlink" title="Ascii 转unicode"></a>Ascii 转unicode</h3><pre class=" language-cpp"><code class="language-cpp">std<span class="token operator">::</span>wstring <span class="token function">AsciiToWide</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string _strSrc<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> unicodeLen <span class="token operator">=</span> <span class="token function">MultiByteToWideChar</span><span class="token punctuation">(</span>CP_ACP<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> _strSrc<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">wchar_t</span> <span class="token operator">*</span>pUnicode <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">wchar_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">wchar_t</span><span class="token punctuation">)</span><span class="token operator">*</span>unicodeLen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MultiByteToWideChar</span><span class="token punctuation">(</span>CP_ACP<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> _strSrc<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> pUnicode<span class="token punctuation">,</span> unicodeLen<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>wstring ret_str <span class="token operator">=</span> pUnicode<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>pUnicode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret_str<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="unicode-转-Ascii"><a href="#unicode-转-Ascii" class="headerlink" title="unicode 转 Ascii"></a>unicode 转 Ascii</h3><pre class=" language-cpp"><code class="language-cpp">std<span class="token operator">::</span>string <span class="token function">WideToAscii</span><span class="token punctuation">(</span>std<span class="token operator">::</span>wstring _strSrc<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ansiiLen <span class="token operator">=</span> <span class="token function">WideCharToMultiByte</span><span class="token punctuation">(</span>CP_ACP<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> _strSrc<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>pAssii <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span>ansiiLen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">WideCharToMultiByte</span><span class="token punctuation">(</span>CP_ACP<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> _strSrc<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> pAssii<span class="token punctuation">,</span> ansiiLen<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>string ret_str <span class="token operator">=</span> pAssii<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>pAssii<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret_str<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="utf8-转-Ascii"><a href="#utf8-转-Ascii" class="headerlink" title="utf8 转 Ascii"></a>utf8 转 Ascii</h3><pre class=" language-cpp"><code class="language-cpp">std<span class="token operator">::</span>string <span class="token function">UTF8ToAscii</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string _strSrc<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">WideToAscii</span><span class="token punctuation">(</span><span class="token function">UTF8ToWide</span><span class="token punctuation">(</span>_strSrc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Ascii-转-utf8"><a href="#Ascii-转-utf8" class="headerlink" title="Ascii 转 utf8"></a>Ascii 转 utf8</h3><pre class=" language-cpp"><code class="language-cpp">std<span class="token operator">::</span>string <span class="token function">AsciiToUTF8</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string _strSrc<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">WideToUTF8</span><span class="token punctuation">(</span><span class="token function">AsciiToWide</span><span class="token punctuation">(</span>_strSrc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><a href="https://www.lcptcheater.com" target="_blank" rel="noopener">深圳利程电子有限公司</a></p><hr><p><strong>所有图片均来自网络</strong></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
